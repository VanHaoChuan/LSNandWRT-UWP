#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using global::Windows.Foundation;
using global::Windows.Foundation.Collections;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 32-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace _
{
	[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential, CharSet=global::System.Runtime.InteropServices.CharSet.Unicode)]
	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+Kernel32+CPINFOEXW,System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f" +
		"5f7f11d50a3a")]
	public unsafe partial struct Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages
	{
		public uint MaxCharSize;
		public global::_.Interop_Kernel32_CPINFOEXW__DefaultChar_e__FixedBuffer__System_Text_Encoding_CodePages DefaultChar;
		public global::_.Interop_Kernel32_CPINFOEXW__LeadByte_e__FixedBuffer__System_Text_Encoding_CodePages LeadByte;
		public char UnicodeDefaultChar;
		public uint CodePage;
		public global::_.Interop_Kernel32_CPINFOEXW__CodePageName_e__FixedBuffer__System_Text_Encoding_CodePages CodePageName;
	}

	[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit, Size=2)]
	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+Kernel32+CPINFOEXW+<DefaultChar>e__FixedBuffer,System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=" +
		"neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct Interop_Kernel32_CPINFOEXW__DefaultChar_e__FixedBuffer__System_Text_Encoding_CodePages
	{
		[global::System.Runtime.InteropServices.FieldOffset(0)]
		public byte FixedElementField;
	}

	[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit, Size=12)]
	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+Kernel32+CPINFOEXW+<LeadByte>e__FixedBuffer,System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=neu" +
		"tral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct Interop_Kernel32_CPINFOEXW__LeadByte_e__FixedBuffer__System_Text_Encoding_CodePages
	{
		[global::System.Runtime.InteropServices.FieldOffset(0)]
		public byte FixedElementField;
	}

	[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit, Size=260)]
	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+Kernel32+CPINFOEXW+<CodePageName>e__FixedBuffer,System.Text.Encoding.CodePages, Version=4.1.1.0, Culture" +
		"=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct Interop_Kernel32_CPINFOEXW__CodePageName_e__FixedBuffer__System_Text_Encoding_CodePages
	{
		[global::System.Runtime.InteropServices.FieldOffset(0)]
		public byte FixedElementField;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+Crypt32+CryptOidInfoKeyType,System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, Pub" +
		"licKeyToken=b03f5f7f11d50a3a")]
	public enum Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding
	{
		CRYPT_OID_INFO_OID_KEY = 1,
		CRYPT_OID_INFO_NAME_KEY = 2,
		CRYPT_OID_INFO_ALGID_KEY = 3,
		CRYPT_OID_INFO_SIGN_KEY = 4,
		CRYPT_OID_INFO_CNG_ALGID_KEY = 5,
		CRYPT_OID_INFO_CNG_SIGN_KEY = 6,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+NCrypt+ErrorCode,System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f" +
		"5f7f11d50a3a")]
	public enum Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng
	{
		E_FAIL = -2147467259,
		NTE_BAD_SIGNATURE = -2146893818,
		NTE_NOT_FOUND = -2146893807,
		NTE_BAD_KEYSET = -2146893802,
		NTE_INVALID_PARAMETER = -2146893785,
		NTE_BUFFER_TOO_SMALL = -2146893784,
		NTE_NOT_SUPPORTED = -2146893783,
		NTE_NO_MORE_ITEMS = -2146893782,
		ERROR_SUCCESS = 0,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+BCrypt+NTSTATUS,System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToke" +
		"n=b03f5f7f11d50a3a")]
	public enum Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms : uint
	{
		STATUS_SUCCESS = 0x0u,
		STATUS_INVALID_PARAMETER = 0xC000000Du,
		STATUS_NO_MEMORY = 0xC0000017u,
		STATUS_NOT_FOUND = 0xC0000225u,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Interop+Crypt32+CRYPT_OID_INFO,System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKe" +
		"yToken=b03f5f7f11d50a3a")]
	public unsafe partial struct Interop_Crypt32_CRYPT_OID_INFO__System_Security_Cryptography_Encoding
	{
		public int cbSize;
		public global::System.IntPtr pszOID;
		public global::System.IntPtr pwszName;
		public global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding dwGroupId;
		public int AlgId;
		public int cbData;
		public global::System.IntPtr pbData;
	}
}

namespace Internal.Cryptography.Pal.Native
{
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.SafeCertContextHandle,System.Security.Cryptography.X509Certificates, Version=4." +
		"2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafeCertContextHandle__System_Security_Cryptography_X509Certificates : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeCertContextHandle__System_Security_Cryptography_X509Certificates() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.SafeCertStoreHandle,System.Security.Cryptography.X509Certificates, Version=4.2." +
		"1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafeCertStoreHandle__System_Security_Cryptography_X509Certificates : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeCertStoreHandle__System_Security_Cryptography_X509Certificates() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.SafeCryptMsgHandle,System.Security.Cryptography.X509Certificates, Version=4.2.1" +
		".0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion,System.Security.Cryptography.X509" +
		"Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}
}

namespace Internal_Cryptography_Pal_Native
{
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertContextPropId,System.Security.Cryptography.X509Certificates, Version=4.2.1." +
		"0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertContextPropId__System_Security_Cryptography_X509Certificates
	{
		CERT_KEY_PROV_INFO_PROP_ID = 2,
		CERT_SHA1_HASH_PROP_ID = 3,
		CERT_KEY_CONTEXT_PROP_ID = 5,
		CERT_FRIENDLY_NAME_PROP_ID = 11,
		CERT_ARCHIVED_PROP_ID = 19,
		CERT_KEY_IDENTIFIER_PROP_ID = 20,
		CERT_PUBKEY_ALG_PARA_PROP_ID = 22,
		CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
		CERT_DELETE_KEYSET_PROP_ID = 101,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CRYPTOAPI_BLOB,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, " +
		"Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates
	{
		public int cbData;
		public byte* pbData;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertQueryObjectType,System.Security.Cryptography.X509Certificates, Version=4.2." +
		"1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertQueryObjectType__System_Security_Cryptography_X509Certificates
	{
		CERT_QUERY_OBJECT_FILE = 1,
		CERT_QUERY_OBJECT_BLOB = 2,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.ExpectedContentTypeFlags,System.Security.Cryptography.X509Certificates, Version" +
		"=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates
	{
		CERT_QUERY_CONTENT_FLAG_CERT = 2,
		CERT_QUERY_CONTENT_FLAG_CTL = 4,
		CERT_QUERY_CONTENT_FLAG_CRL = 8,
		CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16,
		CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32,
		CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64,
		CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128,
		CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256,
		CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512,
		CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024,
		CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048,
		CERT_QUERY_CONTENT_FLAG_PFX = 4096,
		CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192,
		CERT_QUERY_CONTENT_FLAG_ALL = 16382,
		CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.ExpectedFormatTypeFlags,System.Security.Cryptography.X509Certificates, Version=" +
		"4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates
	{
		CERT_QUERY_FORMAT_FLAG_BINARY = 2,
		CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4,
		CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8,
		CERT_QUERY_FORMAT_FLAG_ALL = 14,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertEncodingType,System.Security.Cryptography.X509Certificates, Version=4.2.1.0" +
		", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertEncodingType__System_Security_Cryptography_X509Certificates
	{
		X509_ASN_ENCODING = 1,
		PKCS_7_ASN_ENCODING = 65536,
		All = 65537,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.ContentType,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cul" +
		"ture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum ContentType__System_Security_Cryptography_X509Certificates
	{
		CERT_QUERY_CONTENT_CERT = 1,
		CERT_QUERY_CONTENT_CTL = 2,
		CERT_QUERY_CONTENT_CRL = 3,
		CERT_QUERY_CONTENT_SERIALIZED_STORE = 4,
		CERT_QUERY_CONTENT_SERIALIZED_CERT = 5,
		CERT_QUERY_CONTENT_SERIALIZED_CTL = 6,
		CERT_QUERY_CONTENT_SERIALIZED_CRL = 7,
		CERT_QUERY_CONTENT_PKCS7_SIGNED = 8,
		CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9,
		CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10,
		CERT_QUERY_CONTENT_PKCS10 = 11,
		CERT_QUERY_CONTENT_PFX = 12,
		CERT_QUERY_CONTENT_CERT_PAIR = 13,
		CERT_QUERY_CONTENT_PFX_AND_LOAD = 14,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.FormatType,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cult" +
		"ure=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum FormatType__System_Security_Cryptography_X509Certificates
	{
		CERT_QUERY_FORMAT_BINARY = 1,
		CERT_QUERY_FORMAT_BASE64_ENCODED = 2,
		CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CryptMessageParameterType,System.Security.Cryptography.X509Certificates, Versio" +
		"n=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CryptMessageParameterType__System_Security_Cryptography_X509Certificates
	{
		CMSG_SIGNER_COUNT_PARAM = 5,
		CMSG_SIGNER_INFO_PARAM = 6,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.PfxCertStoreFlags,System.Security.Cryptography.X509Certificates, Version=4.2.1." +
		"0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum PfxCertStoreFlags__System_Security_Cryptography_X509Certificates
	{
		None = 0,
		CRYPT_EXPORTABLE = 1,
		CRYPT_USER_PROTECTED = 2,
		PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16,
		CRYPT_MACHINE_KEYSET = 32,
		PKCS12_PREFER_CNG_KSP = 256,
		PKCS12_ALWAYS_CNG_KSP = 512,
		CRYPT_USER_KEYSET = 4096,
		PKCS12_ALLOW_OVERWRITE_KEY = 16384,
		PKCS12_NO_PERSIST_KEY = 32768,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertFindFlags,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, C" +
		"ulture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertFindFlags__System_Security_Cryptography_X509Certificates
	{
		None = 0,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertFindType,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cu" +
		"lture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertFindType__System_Security_Cryptography_X509Certificates
	{
		CERT_FIND_ANY = 0,
		CERT_FIND_HASH = 65536,
		CERT_FIND_ISSUER_STR = 524292,
		CERT_FIND_SUBJECT_STR = 524295,
		CERT_FIND_SUBJECT_CERT = 720896,
		CERT_FIND_EXISTING = 851968,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CERT_CONTEXT,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cu" +
		"lture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CERT_CONTEXT__System_Security_Cryptography_X509Certificates
	{
		public global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType;
		public byte* pbCertEncoded;
		public int cbCertEncoded;
		public global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo;
		public global::System.IntPtr hCertStore;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CERT_INFO,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cultu" +
		"re=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CERT_INFO__System_Security_Cryptography_X509Certificates
	{
		public int dwVersion;
		public global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates SerialNumber;
		public global::Internal_Cryptography_Pal_Native.CRYPT_ALGORITHM_IDENTIFIER__System_Security_Cryptography_X509Certificates SignatureAlgorithm;
		public global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates Issuer;
		public global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates NotBefore;
		public global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates NotAfter;
		public global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates Subject;
		public global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates SubjectPublicKeyInfo;
		public global::Internal_Cryptography_Pal_Native.CRYPT_BIT_BLOB__System_Security_Cryptography_X509Certificates IssuerUniqueId;
		public global::Internal_Cryptography_Pal_Native.CRYPT_BIT_BLOB__System_Security_Cryptography_X509Certificates SubjectUniqueId;
		public int cExtension;
		public global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtension;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CRYPT_ALGORITHM_IDENTIFIER,System.Security.Cryptography.X509Certificates, Versi" +
		"on=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CRYPT_ALGORITHM_IDENTIFIER__System_Security_Cryptography_X509Certificates
	{
		public global::System.IntPtr pszObjId;
		public global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates Parameters;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.FILETIME,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cultur" +
		"e=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct FILETIME__System_Security_Cryptography_X509Certificates
	{
		public uint ftTimeLow;
		public uint ftTimeHigh;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CERT_PUBLIC_KEY_INFO,System.Security.Cryptography.X509Certificates, Version=4.2" +
		".1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates
	{
		public global::Internal_Cryptography_Pal_Native.CRYPT_ALGORITHM_IDENTIFIER__System_Security_Cryptography_X509Certificates Algorithm;
		public global::Internal_Cryptography_Pal_Native.CRYPT_BIT_BLOB__System_Security_Cryptography_X509Certificates PublicKey;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CRYPT_BIT_BLOB,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, " +
		"Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CRYPT_BIT_BLOB__System_Security_Cryptography_X509Certificates
	{
		public int cbData;
		public byte* pbData;
		public int cUnusedBits;
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CERT_EXTENSION,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, " +
		"Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct CERT_EXTENSION__System_Security_Cryptography_X509Certificates
	{
		public global::System.IntPtr pszObjId;
		public int fCritical;
		public global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates Value;
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CryptAcquireContextFlags,System.Security.Cryptography.X509Certificates, Version" +
		"=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates
	{
		None = 0,
		CRYPT_DELETEKEYSET = 16,
		CRYPT_MACHINE_KEYSET = 32,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertNameType,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Cu" +
		"lture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertNameType__System_Security_Cryptography_X509Certificates
	{
		CERT_NAME_EMAIL_TYPE = 1,
		CERT_NAME_RDN_TYPE = 2,
		CERT_NAME_ATTR_TYPE = 3,
		CERT_NAME_SIMPLE_DISPLAY_TYPE = 4,
		CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5,
		CERT_NAME_DNS_TYPE = 6,
		CERT_NAME_URL_TYPE = 7,
		CERT_NAME_UPN_TYPE = 8,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertNameFlags,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, C" +
		"ulture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertNameFlags__System_Security_Cryptography_X509Certificates
	{
		None = 0,
		CERT_NAME_ISSUER_FLAG = 1,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.Cryptography.Pal.Native.CertNameStringType,System.Security.Cryptography.X509Certificates, Version=4.2.1" +
		".0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CertNameStringType__System_Security_Cryptography_X509Certificates
	{
		CERT_X500_NAME_STR = 3,
		CERT_NAME_STR_REVERSE_FLAG = 33554432,
	}
}

namespace Internal_WinRT_Interop
{
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.WinRT.Interop.WinRTCallbacks+DispatcherQueuePriority,System.Private.WinRTInterop.CoreLib, Version=4.0.0" +
		".0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
	public enum WinRTCallbacks_DispatcherQueuePriority__System_Private_WinRTInterop_CoreLib
	{
		Low = -10,
		Normal = 0,
		High = 10,
	}
}

namespace Internal_WinRT_Interop_WinRTCallbacks
{
	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.WinRT.Interop.WinRTCallbacks+IDispatcherQueueHandler,System.Private.WinRTInterop.CoreLib, Version=4.0.0" +
		".0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
	public unsafe interface IDispatcherQueueHandler__System_Private_WinRTInterop_CoreLib
	{
		void Invoke();
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.WinRT.Interop.WinRTCallbacks+IDispatcherQueue,System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Cul" +
		"ture=neutral, PublicKeyToken=b77a5c561934e089")]
	public unsafe interface IDispatcherQueue__System_Private_WinRTInterop_CoreLib
	{
		object CreateTimer();

		bool TryEnqueue(global::Internal_WinRT_Interop_WinRTCallbacks.IDispatcherQueueHandler__System_Private_WinRTInterop_CoreLib callback);

		bool TryEnqueue(
					global::Internal_WinRT_Interop.WinRTCallbacks_DispatcherQueuePriority__System_Private_WinRTInterop_CoreLib priority, 
					global::Internal_WinRT_Interop_WinRTCallbacks.IDispatcherQueueHandler__System_Private_WinRTInterop_CoreLib callback);
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Internal.WinRT.Interop.WinRTCallbacks+IDispatcherQueueStatics,System.Private.WinRTInterop.CoreLib, Version=4.0.0" +
		".0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
	public unsafe interface IDispatcherQueueStatics__System_Private_WinRTInterop_CoreLib
	{
		global::Internal_WinRT_Interop_WinRTCallbacks.IDispatcherQueue__System_Private_WinRTInterop_CoreLib GetForCurrentThread();
	}
}

namespace Microsoft.Graphics.Canvas
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasDevice))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasDevice : global::System.__ComObject, global::Microsoft.Graphics.Canvas.ICanvasDevice, global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice, global::System.IDisposable, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasDevice(bool forceSoftwareRenderer)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceFactory_CreateWithForceSoftwareRendererOption(
								"Microsoft.Graphics.Canvas.CanvasDevice", 
								forceSoftwareRenderer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceFactory_CreateWithForceSoftwareRendererOption(
					string typeName, 
					bool forceSoftwareRenderer)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasDeviceFactory__Impl.Stubs.CreateWithForceSoftwareRendererOption(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasDeviceFactory).TypeHandle
												), 
								forceSoftwareRenderer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasDevice()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.CanvasDevice");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		public bool get_ForceSoftwareRenderer()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.ICanvasDevice__Impl.Stubs.get_ForceSoftwareRenderer(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaximumBitmapSizeInPixels")]
		public int get_MaximumBitmapSizeInPixels()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasDevice__Impl.Stubs.get_MaximumBitmapSizeInPixels(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DeviceLost")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DeviceLost(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.CanvasDevice, object> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.ICanvasDevice__Impl.Stubs.add_DeviceLost(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DeviceLost")]
		public void remove_DeviceLost(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDevice__Impl.Stubs.remove_DeviceLost(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public bool IsDeviceLost(int hresult)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.ICanvasDevice__Impl.Stubs.IsDeviceLost(
								this, 
								hresult
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void RaiseDeviceLost()
		{
			global::Microsoft.Graphics.Canvas.ICanvasDevice__Impl.Stubs.RaiseDeviceLost(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreator__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void Trim()
		{
			global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice__Impl.Stubs.Trim(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static global::Microsoft.Graphics.Canvas.CanvasDevice CreateFromDirect3D11Device(global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice direct3DDevice)
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_CreateFromDirect3D11Device(
								"Microsoft.Graphics.Canvas.CanvasDevice", 
								direct3DDevice
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasDevice __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_CreateFromDirect3D11Device(
					string typeName, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice direct3DDevice)
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics__Impl.Stubs.CreateFromDirect3D11Device(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics).TypeHandle
												), 
								direct3DDevice
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasDevice GetSharedDevice()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_GetSharedDevice("Microsoft.Graphics.Canvas.CanvasDevice");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasDevice __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_GetSharedDevice(string typeName)
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics__Impl.Stubs.GetSharedDevice(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasDevice GetSharedDevice(bool forceSoftwareRenderer)
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_GetSharedDevice(
								"Microsoft.Graphics.Canvas.CanvasDevice", 
								forceSoftwareRenderer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasDevice __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_GetSharedDevice(
					string typeName, 
					bool forceSoftwareRenderer)
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics__Impl.Stubs.GetSharedDevice(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics).TypeHandle
												), 
								forceSoftwareRenderer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DebugLevel")]
		public static void put_DebugLevel(global::Microsoft.Graphics.Canvas.CanvasDebugLevel value)
		{
			__Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_put_DebugLevel(
								"Microsoft.Graphics.Canvas.CanvasDevice", 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_put_DebugLevel(
					string typeName, 
					global::Microsoft.Graphics.Canvas.CanvasDebugLevel value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics__Impl.Stubs.put_DebugLevel(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics).TypeHandle
												), 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DebugLevel")]
		public static global::Microsoft.Graphics.Canvas.CanvasDebugLevel get_DebugLevel()
		{
			global::Microsoft.Graphics.Canvas.CanvasDebugLevel retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_get_DebugLevel("Microsoft.Graphics.Canvas.CanvasDevice");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasDebugLevel __Factory_Microsoft_Graphics_Canvas__ICanvasDeviceStatics_get_DebugLevel(string typeName)
		{
			global::Microsoft.Graphics.Canvas.CanvasDebugLevel __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics__Impl.Stubs.get_DebugLevel(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Microsoft.Graphics.Canvas.ICanvasDeviceStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasDevice(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasDrawingSession))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasDrawingSession : global::System.__ComObject, global::Microsoft.Graphics.Canvas.ICanvasDrawingSession, global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public void Clear(global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.Clear(
								this, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(global::Microsoft.Graphics.Canvas.ICanvasImage image)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								offset
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					global::Windows.Foundation.Rect destinationRectangle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								bitmap, 
								destinationRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								offset, 
								sourceRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								x, 
								y, 
								sourceRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								destinationRectangle, 
								sourceRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								offset, 
								sourceRectangle, 
								opacity
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								x, 
								y, 
								sourceRectangle, 
								opacity
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								destinationRectangle, 
								sourceRectangle, 
								opacity
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								offset, 
								sourceRectangle, 
								opacity, 
								interpolation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								x, 
								y, 
								sourceRectangle, 
								opacity, 
								interpolation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								destinationRectangle, 
								sourceRectangle, 
								opacity, 
								interpolation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::Microsoft.Graphics.Canvas.CanvasComposite composite)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								offset, 
								sourceRectangle, 
								opacity, 
								interpolation, 
								composite
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::Microsoft.Graphics.Canvas.CanvasComposite composite)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								x, 
								y, 
								sourceRectangle, 
								opacity, 
								interpolation, 
								composite
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::Microsoft.Graphics.Canvas.CanvasComposite composite)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								image, 
								destinationRectangle, 
								sourceRectangle, 
								opacity, 
								interpolation, 
								composite
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::System.Numerics.Matrix4x4 perspective)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								bitmap, 
								offset, 
								sourceRectangle, 
								opacity, 
								interpolation, 
								perspective
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::System.Numerics.Matrix4x4 perspective)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								bitmap, 
								x, 
								y, 
								sourceRectangle, 
								opacity, 
								interpolation, 
								perspective
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::System.Numerics.Matrix4x4 perspective)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawImage(
								this, 
								bitmap, 
								destinationRectangle, 
								sourceRectangle, 
								opacity, 
								interpolation, 
								perspective
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								point0, 
								point1, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								x0, 
								y0, 
								x1, 
								y1, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								point0, 
								point1, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								x0, 
								y0, 
								x1, 
								y1, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								point0, 
								point1, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								x0, 
								y0, 
								x1, 
								y1, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								point0, 
								point1, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								x0, 
								y0, 
								x1, 
								y1, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								point0, 
								point1, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								x0, 
								y0, 
								x1, 
								y1, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								point0, 
								point1, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawLine(
								this, 
								x0, 
								y0, 
								x1, 
								y1, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								rect, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								rect, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								rect, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								rect, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								rect, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								rect, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRectangle(
								this, 
								rect, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRectangle(
								this, 
								rect, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRectangle(
								this, 
								rect, 
								brush, 
								opacityBrush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								brush, 
								opacityBrush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRoundedRectangle(
								this, 
								rect, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillRoundedRectangle(
								this, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillEllipse(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillEllipse(
								this, 
								x, 
								y, 
								radiusX, 
								radiusY, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								centerPoint, 
								radius, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								x, 
								y, 
								radius, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								centerPoint, 
								radius, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								x, 
								y, 
								radius, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								centerPoint, 
								radius, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								x, 
								y, 
								radius, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								centerPoint, 
								radius, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								x, 
								y, 
								radius, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								centerPoint, 
								radius, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								x, 
								y, 
								radius, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								centerPoint, 
								radius, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCircle(
								this, 
								x, 
								y, 
								radius, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillCircle(
								this, 
								centerPoint, 
								radius, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillCircle(
								this, 
								x, 
								y, 
								radius, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillCircle(
								this, 
								centerPoint, 
								radius, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillCircle(
								this, 
								x, 
								y, 
								radius, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					global::System.Numerics.Vector2 point, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								point, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					float x, 
					float y, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								x, 
								y, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					global::System.Numerics.Vector2 point, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								point, 
								brush, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					global::Windows.Foundation.Rect rectangle, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								rectangle, 
								brush, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								x, 
								y, 
								brush, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								x, 
								y, 
								w, 
								h, 
								brush, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					global::System.Numerics.Vector2 point, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								point, 
								color, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					global::Windows.Foundation.Rect rectangle, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								rectangle, 
								color, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					float x, 
					float y, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								x, 
								y, 
								color, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawText(
					string text, 
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawText(
								this, 
								text, 
								x, 
								y, 
								w, 
								h, 
								color, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								offset, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								offset, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								x, 
								y, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								x, 
								y, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								offset, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								offset, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								x, 
								y, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								x, 
								y, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								brush, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								color, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								offset, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								offset, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								x, 
								y, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								x, 
								y, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								brush, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGeometry(
								this, 
								geometry, 
								color, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								offset, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								offset, 
								brush, 
								opacityBrush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								offset, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								x, 
								y, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								x, 
								y, 
								brush, 
								opacityBrush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								x, 
								y, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								brush, 
								opacityBrush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.FillGeometry(
								this, 
								geometry, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCachedGeometry(
								this, 
								geometry, 
								offset, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCachedGeometry(
								this, 
								geometry, 
								offset, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCachedGeometry(
								this, 
								geometry, 
								x, 
								y, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCachedGeometry(
								this, 
								geometry, 
								x, 
								y, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCachedGeometry(
								this, 
								geometry, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawCachedGeometry(
								this, 
								geometry, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					global::System.Numerics.Vector2 point, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawTextLayout(
								this, 
								textLayout, 
								point, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawTextLayout(
								this, 
								textLayout, 
								x, 
								y, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					global::System.Numerics.Vector2 point, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawTextLayout(
								this, 
								textLayout, 
								point, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					float x, 
					float y, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawTextLayout(
								this, 
								textLayout, 
								x, 
								y, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawInk(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Input.Inking.InkStroke> inkStrokes)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawInk(
								this, 
								inkStrokes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawInk(
					global::System.Collections.Generic.IEnumerable<global::Windows.UI.Input.Inking.InkStroke> inkStrokes, 
					bool highContrast)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawInk(
								this, 
								inkStrokes, 
								highContrast
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGradientMesh(global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh gradientMesh)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGradientMesh(
								this, 
								gradientMesh
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGradientMesh(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh gradientMesh, 
					global::System.Numerics.Vector2 point)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGradientMesh(
								this, 
								gradientMesh, 
								point
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void DrawGradientMesh(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh gradientMesh, 
					float x, 
					float y)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.DrawGradientMesh(
								this, 
								gradientMesh, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Antialiasing")]
		public global::Microsoft.Graphics.Canvas.CanvasAntialiasing get_Antialiasing()
		{
			global::Microsoft.Graphics.Canvas.CanvasAntialiasing __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.get_Antialiasing(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Antialiasing")]
		public void put_Antialiasing(global::Microsoft.Graphics.Canvas.CanvasAntialiasing value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.put_Antialiasing(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Blend")]
		public global::Microsoft.Graphics.Canvas.CanvasBlend get_Blend()
		{
			global::Microsoft.Graphics.Canvas.CanvasBlend __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.get_Blend(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Blend")]
		public void put_Blend(global::Microsoft.Graphics.Canvas.CanvasBlend value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.put_Blend(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TextAntialiasing")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing get_TextAntialiasing()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.get_TextAntialiasing(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TextAntialiasing")]
		public void put_TextAntialiasing(global::Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.put_TextAntialiasing(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TextRenderingParameters")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters get_TextRenderingParameters()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.get_TextRenderingParameters(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TextRenderingParameters")]
		public void put_TextRenderingParameters(global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.put_TextRenderingParameters(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		public global::System.Numerics.Matrix3x2 get_Transform()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.get_Transform(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		public void put_Transform(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.put_Transform(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Units")]
		public global::Microsoft.Graphics.Canvas.CanvasUnits get_Units()
		{
			global::Microsoft.Graphics.Canvas.CanvasUnits __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.get_Units(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Units")]
		public void put_Units(global::Microsoft.Graphics.Canvas.CanvasUnits value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.put_Units(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(float opacity)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacity
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacityBrush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Windows.Foundation.Rect clipRectangle)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacity, 
								clipRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Windows.Foundation.Rect clipRectangle)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacityBrush, 
								clipRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacity, 
								clipGeometry
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacityBrush, 
								clipGeometry
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry, 
					global::System.Numerics.Matrix3x2 geometryTransform)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacity, 
								clipGeometry, 
								geometryTransform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry, 
					global::System.Numerics.Matrix3x2 geometryTransform)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacityBrush, 
								clipGeometry, 
								geometryTransform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Windows.Foundation.Rect clipRectangle, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry, 
					global::System.Numerics.Matrix3x2 geometryTransform, 
					global::Microsoft.Graphics.Canvas.CanvasLayerOptions options)
		{
			global::Microsoft.Graphics.Canvas.CanvasActiveLayer __retVal = global::Microsoft.Graphics.Canvas.ICanvasDrawingSession__Impl.Stubs.CreateLayer(
								this, 
								opacity, 
								opacityBrush, 
								clipRectangle, 
								clipGeometry, 
								geometryTransform, 
								options
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreator__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasDrawingSession(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmap))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe class CanvasBitmap : global::Windows.UI.Xaml.DependencyObject, global::Microsoft.Graphics.Canvas.ICanvasBitmap, global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface, global::System.IDisposable, global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource
	{
		public virtual void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		public virtual global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels()
		{
			global::Windows.Graphics.Imaging.BitmapSize __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_SizeInPixels(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public virtual global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Bounds")]
		public virtual global::Windows.Foundation.Rect get_Bounds()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_Bounds(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public virtual float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public virtual global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Format")]
		public virtual global::Windows.Graphics.DirectX.DirectXPixelFormat get_Format()
		{
			global::Windows.Graphics.DirectX.DirectXPixelFormat __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_Format(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public virtual global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.Foundation.IAsyncAction SaveAsync(string fileName)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SaveAsync(
								this, 
								fileName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.Foundation.IAsyncAction SaveAsync(
					string fileName, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SaveAsync(
								this, 
								fileName, 
								fileFormat
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.Foundation.IAsyncAction SaveAsync(
					string fileName, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat, 
					float quality)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SaveAsync(
								this, 
								fileName, 
								fileFormat, 
								quality
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.Foundation.IAsyncAction SaveAsync(
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SaveAsync(
								this, 
								stream, 
								fileFormat
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.Foundation.IAsyncAction SaveAsync(
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat, 
					float quality)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SaveAsync(
								this, 
								stream, 
								fileFormat, 
								quality
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual byte[] GetPixelBytes()
		{
			byte[] __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.GetPixelBytes(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual byte[] GetPixelBytes(
					int left, 
					int top, 
					int width, 
					int height)
		{
			byte[] __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.GetPixelBytes(
								this, 
								left, 
								top, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.UI.Color[] GetPixelColors()
		{
			global::Windows.UI.Color[] __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.GetPixelColors(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.UI.Color[] GetPixelColors(
					int left, 
					int top, 
					int width, 
					int height)
		{
			global::Windows.UI.Color[] __retVal = global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.GetPixelColors(
								this, 
								left, 
								top, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual void SetPixelBytes(byte[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SetPixelBytes(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void SetPixelBytes(
					byte[] valueElements, 
					int left, 
					int top, 
					int width, 
					int height)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SetPixelBytes(
								this, 
								valueElements, 
								left, 
								top, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void SetPixelColors(global::Windows.UI.Color[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SetPixelColors(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void SetPixelColors(
					global::Windows.UI.Color[] valueElements, 
					int left, 
					int top, 
					int width, 
					int height)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.SetPixelColors(
								this, 
								valueElements, 
								left, 
								top, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void CopyPixelsFromBitmap(global::Microsoft.Graphics.Canvas.CanvasBitmap otherBitmap)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.CopyPixelsFromBitmap(
								this, 
								otherBitmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void CopyPixelsFromBitmap(
					global::Microsoft.Graphics.Canvas.CanvasBitmap otherBitmap, 
					int destX, 
					int destY)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.CopyPixelsFromBitmap(
								this, 
								otherBitmap, 
								destX, 
								destY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void CopyPixelsFromBitmap(
					global::Microsoft.Graphics.Canvas.CanvasBitmap otherBitmap, 
					int destX, 
					int destY, 
					int sourceRectLeft, 
					int sourceRectTop, 
					int sourceRectWidth, 
					int sourceRectHeight)
		{
			global::Microsoft.Graphics.Canvas.ICanvasBitmap__Impl.Stubs.CopyPixelsFromBitmap(
								this, 
								otherBitmap, 
								destX, 
								destY, 
								sourceRectLeft, 
								sourceRectTop, 
								sourceRectWidth, 
								sourceRectHeight
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Description")]
		public virtual global::Windows.Graphics.DirectX.Direct3D11.Direct3DSurfaceDescription get_Description()
		{
			global::Windows.Graphics.DirectX.Direct3D11.Direct3DSurfaceDescription __retVal = global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface__Impl.Stubs.get_Description(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromDirect3D11Surface(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								surface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromDirect3D11Surface(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromDirect3D11Surface(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								surface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromDirect3D11Surface(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								surface, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromDirect3D11Surface(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromDirect3D11Surface(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								surface, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromDirect3D11Surface(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								surface, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromDirect3D11Surface(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromDirect3D11Surface(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								surface, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromBytes(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromBytes(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								bytes, 
								widthInPixels, 
								heightInPixels, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromBytes(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromBytes(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								bytes, 
								widthInPixels, 
								heightInPixels, 
								format
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromBytes(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromBytes(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								bytes, 
								widthInPixels, 
								heightInPixels, 
								format, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromBytes(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromBytes(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								bytes, 
								widthInPixels, 
								heightInPixels, 
								format, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromBytes(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromBytes(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								bytes, 
								widthInPixels, 
								heightInPixels, 
								format, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromBytes(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromBytes(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								bytes, 
								widthInPixels, 
								heightInPixels, 
								format, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromColors(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromColors(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								colors, 
								widthInPixels, 
								heightInPixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromColors(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromColors(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								colors, 
								widthInPixels, 
								heightInPixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromColors(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromColors(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								colors, 
								widthInPixels, 
								heightInPixels, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromColors(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromColors(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								colors, 
								widthInPixels, 
								heightInPixels, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromColors(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromColors(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								colors, 
								widthInPixels, 
								heightInPixels, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromColors(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromColors(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								colors, 
								widthInPixels, 
								heightInPixels, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromSoftwareBitmap(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.Imaging.SoftwareBitmap sourceBitmap)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromSoftwareBitmap(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								sourceBitmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasBitmap __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_CreateFromSoftwareBitmap(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.Imaging.SoftwareBitmap sourceBitmap)
		{
			global::Microsoft.Graphics.Canvas.CanvasBitmap __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.CreateFromSoftwareBitmap(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								sourceBitmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								fileName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								fileName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName, 
					float dpi)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								fileName, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName, 
					float dpi)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								fileName, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								fileName, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								fileName, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								uri
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								uri
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri, 
					float dpi)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								uri, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri, 
					float dpi)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								uri, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								uri, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								uri, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								stream
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								stream
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					float dpi)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								stream, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					float dpi)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								stream, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
								"Microsoft.Graphics.Canvas.CanvasBitmap", 
								resourceCreator, 
								stream, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __Factory_Microsoft_Graphics_Canvas__ICanvasBitmapStatics_LoadAsync(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics__Impl.Stubs.LoadAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasBitmapStatics).TypeHandle
												), 
								resourceCreator, 
								stream, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasBitmap(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasActiveLayer))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasActiveLayer : global::System.__ComObject, global::Microsoft.Graphics.Canvas.ICanvasActiveLayer, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public CanvasActiveLayer(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTarget))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasRenderTarget : global::Microsoft.Graphics.Canvas.CanvasBitmap, global::Microsoft.Graphics.Canvas.ICanvasRenderTarget
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRenderTarget(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithSize(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithSize(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory__Impl.Stubs.CreateWithSize(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory).TypeHandle
												), 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRenderTarget(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithWidthAndHeight(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithWidthAndHeight(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory__Impl.Stubs.CreateWithWidthAndHeight(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRenderTarget(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpi(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpi(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpi(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRenderTarget(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								format, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								format, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession()
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTarget__Impl.Stubs.CreateDrawingSession(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasRenderTarget CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface)
		{
			global::Microsoft.Graphics.Canvas.CanvasRenderTarget retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetStatics_CreateFromDirect3D11Surface(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								surface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasRenderTarget __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetStatics_CreateFromDirect3D11Surface(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface)
		{
			global::Microsoft.Graphics.Canvas.CanvasRenderTarget __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics__Impl.Stubs.CreateFromDirect3D11Surface(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics).TypeHandle
												), 
								resourceCreator, 
								surface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasRenderTarget CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasRenderTarget retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetStatics_CreateFromDirect3D11Surface(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								surface, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasRenderTarget __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetStatics_CreateFromDirect3D11Surface(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasRenderTarget __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics__Impl.Stubs.CreateFromDirect3D11Surface(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics).TypeHandle
												), 
								resourceCreator, 
								surface, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasRenderTarget CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasRenderTarget retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetStatics_CreateFromDirect3D11Surface(
								"Microsoft.Graphics.Canvas.CanvasRenderTarget", 
								resourceCreator, 
								surface, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasRenderTarget __Factory_Microsoft_Graphics_Canvas__ICanvasRenderTargetStatics_CreateFromDirect3D11Surface(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha)
		{
			global::Microsoft.Graphics.Canvas.CanvasRenderTarget __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics__Impl.Stubs.CreateFromDirect3D11Surface(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics).TypeHandle
												), 
								resourceCreator, 
								surface, 
								dpi, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasRenderTarget(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChain))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasSwapChain : global::System.__ComObject, global::Microsoft.Graphics.Canvas.ICanvasSwapChain, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasSwapChain(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithSize(
								"Microsoft.Graphics.Canvas.CanvasSwapChain", 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithSize(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory__Impl.Stubs.CreateWithSize(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory).TypeHandle
												), 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasSwapChain(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithWidthAndHeight(
								"Microsoft.Graphics.Canvas.CanvasSwapChain", 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithWidthAndHeight(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory__Impl.Stubs.CreateWithWidthAndHeight(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasSwapChain(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithWidthAndHeightAndDpi(
								"Microsoft.Graphics.Canvas.CanvasSwapChain", 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithWidthAndHeightAndDpi(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpi(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasSwapChain(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					int bufferCount, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithAllOptions(
								"Microsoft.Graphics.Canvas.CanvasSwapChain", 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								format, 
								bufferCount, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainFactory_CreateWithAllOptions(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					int bufferCount, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory__Impl.Stubs.CreateWithAllOptions(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChainFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								format, 
								bufferCount, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public void Present()
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.Present(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Present(int syncInterval)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.Present(
								this, 
								syncInterval
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResizeBuffers(global::Windows.Foundation.Size newSize)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.ResizeBuffers(
								this, 
								newSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResizeBuffers(
					float newWidth, 
					float newHeight)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.ResizeBuffers(
								this, 
								newWidth, 
								newHeight
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResizeBuffers(
					float newWidth, 
					float newHeight, 
					float newDpi)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.ResizeBuffers(
								this, 
								newWidth, 
								newHeight, 
								newDpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResizeBuffers(
					float newWidth, 
					float newHeight, 
					float newDpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat newFormat, 
					int bufferCount)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.ResizeBuffers(
								this, 
								newWidth, 
								newHeight, 
								newDpi, 
								newFormat, 
								bufferCount
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		public global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels()
		{
			global::Windows.Graphics.Imaging.BitmapSize __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_SizeInPixels(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Format")]
		public global::Windows.Graphics.DirectX.DirectXPixelFormat get_Format()
		{
			global::Windows.Graphics.DirectX.DirectXPixelFormat __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_Format(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BufferCount")]
		public int get_BufferCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_BufferCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Rotation")]
		public global::Microsoft.Graphics.Canvas.CanvasSwapChainRotation get_Rotation()
		{
			global::Microsoft.Graphics.Canvas.CanvasSwapChainRotation __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_Rotation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Rotation")]
		public void put_Rotation(global::Microsoft.Graphics.Canvas.CanvasSwapChainRotation value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.put_Rotation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceSize")]
		public global::Windows.Foundation.Size get_SourceSize()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_SourceSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceSize")]
		public void put_SourceSize(global::Windows.Foundation.Size value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.put_SourceSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformMatrix")]
		public global::System.Numerics.Matrix3x2 get_TransformMatrix()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.get_TransformMatrix(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformMatrix")]
		public void put_TransformMatrix(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.put_TransformMatrix(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(global::Windows.UI.Color clearColor)
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.CreateDrawingSession(
								this, 
								clearColor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void WaitForVerticalBlank()
		{
			global::Microsoft.Graphics.Canvas.ICanvasSwapChain__Impl.Stubs.WaitForVerticalBlank(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static global::Microsoft.Graphics.Canvas.CanvasSwapChain CreateForCoreWindow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Core.CoreWindow coreWindow, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasSwapChain retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainStatics_CreateForCoreWindow(
								"Microsoft.Graphics.Canvas.CanvasSwapChain", 
								resourceCreator, 
								coreWindow, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasSwapChain __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainStatics_CreateForCoreWindow(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Core.CoreWindow coreWindow, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.CanvasSwapChain __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChainStatics__Impl.Stubs.CreateForCoreWindow(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChainStatics).TypeHandle
												), 
								resourceCreator, 
								coreWindow, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.CanvasSwapChain CreateForCoreWindow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Core.CoreWindow coreWindow, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					int bufferCount)
		{
			global::Microsoft.Graphics.Canvas.CanvasSwapChain retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainStatics_CreateForCoreWindow(
								"Microsoft.Graphics.Canvas.CanvasSwapChain", 
								resourceCreator, 
								coreWindow, 
								width, 
								height, 
								dpi, 
								format, 
								bufferCount
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.CanvasSwapChain __Factory_Microsoft_Graphics_Canvas__ICanvasSwapChainStatics_CreateForCoreWindow(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Core.CoreWindow coreWindow, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					int bufferCount)
		{
			global::Microsoft.Graphics.Canvas.CanvasSwapChain __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasSwapChainStatics__Impl.Stubs.CreateForCoreWindow(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasSwapChainStatics).TypeHandle
												), 
								resourceCreator, 
								coreWindow, 
								width, 
								height, 
								dpi, 
								format, 
								bufferCount
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasSwapChain(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasCommandList))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasCommandList : global::System.__ComObject, global::Microsoft.Graphics.Canvas.ICanvasCommandList, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasCommandList(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas__ICanvasCommandListFactory_Create(
								"Microsoft.Graphics.Canvas.CanvasCommandList", 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas__ICanvasCommandListFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.ICanvasCommandListFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.ICanvasCommandListFactory).TypeHandle
												), 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession()
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.ICanvasCommandList__Impl.Stubs.CreateDrawingSession(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasCommandList__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasCommandList(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasDeviceFactory
	{
		global::System.IntPtr CreateWithForceSoftwareRendererOption(bool forceSoftwareRenderer);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasDeviceStatics
	{
		global::Microsoft.Graphics.Canvas.CanvasDevice CreateFromDirect3D11Device(global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice direct3DDevice);

		global::Microsoft.Graphics.Canvas.CanvasDevice GetSharedDevice();

		global::Microsoft.Graphics.Canvas.CanvasDevice GetSharedDevice(bool forceSoftwareRenderer);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DebugLevel")]
		void put_DebugLevel(global::Microsoft.Graphics.Canvas.CanvasDebugLevel value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DebugLevel")]
		global::Microsoft.Graphics.Canvas.CanvasDebugLevel get_DebugLevel();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasDevice : global::System.IDisposable, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator, global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		bool get_ForceSoftwareRenderer();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaximumBitmapSizeInPixels")]
		int get_MaximumBitmapSizeInPixels();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DeviceLost")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DeviceLost(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.CanvasDevice, object> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DeviceLost")]
		void remove_DeviceLost(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		bool IsDeviceLost(int hresult);

		void RaiseDeviceLost();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasResourceCreator
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasResourceCreatorWithDpi : global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		float get_Dpi();

		float ConvertPixelsToDips(int pixels);

		int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasDrawingSession : global::System.IDisposable, global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		void Clear(global::Windows.UI.Color color);

		void DrawImage(global::Microsoft.Graphics.Canvas.ICanvasImage image);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					global::Windows.Foundation.Rect destinationRectangle);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::Microsoft.Graphics.Canvas.CanvasComposite composite);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::Microsoft.Graphics.Canvas.CanvasComposite composite);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.ICanvasImage image, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::Microsoft.Graphics.Canvas.CanvasComposite composite);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::System.Numerics.Matrix4x4 perspective);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					float x, 
					float y, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::System.Numerics.Matrix4x4 perspective);

		void DrawImage(
					global::Microsoft.Graphics.Canvas.CanvasBitmap bitmap, 
					global::Windows.Foundation.Rect destinationRectangle, 
					global::Windows.Foundation.Rect sourceRectangle, 
					float opacity, 
					global::Microsoft.Graphics.Canvas.CanvasImageInterpolation interpolation, 
					global::System.Numerics.Matrix4x4 perspective);

		void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Windows.UI.Color color);

		void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Windows.UI.Color color);

		void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawLine(
					global::System.Numerics.Vector2 point0, 
					global::System.Numerics.Vector2 point1, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawLine(
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color);

		void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color);

		void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void FillRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Windows.UI.Color color);

		void FillRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color);

		void FillRectangle(
					global::Windows.Foundation.Rect rect, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush);

		void FillRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush);

		void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void FillRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillRoundedRectangle(
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void FillRoundedRectangle(
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void FillEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillEllipse(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void FillEllipse(
					float x, 
					float y, 
					float radiusX, 
					float radiusY, 
					global::Windows.UI.Color color);

		void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color);

		void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color);

		void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void FillCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillCircle(
					float x, 
					float y, 
					float radius, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillCircle(
					global::System.Numerics.Vector2 centerPoint, 
					float radius, 
					global::Windows.UI.Color color);

		void FillCircle(
					float x, 
					float y, 
					float radius, 
					global::Windows.UI.Color color);

		void DrawText(
					string text, 
					global::System.Numerics.Vector2 point, 
					global::Windows.UI.Color color);

		void DrawText(
					string text, 
					float x, 
					float y, 
					global::Windows.UI.Color color);

		void DrawText(
					string text, 
					global::System.Numerics.Vector2 point, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					global::Windows.Foundation.Rect rectangle, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					float x, 
					float y, 
					float w, 
					float h, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					global::System.Numerics.Vector2 point, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					global::Windows.Foundation.Rect rectangle, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					float x, 
					float y, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawText(
					string text, 
					float x, 
					float y, 
					float w, 
					float h, 
					global::Windows.UI.Color color, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat format);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color, 
					float strokeWidth);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void DrawGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush);

		void FillGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					global::Windows.UI.Color color);

		void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::System.Numerics.Vector2 offset, 
					global::Windows.UI.Color color);

		void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					float x, 
					float y, 
					global::Windows.UI.Color color);

		void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawCachedGeometry(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry geometry, 
					global::Windows.UI.Color color);

		void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					global::System.Numerics.Vector2 point, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					float x, 
					float y, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					global::System.Numerics.Vector2 point, 
					global::Windows.UI.Color color);

		void DrawTextLayout(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout, 
					float x, 
					float y, 
					global::Windows.UI.Color color);

		void DrawInk(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Input.Inking.InkStroke> inkStrokes);

		void DrawInk(
					global::System.Collections.Generic.IEnumerable<global::Windows.UI.Input.Inking.InkStroke> inkStrokes, 
					bool highContrast);

		void DrawGradientMesh(global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh gradientMesh);

		void DrawGradientMesh(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh gradientMesh, 
					global::System.Numerics.Vector2 point);

		void DrawGradientMesh(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh gradientMesh, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Antialiasing")]
		global::Microsoft.Graphics.Canvas.CanvasAntialiasing get_Antialiasing();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Antialiasing")]
		void put_Antialiasing(global::Microsoft.Graphics.Canvas.CanvasAntialiasing value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Blend")]
		global::Microsoft.Graphics.Canvas.CanvasBlend get_Blend();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Blend")]
		void put_Blend(global::Microsoft.Graphics.Canvas.CanvasBlend value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TextAntialiasing")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing get_TextAntialiasing();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TextAntialiasing")]
		void put_TextAntialiasing(global::Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TextRenderingParameters")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters get_TextRenderingParameters();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TextRenderingParameters")]
		void put_TextRenderingParameters(global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		global::System.Numerics.Matrix3x2 get_Transform();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		void put_Transform(global::System.Numerics.Matrix3x2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Units")]
		global::Microsoft.Graphics.Canvas.CanvasUnits get_Units();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Units")]
		void put_Units(global::Microsoft.Graphics.Canvas.CanvasUnits value);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(float opacity);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Windows.Foundation.Rect clipRectangle);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Windows.Foundation.Rect clipRectangle);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry, 
					global::System.Numerics.Matrix3x2 geometryTransform);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry, 
					global::System.Numerics.Matrix3x2 geometryTransform);

		global::Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(
					float opacity, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush opacityBrush, 
					global::Windows.Foundation.Rect clipRectangle, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry clipGeometry, 
					global::System.Numerics.Matrix3x2 geometryTransform, 
					global::Microsoft.Graphics.Canvas.CanvasLayerOptions options);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasImage : global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession);

		global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasBitmapStatics
	{
		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromBytes(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromBytes(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					float dpi);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromBytes(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					byte[] bytes, 
					int widthInPixels, 
					int heightInPixels, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromColors(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromColors(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels, 
					float dpi);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromColors(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color[] colors, 
					int widthInPixels, 
					int heightInPixels, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);

		global::Microsoft.Graphics.Canvas.CanvasBitmap CreateFromSoftwareBitmap(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.Imaging.SoftwareBitmap sourceBitmap);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName, 
					float dpi);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string fileName, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri, 
					float dpi);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Uri uri, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					float dpi);

		global::Windows.Foundation.IAsyncOperation<global::Microsoft.Graphics.Canvas.CanvasBitmap> LoadAsync(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasBitmap : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable, global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Bounds")]
		global::Windows.Foundation.Rect get_Bounds();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		float get_Dpi();

		float ConvertPixelsToDips(int pixels);

		int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Format")]
		global::Windows.Graphics.DirectX.DirectXPixelFormat get_Format();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();

		global::Windows.Foundation.IAsyncAction SaveAsync(string fileName);

		global::Windows.Foundation.IAsyncAction SaveAsync(
					string fileName, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat);

		global::Windows.Foundation.IAsyncAction SaveAsync(
					string fileName, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat, 
					float quality);

		global::Windows.Foundation.IAsyncAction SaveAsync(
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat);

		global::Windows.Foundation.IAsyncAction SaveAsync(
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					global::Microsoft.Graphics.Canvas.CanvasBitmapFileFormat fileFormat, 
					float quality);

		byte[] GetPixelBytes();

		byte[] GetPixelBytes(
					int left, 
					int top, 
					int width, 
					int height);

		global::Windows.UI.Color[] GetPixelColors();

		global::Windows.UI.Color[] GetPixelColors(
					int left, 
					int top, 
					int width, 
					int height);

		void SetPixelBytes(byte[] valueElements);

		void SetPixelBytes(
					byte[] valueElements, 
					int left, 
					int top, 
					int width, 
					int height);

		void SetPixelColors(global::Windows.UI.Color[] valueElements);

		void SetPixelColors(
					global::Windows.UI.Color[] valueElements, 
					int left, 
					int top, 
					int width, 
					int height);

		void CopyPixelsFromBitmap(global::Microsoft.Graphics.Canvas.CanvasBitmap otherBitmap);

		void CopyPixelsFromBitmap(
					global::Microsoft.Graphics.Canvas.CanvasBitmap otherBitmap, 
					int destX, 
					int destY);

		void CopyPixelsFromBitmap(
					global::Microsoft.Graphics.Canvas.CanvasBitmap otherBitmap, 
					int destX, 
					int destY, 
					int sourceRectLeft, 
					int sourceRectTop, 
					int sourceRectWidth, 
					int sourceRectHeight);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasActiveLayer : global::System.IDisposable
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRenderTargetFactory
	{
		global::System.IntPtr CreateWithSize(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size);

		global::System.IntPtr CreateWithWidthAndHeight(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height);

		global::System.IntPtr CreateWithWidthAndHeightAndDpi(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi);

		global::System.IntPtr CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRenderTargetStatics
	{
		global::Microsoft.Graphics.Canvas.CanvasRenderTarget CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface);

		global::Microsoft.Graphics.Canvas.CanvasRenderTarget CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi);

		global::Microsoft.Graphics.Canvas.CanvasRenderTarget CreateFromDirect3D11Surface(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alpha);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRenderTarget
	{
		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasSwapChainFactory
	{
		global::System.IntPtr CreateWithSize(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size);

		global::System.IntPtr CreateWithWidthAndHeight(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height);

		global::System.IntPtr CreateWithWidthAndHeightAndDpi(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi);

		global::System.IntPtr CreateWithAllOptions(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					int bufferCount, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasSwapChainStatics
	{
		global::Microsoft.Graphics.Canvas.CanvasSwapChain CreateForCoreWindow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Core.CoreWindow coreWindow, 
					float dpi);

		global::Microsoft.Graphics.Canvas.CanvasSwapChain CreateForCoreWindow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Core.CoreWindow coreWindow, 
					float width, 
					float height, 
					float dpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat format, 
					int bufferCount);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasSwapChain : global::System.IDisposable
	{
		void Present();

		void Present(int syncInterval);

		void ResizeBuffers(global::Windows.Foundation.Size newSize);

		void ResizeBuffers(
					float newWidth, 
					float newHeight);

		void ResizeBuffers(
					float newWidth, 
					float newHeight, 
					float newDpi);

		void ResizeBuffers(
					float newWidth, 
					float newHeight, 
					float newDpi, 
					global::Windows.Graphics.DirectX.DirectXPixelFormat newFormat, 
					int bufferCount);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		float get_Dpi();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Format")]
		global::Windows.Graphics.DirectX.DirectXPixelFormat get_Format();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BufferCount")]
		int get_BufferCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Rotation")]
		global::Microsoft.Graphics.Canvas.CanvasSwapChainRotation get_Rotation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Rotation")]
		void put_Rotation(global::Microsoft.Graphics.Canvas.CanvasSwapChainRotation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceSize")]
		global::Windows.Foundation.Size get_SourceSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceSize")]
		void put_SourceSize(global::Windows.Foundation.Size value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformMatrix")]
		global::System.Numerics.Matrix3x2 get_TransformMatrix();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformMatrix")]
		void put_TransformMatrix(global::System.Numerics.Matrix3x2 value);

		float ConvertPixelsToDips(int pixels);

		int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding);

		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(global::Windows.UI.Color clearColor);

		void WaitForVerticalBlank();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasCommandListFactory
	{
		global::System.IntPtr Create(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasCommandList : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasDebugLevel
	{
		None = 0,
		Error = 1,
		Warning = 2,
		Information = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasDpiRounding
	{
		Floor = 0,
		Round = 1,
		Ceiling = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasAlphaMode
	{
		Premultiplied = 0,
		Straight = 1,
		Ignore = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasBitmapFileFormat
	{
		Auto = 0,
		Bmp = 1,
		Png = 2,
		Jpeg = 3,
		Tiff = 4,
		Gif = 5,
		JpegXR = 6,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasImageInterpolation
	{
		NearestNeighbor = 0,
		Linear = 1,
		Cubic = 2,
		MultiSampleLinear = 3,
		Anisotropic = 4,
		HighQualityCubic = 5,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasComposite
	{
		SourceOver = 0,
		DestinationOver = 1,
		SourceIn = 2,
		DestinationIn = 3,
		SourceOut = 4,
		DestinationOut = 5,
		SourceAtop = 6,
		DestinationAtop = 7,
		Xor = 8,
		Add = 9,
		Copy = 10,
		BoundedCopy = 11,
		MaskInvert = 12,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasAntialiasing
	{
		Antialiased = 0,
		Aliased = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasBlend
	{
		SourceOver = 0,
		Copy = 1,
		Min = 2,
		Add = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasUnits
	{
		Dips = 0,
		Pixels = 1,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasLayerOptions : uint
	{
		None = 0x0u,
		InitializeFromBackground = 0x1u,
		IgnoreAlpha = 0x2u,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasEdgeBehavior
	{
		Clamp = 0,
		Wrap = 1,
		Mirror = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasColorSpace
	{
		Custom = 0,
		Srgb = 1,
		ScRgb = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasBufferPrecision
	{
		Precision8UIntNormalized = 0,
		Precision8UIntNormalizedSrgb = 1,
		Precision16UIntNormalized = 2,
		Precision16Float = 3,
		Precision32Float = 4,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasSwapChainRotation
	{
		None = 0,
		Rotate90 = 1,
		Rotate180 = 2,
		Rotate270 = 3,
	}
}

namespace Microsoft.Graphics.Canvas.Brushes
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasSolidColorBrush : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush, global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasSolidColorBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color color)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasSolidColorBrushFactory_Create(
								"Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush", 
								resourceCreator, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasSolidColorBrushFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color color)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory).TypeHandle
												), 
								resourceCreator, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		public global::Windows.UI.Color get_Color()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush__Impl.Stubs.get_Color(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		public void put_Color(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush__Impl.Stubs.put_Color(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		public float get_Opacity()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Opacity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		public void put_Opacity(float value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Opacity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		public global::System.Numerics.Matrix3x2 get_Transform()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Transform(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		public void put_Transform(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Transform(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasSolidColorBrush(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasImageBrush : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush, global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasImageBrush(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasImageBrushFactory_Create(
								"Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush", 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasImageBrushFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory).TypeHandle
												), 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasImageBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.ICanvasImage image)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasImageBrushFactory_CreateWithImage(
								"Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush", 
								resourceCreator, 
								image
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasImageBrushFactory_CreateWithImage(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.ICanvasImage image)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory__Impl.Stubs.CreateWithImage(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory).TypeHandle
												), 
								resourceCreator, 
								image
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Image")]
		public global::Microsoft.Graphics.Canvas.ICanvasImage get_Image()
		{
			global::Microsoft.Graphics.Canvas.ICanvasImage __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.get_Image(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Image")]
		public void put_Image(global::Microsoft.Graphics.Canvas.ICanvasImage value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.put_Image(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendX")]
		public global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendX()
		{
			global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.get_ExtendX(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendX")]
		public void put_ExtendX(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.put_ExtendX(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendY")]
		public global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendY()
		{
			global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.get_ExtendY(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendY")]
		public void put_ExtendY(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.put_ExtendY(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		public global::System.Nullable<global::Windows.Foundation.Rect> get_SourceRectangle()
		{
			global::System.Nullable<global::Windows.Foundation.Rect> __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.get_SourceRectangle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		public void put_SourceRectangle(global::System.Nullable<global::Windows.Foundation.Rect> value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.put_SourceRectangle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Interpolation")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Interpolation()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.get_Interpolation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Interpolation")]
		public void put_Interpolation(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush__Impl.Stubs.put_Interpolation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		public float get_Opacity()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Opacity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		public void put_Opacity(float value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Opacity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		public global::System.Numerics.Matrix3x2 get_Transform()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Transform(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		public void put_Transform(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Transform(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasImageBrush(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasLinearGradientBrush : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush, global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasLinearGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color startColor, 
					global::Windows.UI.Color endColor)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateSimple(
								"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush", 
								resourceCreator, 
								startColor, 
								endColor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateSimple(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color startColor, 
					global::Windows.UI.Color endColor)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory__Impl.Stubs.CreateSimple(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								startColor, 
								endColor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasLinearGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateWithStops(
								"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush", 
								resourceCreator, 
								gradientStops
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateWithStops(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory__Impl.Stubs.CreateWithStops(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								gradientStops
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasLinearGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(
								"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush", 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory__Impl.Stubs.CreateWithEdgeBehaviorAndAlphaMode(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasLinearGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(
								"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush", 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode, 
								preInterpolationSpace, 
								postInterpolationSpace, 
								bufferPrecision
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory__Impl.Stubs.CreateWithEdgeBehaviorAndInterpolationOptions(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode, 
								preInterpolationSpace, 
								postInterpolationSpace, 
								bufferPrecision
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StartPoint")]
		public global::System.Numerics.Vector2 get_StartPoint()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_StartPoint(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "StartPoint")]
		public void put_StartPoint(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.put_StartPoint(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EndPoint")]
		public global::System.Numerics.Vector2 get_EndPoint()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_EndPoint(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "EndPoint")]
		public void put_EndPoint(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.put_EndPoint(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Stops")]
		public global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] get_Stops()
		{
			global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_Stops(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EdgeBehavior")]
		public global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_EdgeBehavior()
		{
			global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_EdgeBehavior(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreInterpolationSpace")]
		public global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PreInterpolationSpace()
		{
			global::Microsoft.Graphics.Canvas.CanvasColorSpace __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_PreInterpolationSpace(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PostInterpolationSpace")]
		public global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PostInterpolationSpace()
		{
			global::Microsoft.Graphics.Canvas.CanvasColorSpace __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_PostInterpolationSpace(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BufferPrecision")]
		public global::Microsoft.Graphics.Canvas.CanvasBufferPrecision get_BufferPrecision()
		{
			global::Microsoft.Graphics.Canvas.CanvasBufferPrecision __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_BufferPrecision(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		public float get_Opacity()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Opacity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		public void put_Opacity(float value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Opacity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		public global::System.Numerics.Matrix3x2 get_Transform()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Transform(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		public void put_Transform(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Transform(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateRainbow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float eldritchness)
		{
			global::Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushStatics_CreateRainbow(
								"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush", 
								resourceCreator, 
								eldritchness
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasLinearGradientBrushStatics_CreateRainbow(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float eldritchness)
		{
			global::Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics__Impl.Stubs.CreateRainbow(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics).TypeHandle
												), 
								resourceCreator, 
								eldritchness
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasLinearGradientBrush(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasRadialGradientBrush : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush, global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRadialGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color startColor, 
					global::Windows.UI.Color endColor)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateSimple(
								"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush", 
								resourceCreator, 
								startColor, 
								endColor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateSimple(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color startColor, 
					global::Windows.UI.Color endColor)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory__Impl.Stubs.CreateSimple(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								startColor, 
								endColor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRadialGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateWithStops(
								"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush", 
								resourceCreator, 
								gradientStops
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateWithStops(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory__Impl.Stubs.CreateWithStops(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								gradientStops
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRadialGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(
								"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush", 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory__Impl.Stubs.CreateWithEdgeBehaviorAndAlphaMode(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRadialGradientBrush(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(
								"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush", 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode, 
								preInterpolationSpace, 
								postInterpolationSpace, 
								bufferPrecision
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory__Impl.Stubs.CreateWithEdgeBehaviorAndInterpolationOptions(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory).TypeHandle
												), 
								resourceCreator, 
								gradientStops, 
								edgeBehavior, 
								alphaMode, 
								preInterpolationSpace, 
								postInterpolationSpace, 
								bufferPrecision
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Center")]
		public global::System.Numerics.Vector2 get_Center()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_Center(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Center")]
		public void put_Center(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.put_Center(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OriginOffset")]
		public global::System.Numerics.Vector2 get_OriginOffset()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_OriginOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OriginOffset")]
		public void put_OriginOffset(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.put_OriginOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RadiusX")]
		public float get_RadiusX()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_RadiusX(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RadiusX")]
		public void put_RadiusX(float value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.put_RadiusX(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RadiusY")]
		public float get_RadiusY()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_RadiusY(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RadiusY")]
		public void put_RadiusY(float value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.put_RadiusY(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Stops")]
		public global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] get_Stops()
		{
			global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_Stops(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EdgeBehavior")]
		public global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_EdgeBehavior()
		{
			global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_EdgeBehavior(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreInterpolationSpace")]
		public global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PreInterpolationSpace()
		{
			global::Microsoft.Graphics.Canvas.CanvasColorSpace __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_PreInterpolationSpace(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PostInterpolationSpace")]
		public global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PostInterpolationSpace()
		{
			global::Microsoft.Graphics.Canvas.CanvasColorSpace __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_PostInterpolationSpace(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BufferPrecision")]
		public global::Microsoft.Graphics.Canvas.CanvasBufferPrecision get_BufferPrecision()
		{
			global::Microsoft.Graphics.Canvas.CanvasBufferPrecision __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_BufferPrecision(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		public float get_Opacity()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Opacity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		public void put_Opacity(float value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Opacity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		public global::System.Numerics.Matrix3x2 get_Transform()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Transform(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		public void put_Transform(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.put_Transform(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateRainbow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float eldritchness)
		{
			global::Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushStatics_CreateRainbow(
								"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush", 
								resourceCreator, 
								eldritchness
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush __Factory_Microsoft_Graphics_Canvas_Brushes__ICanvasRadialGradientBrushStatics_CreateRainbow(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float eldritchness)
		{
			global::Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics__Impl.Stubs.CreateRainbow(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics).TypeHandle
												), 
								resourceCreator, 
								eldritchness
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasRadialGradientBrush(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasBrush : global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		float get_Opacity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		void put_Opacity(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Transform")]
		global::System.Numerics.Matrix3x2 get_Transform();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Transform")]
		void put_Transform(global::System.Numerics.Matrix3x2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasSolidColorBrushFactory
	{
		global::System.IntPtr Create(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color color);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasSolidColorBrush : global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		global::Windows.UI.Color get_Color();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		void put_Color(global::Windows.UI.Color value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasImageBrushFactory
	{
		global::System.IntPtr Create(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator);

		global::System.IntPtr CreateWithImage(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.ICanvasImage image);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasImageBrush : global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Image")]
		global::Microsoft.Graphics.Canvas.ICanvasImage get_Image();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Image")]
		void put_Image(global::Microsoft.Graphics.Canvas.ICanvasImage value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendX")]
		global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendX();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendX")]
		void put_ExtendX(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendY")]
		global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendY();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendY")]
		void put_ExtendY(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		global::System.Nullable<global::Windows.Foundation.Rect> get_SourceRectangle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		void put_SourceRectangle(global::System.Nullable<global::Windows.Foundation.Rect> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Interpolation")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Interpolation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Interpolation")]
		void put_Interpolation(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasLinearGradientBrushFactory
	{
		global::System.IntPtr CreateSimple(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color startColor, 
					global::Windows.UI.Color endColor);

		global::System.IntPtr CreateWithStops(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops);

		global::System.IntPtr CreateWithEdgeBehaviorAndAlphaMode(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode);

		global::System.IntPtr CreateWithEdgeBehaviorAndInterpolationOptions(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasLinearGradientBrushStatics
	{
		global::Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateRainbow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float eldritchness);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasLinearGradientBrush : global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StartPoint")]
		global::System.Numerics.Vector2 get_StartPoint();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "StartPoint")]
		void put_StartPoint(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EndPoint")]
		global::System.Numerics.Vector2 get_EndPoint();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "EndPoint")]
		void put_EndPoint(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Stops")]
		global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] get_Stops();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EdgeBehavior")]
		global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_EdgeBehavior();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreInterpolationSpace")]
		global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PreInterpolationSpace();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PostInterpolationSpace")]
		global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PostInterpolationSpace();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BufferPrecision")]
		global::Microsoft.Graphics.Canvas.CanvasBufferPrecision get_BufferPrecision();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRadialGradientBrushFactory
	{
		global::System.IntPtr CreateSimple(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.UI.Color startColor, 
					global::Windows.UI.Color endColor);

		global::System.IntPtr CreateWithStops(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops);

		global::System.IntPtr CreateWithEdgeBehaviorAndAlphaMode(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode);

		global::System.IntPtr CreateWithEdgeBehaviorAndInterpolationOptions(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] gradientStops, 
					global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace, 
					global::Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRadialGradientBrushStatics
	{
		global::Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateRainbow(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float eldritchness);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRadialGradientBrush : global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Center")]
		global::System.Numerics.Vector2 get_Center();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Center")]
		void put_Center(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OriginOffset")]
		global::System.Numerics.Vector2 get_OriginOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OriginOffset")]
		void put_OriginOffset(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RadiusX")]
		float get_RadiusX();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RadiusX")]
		void put_RadiusX(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RadiusY")]
		float get_RadiusY();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RadiusY")]
		void put_RadiusY(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Stops")]
		global::Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] get_Stops();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EdgeBehavior")]
		global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_EdgeBehavior();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreInterpolationSpace")]
		global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PreInterpolationSpace();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PostInterpolationSpace")]
		global::Microsoft.Graphics.Canvas.CanvasColorSpace get_PostInterpolationSpace();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BufferPrecision")]
		global::Microsoft.Graphics.Canvas.CanvasBufferPrecision get_BufferPrecision();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasGradientStop
	{
		public float Position;
		public global::Windows.UI.Color Color;
	}
}

namespace Microsoft.Graphics.Canvas.Effects
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class PixelShaderEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PixelShaderEffect(byte[] shaderCode)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Effects__IPixelShaderEffectFactory_Create(
								"Microsoft.Graphics.Canvas.Effects.PixelShaderEffect", 
								shaderCode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Effects__IPixelShaderEffectFactory_Create(
					string typeName, 
					byte[] shaderCode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory).TypeHandle
												), 
								shaderCode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Properties")]
		public global::System.Collections.Generic.IDictionary<string, object> get_Properties()
		{
			global::System.Collections.Generic.IDictionary<string, object> __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Properties(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source1()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source1(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source2()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source2(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source3")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source3()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source3(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source4")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source4()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source4(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source5")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source5()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source5(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source6")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source6()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source6(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source7")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source7()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source7(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source8")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source8()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source8(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1")]
		public void put_Source1(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source1(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2")]
		public void put_Source2(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source2(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source3")]
		public void put_Source3(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source3(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source4")]
		public void put_Source4(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source4(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source5")]
		public void put_Source5(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source5(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source6")]
		public void put_Source6(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source6(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source7")]
		public void put_Source7(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source7(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source8")]
		public void put_Source8(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source8(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source1Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source1Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source2Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source2Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source3Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source3Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source3Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source4Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source4Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source4Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source5Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source5Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source5Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source6Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source6Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source6Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source7Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source7Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source7Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source8Mapping")]
		public global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source8Mapping()
		{
			global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_Source8Mapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1Mapping")]
		public void put_Source1Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source1Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2Mapping")]
		public void put_Source2Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source2Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source3Mapping")]
		public void put_Source3Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source3Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source4Mapping")]
		public void put_Source4Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source4Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source5Mapping")]
		public void put_Source5Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source5Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source6Mapping")]
		public void put_Source6Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source6Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source7Mapping")]
		public void put_Source7Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source7Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source8Mapping")]
		public void put_Source8Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_Source8Mapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaxSamplerOffset")]
		public int get_MaxSamplerOffset()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.get_MaxSamplerOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MaxSamplerOffset")]
		public void put_MaxSamplerOffset(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.put_MaxSamplerOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public bool IsSupported(global::Microsoft.Graphics.Canvas.CanvasDevice device)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect__Impl.Stubs.IsSupported(
								this, 
								device
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public PixelShaderEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ArithmeticCompositeEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ArithmeticCompositeEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MultiplyAmount")]
		public float get_MultiplyAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_MultiplyAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MultiplyAmount")]
		public void put_MultiplyAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_MultiplyAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1Amount")]
		public float get_Source1Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_Source1Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1Amount")]
		public void put_Source1Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_Source1Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2Amount")]
		public float get_Source2Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_Source2Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2Amount")]
		public void put_Source2Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_Source2Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Offset")]
		public float get_Offset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_Offset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Offset")]
		public void put_Offset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_Offset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source1()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_Source1(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1")]
		public void put_Source1(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_Source1(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source2()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.get_Source2(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2")]
		public void put_Source2(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect__Impl.Stubs.put_Source2(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ArithmeticCompositeEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class AtlasEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public AtlasEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.AtlasEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		public global::Windows.Foundation.Rect get_SourceRectangle()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect__Impl.Stubs.get_SourceRectangle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		public void put_SourceRectangle(global::Windows.Foundation.Rect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect__Impl.Stubs.put_SourceRectangle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PaddingRectangle")]
		public global::Windows.Foundation.Rect get_PaddingRectangle()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect__Impl.Stubs.get_PaddingRectangle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "PaddingRectangle")]
		public void put_PaddingRectangle(global::Windows.Foundation.Rect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect__Impl.Stubs.put_PaddingRectangle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IAtlasEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public AtlasEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IBlendEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class BlendEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IBlendEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public BlendEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.BlendEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		public global::Microsoft.Graphics.Canvas.Effects.BlendEffectMode get_Mode()
		{
			global::Microsoft.Graphics.Canvas.Effects.BlendEffectMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IBlendEffect__Impl.Stubs.get_Mode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		public void put_Mode(global::Microsoft.Graphics.Canvas.Effects.BlendEffectMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBlendEffect__Impl.Stubs.put_Mode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Background()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IBlendEffect__Impl.Stubs.get_Background(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		public void put_Background(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBlendEffect__Impl.Stubs.put_Background(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Foreground")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Foreground()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IBlendEffect__Impl.Stubs.get_Foreground(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Foreground")]
		public void put_Foreground(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBlendEffect__Impl.Stubs.put_Foreground(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public BlendEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IBorderEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class BorderEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IBorderEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public BorderEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.BorderEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendX")]
		public global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendX()
		{
			global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior __retVal = global::Microsoft.Graphics.Canvas.Effects.IBorderEffect__Impl.Stubs.get_ExtendX(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendX")]
		public void put_ExtendX(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBorderEffect__Impl.Stubs.put_ExtendX(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendY")]
		public global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendY()
		{
			global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior __retVal = global::Microsoft.Graphics.Canvas.Effects.IBorderEffect__Impl.Stubs.get_ExtendY(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendY")]
		public void put_ExtendY(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBorderEffect__Impl.Stubs.put_ExtendY(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IBorderEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBorderEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public BorderEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class BrightnessEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public BrightnessEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.BrightnessEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "WhitePoint")]
		public global::System.Numerics.Vector2 get_WhitePoint()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect__Impl.Stubs.get_WhitePoint(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "WhitePoint")]
		public void put_WhitePoint(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect__Impl.Stubs.put_WhitePoint(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlackPoint")]
		public global::System.Numerics.Vector2 get_BlackPoint()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect__Impl.Stubs.get_BlackPoint(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlackPoint")]
		public void put_BlackPoint(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect__Impl.Stubs.put_BlackPoint(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IBrightnessEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public BrightnessEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ChromaKeyEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ChromaKeyEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		public global::Windows.UI.Color get_Color()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.get_Color(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		public void put_Color(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.put_Color(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Tolerance")]
		public float get_Tolerance()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.get_Tolerance(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Tolerance")]
		public void put_Tolerance(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.put_Tolerance(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InvertAlpha")]
		public bool get_InvertAlpha()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.get_InvertAlpha(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InvertAlpha")]
		public void put_InvertAlpha(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.put_InvertAlpha(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Feather")]
		public bool get_Feather()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.get_Feather(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Feather")]
		public void put_Feather(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.put_Feather(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ChromaKeyEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ColorMatrixEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ColorMatrixEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ColorMatrix")]
		public global::Microsoft.Graphics.Canvas.Effects.Matrix5x4 get_ColorMatrix()
		{
			global::Microsoft.Graphics.Canvas.Effects.Matrix5x4 __retVal = global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.get_ColorMatrix(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ColorMatrix")]
		public void put_ColorMatrix(global::Microsoft.Graphics.Canvas.Effects.Matrix5x4 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.put_ColorMatrix(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaMode")]
		public void put_AlphaMode(global::Microsoft.Graphics.Canvas.CanvasAlphaMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.put_AlphaMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ColorMatrixEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IColorSourceEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ColorSourceEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IColorSourceEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ColorSourceEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ColorSourceEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		public global::Windows.UI.Color get_Color()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IColorSourceEffect__Impl.Stubs.get_Color(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		public void put_Color(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IColorSourceEffect__Impl.Stubs.put_Color(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ColorSourceEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ICompositeEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CompositeEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ICompositeEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CompositeEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.CompositeEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		public global::Microsoft.Graphics.Canvas.CanvasComposite get_Mode()
		{
			global::Microsoft.Graphics.Canvas.CanvasComposite __retVal = global::Microsoft.Graphics.Canvas.Effects.ICompositeEffect__Impl.Stubs.get_Mode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		public void put_Mode(global::Microsoft.Graphics.Canvas.CanvasComposite value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ICompositeEffect__Impl.Stubs.put_Mode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Sources")]
		public global::System.Collections.Generic.IList<global::Windows.Graphics.Effects.IGraphicsEffectSource> get_Sources()
		{
			global::System.Collections.Generic.IList<global::Windows.Graphics.Effects.IGraphicsEffectSource> __retVal = global::Microsoft.Graphics.Canvas.Effects.ICompositeEffect__Impl.Stubs.get_Sources(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CompositeEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IContrastEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ContrastEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IContrastEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ContrastEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ContrastEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Contrast")]
		public float get_Contrast()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IContrastEffect__Impl.Stubs.get_Contrast(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Contrast")]
		public void put_Contrast(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IContrastEffect__Impl.Stubs.put_Contrast(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampSource")]
		public bool get_ClampSource()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IContrastEffect__Impl.Stubs.get_ClampSource(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampSource")]
		public void put_ClampSource(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IContrastEffect__Impl.Stubs.put_ClampSource(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IContrastEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IContrastEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ContrastEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ConvolveMatrixEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ConvolveMatrixEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelScale")]
		public global::System.Numerics.Vector2 get_KernelScale()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_KernelScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelScale")]
		public void put_KernelScale(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_KernelScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_InterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		public void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_InterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelWidth")]
		public int get_KernelWidth()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_KernelWidth(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelWidth")]
		public void put_KernelWidth(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_KernelWidth(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelHeight")]
		public int get_KernelHeight()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_KernelHeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelHeight")]
		public void put_KernelHeight(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_KernelHeight(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelMatrix")]
		public float[] get_KernelMatrix()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_KernelMatrix(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelMatrix")]
		public void put_KernelMatrix(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_KernelMatrix(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Divisor")]
		public float get_Divisor()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_Divisor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Divisor")]
		public void put_Divisor(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_Divisor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Offset")]
		public float get_Offset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_Offset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Offset")]
		public void put_Offset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_Offset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelOffset")]
		public global::System.Numerics.Vector2 get_KernelOffset()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_KernelOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelOffset")]
		public void put_KernelOffset(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_KernelOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreserveAlpha")]
		public bool get_PreserveAlpha()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_PreserveAlpha(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "PreserveAlpha")]
		public void put_PreserveAlpha(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_PreserveAlpha(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ConvolveMatrixEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ICropEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CropEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ICropEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CropEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.CropEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		public global::Windows.Foundation.Rect get_SourceRectangle()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Effects.ICropEffect__Impl.Stubs.get_SourceRectangle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		public void put_SourceRectangle(global::Windows.Foundation.Rect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ICropEffect__Impl.Stubs.put_SourceRectangle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.ICropEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ICropEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ICropEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ICropEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CropEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class DirectionalBlurEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DirectionalBlurEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		public float get_BlurAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.get_BlurAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		public void put_BlurAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.put_BlurAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		public float get_Angle()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.get_Angle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		public void put_Angle(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.put_Angle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Optimization")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectOptimization __retVal = global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.get_Optimization(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Optimization")]
		public void put_Optimization(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.put_Optimization(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DirectionalBlurEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class DiscreteTransferEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DiscreteTransferEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedTable")]
		public float[] get_RedTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_RedTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedTable")]
		public void put_RedTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_RedTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		public bool get_RedDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_RedDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		public void put_RedDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_RedDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenTable")]
		public float[] get_GreenTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_GreenTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenTable")]
		public void put_GreenTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_GreenTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		public bool get_GreenDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_GreenDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		public void put_GreenDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_GreenDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueTable")]
		public float[] get_BlueTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_BlueTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueTable")]
		public void put_BlueTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_BlueTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		public bool get_BlueDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_BlueDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		public void put_BlueDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_BlueDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaTable")]
		public float[] get_AlphaTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_AlphaTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaTable")]
		public void put_AlphaTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_AlphaTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		public bool get_AlphaDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_AlphaDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		public void put_AlphaDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_AlphaDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DiscreteTransferEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class DisplacementMapEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DisplacementMapEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		public float get_Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.get_Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		public void put_Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.put_Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "XChannelSelect")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect get_XChannelSelect()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect __retVal = global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.get_XChannelSelect(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "XChannelSelect")]
		public void put_XChannelSelect(global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.put_XChannelSelect(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "YChannelSelect")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect get_YChannelSelect()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect __retVal = global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.get_YChannelSelect(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "YChannelSelect")]
		public void put_YChannelSelect(global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.put_YChannelSelect(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Displacement")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Displacement()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.get_Displacement(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Displacement")]
		public void put_Displacement(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect__Impl.Stubs.put_Displacement(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DisplacementMapEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class DistantDiffuseEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DistantDiffuseEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Azimuth")]
		public float get_Azimuth()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_Azimuth(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Azimuth")]
		public void put_Azimuth(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_Azimuth(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Elevation")]
		public float get_Elevation()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_Elevation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Elevation")]
		public void put_Elevation(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_Elevation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DiffuseAmount")]
		public float get_DiffuseAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_DiffuseAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DiffuseAmount")]
		public void put_DiffuseAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_DiffuseAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		public float get_HeightMapScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_HeightMapScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		public void put_HeightMapScale(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_HeightMapScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		public global::Windows.UI.Color get_LightColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_LightColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		public void put_LightColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_LightColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		public global::System.Numerics.Vector2 get_HeightMapKernelSize()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_HeightMapKernelSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		public void put_HeightMapKernelSize(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_HeightMapKernelSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_HeightMapInterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		public void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_HeightMapInterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DistantDiffuseEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class DistantSpecularEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DistantSpecularEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Azimuth")]
		public float get_Azimuth()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_Azimuth(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Azimuth")]
		public void put_Azimuth(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_Azimuth(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Elevation")]
		public float get_Elevation()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_Elevation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Elevation")]
		public void put_Elevation(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_Elevation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularExponent")]
		public float get_SpecularExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_SpecularExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularExponent")]
		public void put_SpecularExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_SpecularExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularAmount")]
		public float get_SpecularAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_SpecularAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularAmount")]
		public void put_SpecularAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_SpecularAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		public float get_HeightMapScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_HeightMapScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		public void put_HeightMapScale(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_HeightMapScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		public global::Windows.UI.Color get_LightColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_LightColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		public void put_LightColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_LightColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		public global::System.Numerics.Vector2 get_HeightMapKernelSize()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_HeightMapKernelSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		public void put_HeightMapKernelSize(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_HeightMapKernelSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_HeightMapInterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		public void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_HeightMapInterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DistantSpecularEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class DpiCompensationEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DpiCompensationEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.get_InterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		public void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.put_InterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceDpi")]
		public global::System.Numerics.Vector2 get_SourceDpi()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.get_SourceDpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceDpi")]
		public void put_SourceDpi(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.put_SourceDpi(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DpiCompensationEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class EdgeDetectionEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public EdgeDetectionEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		public float get_Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.get_Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		public void put_Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.put_Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		public float get_BlurAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.get_BlurAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		public void put_BlurAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.put_BlurAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		public global::Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode get_Mode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.get_Mode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		public void put_Mode(global::Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.put_Mode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OverlayEdges")]
		public bool get_OverlayEdges()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.get_OverlayEdges(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OverlayEdges")]
		public void put_OverlayEdges(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.put_OverlayEdges(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaMode")]
		public void put_AlphaMode(global::Microsoft.Graphics.Canvas.CanvasAlphaMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.put_AlphaMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public EdgeDetectionEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class EmbossEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public EmbossEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.EmbossEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		public float get_Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect__Impl.Stubs.get_Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		public void put_Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect__Impl.Stubs.put_Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		public float get_Angle()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect__Impl.Stubs.get_Angle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		public void put_Angle(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect__Impl.Stubs.put_Angle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IEmbossEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public EmbossEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IExposureEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ExposureEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IExposureEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ExposureEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ExposureEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Exposure")]
		public float get_Exposure()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IExposureEffect__Impl.Stubs.get_Exposure(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Exposure")]
		public void put_Exposure(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IExposureEffect__Impl.Stubs.put_Exposure(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IExposureEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IExposureEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ExposureEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class GammaTransferEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public GammaTransferEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.GammaTransferEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedAmplitude")]
		public float get_RedAmplitude()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_RedAmplitude(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedAmplitude")]
		public void put_RedAmplitude(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_RedAmplitude(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedExponent")]
		public float get_RedExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_RedExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedExponent")]
		public void put_RedExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_RedExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedOffset")]
		public float get_RedOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_RedOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedOffset")]
		public void put_RedOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_RedOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		public bool get_RedDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_RedDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		public void put_RedDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_RedDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenAmplitude")]
		public float get_GreenAmplitude()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_GreenAmplitude(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenAmplitude")]
		public void put_GreenAmplitude(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_GreenAmplitude(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenExponent")]
		public float get_GreenExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_GreenExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenExponent")]
		public void put_GreenExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_GreenExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenOffset")]
		public float get_GreenOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_GreenOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenOffset")]
		public void put_GreenOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_GreenOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		public bool get_GreenDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_GreenDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		public void put_GreenDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_GreenDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueAmplitude")]
		public float get_BlueAmplitude()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_BlueAmplitude(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueAmplitude")]
		public void put_BlueAmplitude(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_BlueAmplitude(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueExponent")]
		public float get_BlueExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_BlueExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueExponent")]
		public void put_BlueExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_BlueExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueOffset")]
		public float get_BlueOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_BlueOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueOffset")]
		public void put_BlueOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_BlueOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		public bool get_BlueDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_BlueDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		public void put_BlueDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_BlueDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaAmplitude")]
		public float get_AlphaAmplitude()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_AlphaAmplitude(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaAmplitude")]
		public void put_AlphaAmplitude(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_AlphaAmplitude(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaExponent")]
		public float get_AlphaExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_AlphaExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaExponent")]
		public void put_AlphaExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_AlphaExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaOffset")]
		public float get_AlphaOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_AlphaOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaOffset")]
		public void put_AlphaOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_AlphaOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		public bool get_AlphaDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_AlphaDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		public void put_AlphaDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_AlphaDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public GammaTransferEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class GaussianBlurEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public GaussianBlurEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		public float get_BlurAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.get_BlurAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		public void put_BlurAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.put_BlurAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Optimization")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectOptimization __retVal = global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.get_Optimization(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Optimization")]
		public void put_Optimization(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.put_Optimization(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public GaussianBlurEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class GrayscaleEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public GrayscaleEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.GrayscaleEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public GrayscaleEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class HighlightsAndShadowsEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public HighlightsAndShadowsEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Highlights")]
		public float get_Highlights()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.get_Highlights(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Highlights")]
		public void put_Highlights(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.put_Highlights(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Shadows")]
		public float get_Shadows()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.get_Shadows(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Shadows")]
		public void put_Shadows(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.put_Shadows(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Clarity")]
		public float get_Clarity()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.get_Clarity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Clarity")]
		public void put_Clarity(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.put_Clarity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaskBlurAmount")]
		public float get_MaskBlurAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.get_MaskBlurAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MaskBlurAmount")]
		public void put_MaskBlurAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.put_MaskBlurAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceIsLinearGamma")]
		public bool get_SourceIsLinearGamma()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.get_SourceIsLinearGamma(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceIsLinearGamma")]
		public void put_SourceIsLinearGamma(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.put_SourceIsLinearGamma(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public HighlightsAndShadowsEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IHueRotationEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class HueRotationEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IHueRotationEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public HueRotationEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.HueRotationEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		public float get_Angle()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IHueRotationEffect__Impl.Stubs.get_Angle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		public void put_Angle(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHueRotationEffect__Impl.Stubs.put_Angle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IHueRotationEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHueRotationEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public HueRotationEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class HueToRgbEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public HueToRgbEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.HueToRgbEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceColorSpace")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace get_SourceColorSpace()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace __retVal = global::Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect__Impl.Stubs.get_SourceColorSpace(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceColorSpace")]
		public void put_SourceColorSpace(global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect__Impl.Stubs.put_SourceColorSpace(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public HueToRgbEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IInvertEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class InvertEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IInvertEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public InvertEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.InvertEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IInvertEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IInvertEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public InvertEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class LinearTransferEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public LinearTransferEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.LinearTransferEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedOffset")]
		public float get_RedOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_RedOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedOffset")]
		public void put_RedOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_RedOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedSlope")]
		public float get_RedSlope()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_RedSlope(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedSlope")]
		public void put_RedSlope(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_RedSlope(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		public bool get_RedDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_RedDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		public void put_RedDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_RedDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenOffset")]
		public float get_GreenOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_GreenOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenOffset")]
		public void put_GreenOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_GreenOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenSlope")]
		public float get_GreenSlope()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_GreenSlope(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenSlope")]
		public void put_GreenSlope(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_GreenSlope(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		public bool get_GreenDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_GreenDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		public void put_GreenDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_GreenDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueOffset")]
		public float get_BlueOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_BlueOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueOffset")]
		public void put_BlueOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_BlueOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueSlope")]
		public float get_BlueSlope()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_BlueSlope(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueSlope")]
		public void put_BlueSlope(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_BlueSlope(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		public bool get_BlueDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_BlueDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		public void put_BlueDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_BlueDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaOffset")]
		public float get_AlphaOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_AlphaOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaOffset")]
		public void put_AlphaOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_AlphaOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaSlope")]
		public float get_AlphaSlope()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_AlphaSlope(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaSlope")]
		public void put_AlphaSlope(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_AlphaSlope(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		public bool get_AlphaDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_AlphaDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		public void put_AlphaDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_AlphaDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public LinearTransferEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class LuminanceToAlphaEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public LuminanceToAlphaEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public LuminanceToAlphaEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class MorphologyEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public MorphologyEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.MorphologyEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		public global::Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode get_Mode()
		{
			global::Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.get_Mode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		public void put_Mode(global::Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.put_Mode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Width")]
		public int get_Width()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.get_Width(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Width")]
		public void put_Width(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.put_Width(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Height")]
		public int get_Height()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.get_Height(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Height")]
		public void put_Height(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.put_Height(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IMorphologyEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public MorphologyEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class OpacityMetadataEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public OpacityMetadataEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OpaqueRectangle")]
		public global::Windows.Foundation.Rect get_OpaqueRectangle()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect__Impl.Stubs.get_OpaqueRectangle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OpaqueRectangle")]
		public void put_OpaqueRectangle(global::Windows.Foundation.Rect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect__Impl.Stubs.put_OpaqueRectangle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public OpacityMetadataEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class PointDiffuseEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PointDiffuseEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		public global::System.Numerics.Vector3 get_LightPosition()
		{
			global::System.Numerics.Vector3 __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_LightPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		public void put_LightPosition(global::System.Numerics.Vector3 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_LightPosition(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DiffuseAmount")]
		public float get_DiffuseAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_DiffuseAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DiffuseAmount")]
		public void put_DiffuseAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_DiffuseAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		public float get_HeightMapScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_HeightMapScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		public void put_HeightMapScale(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_HeightMapScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		public global::Windows.UI.Color get_LightColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_LightColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		public void put_LightColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_LightColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		public global::System.Numerics.Vector2 get_HeightMapKernelSize()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_HeightMapKernelSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		public void put_HeightMapKernelSize(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_HeightMapKernelSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_HeightMapInterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		public void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_HeightMapInterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public PointDiffuseEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class PointSpecularEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PointSpecularEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.PointSpecularEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		public global::System.Numerics.Vector3 get_LightPosition()
		{
			global::System.Numerics.Vector3 __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_LightPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		public void put_LightPosition(global::System.Numerics.Vector3 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_LightPosition(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularExponent")]
		public float get_SpecularExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_SpecularExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularExponent")]
		public void put_SpecularExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_SpecularExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularAmount")]
		public float get_SpecularAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_SpecularAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularAmount")]
		public void put_SpecularAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_SpecularAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		public float get_HeightMapScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_HeightMapScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		public void put_HeightMapScale(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_HeightMapScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		public global::Windows.UI.Color get_LightColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_LightColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		public void put_LightColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_LightColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		public global::System.Numerics.Vector2 get_HeightMapKernelSize()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_HeightMapKernelSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		public void put_HeightMapKernelSize(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_HeightMapKernelSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_HeightMapInterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		public void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_HeightMapInterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public PointSpecularEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class PosterizeEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PosterizeEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.PosterizeEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedValueCount")]
		public int get_RedValueCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.get_RedValueCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedValueCount")]
		public void put_RedValueCount(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.put_RedValueCount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenValueCount")]
		public int get_GreenValueCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.get_GreenValueCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenValueCount")]
		public void put_GreenValueCount(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.put_GreenValueCount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueValueCount")]
		public int get_BlueValueCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.get_BlueValueCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueValueCount")]
		public void put_BlueValueCount(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.put_BlueValueCount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPosterizeEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public PosterizeEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class PremultiplyEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PremultiplyEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.PremultiplyEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public PremultiplyEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class RgbToHueEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public RgbToHueEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.RgbToHueEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OutputColorSpace")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace get_OutputColorSpace()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace __retVal = global::Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect__Impl.Stubs.get_OutputColorSpace(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OutputColorSpace")]
		public void put_OutputColorSpace(global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect__Impl.Stubs.put_OutputColorSpace(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public RgbToHueEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ISaturationEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class SaturationEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ISaturationEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SaturationEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.SaturationEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Saturation")]
		public float get_Saturation()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISaturationEffect__Impl.Stubs.get_Saturation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Saturation")]
		public void put_Saturation(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISaturationEffect__Impl.Stubs.put_Saturation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ISaturationEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISaturationEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SaturationEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IScaleEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ScaleEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IScaleEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ScaleEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ScaleEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Scale")]
		public global::System.Numerics.Vector2 get_Scale()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.get_Scale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Scale")]
		public void put_Scale(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.put_Scale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CenterPoint")]
		public global::System.Numerics.Vector2 get_CenterPoint()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.get_CenterPoint(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CenterPoint")]
		public void put_CenterPoint(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.put_CenterPoint(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.get_InterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		public void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.put_InterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Sharpness")]
		public float get_Sharpness()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.get_Sharpness(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Sharpness")]
		public void put_Sharpness(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.put_Sharpness(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IScaleEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ScaleEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class SepiaEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SepiaEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.SepiaEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Intensity")]
		public float get_Intensity()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect__Impl.Stubs.get_Intensity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Intensity")]
		public void put_Intensity(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect__Impl.Stubs.put_Intensity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaMode")]
		public void put_AlphaMode(global::Microsoft.Graphics.Canvas.CanvasAlphaMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect__Impl.Stubs.put_AlphaMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISepiaEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SepiaEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IShadowEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class ShadowEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IShadowEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ShadowEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.ShadowEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		public float get_BlurAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.get_BlurAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		public void put_BlurAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.put_BlurAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ShadowColor")]
		public global::Windows.UI.Color get_ShadowColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.get_ShadowColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ShadowColor")]
		public void put_ShadowColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.put_ShadowColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Optimization")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectOptimization __retVal = global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.get_Optimization(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Optimization")]
		public void put_Optimization(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.put_Optimization(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IShadowEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ShadowEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class SharpenEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SharpenEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.SharpenEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		public float get_Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect__Impl.Stubs.get_Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		public void put_Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect__Impl.Stubs.put_Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Threshold")]
		public float get_Threshold()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect__Impl.Stubs.get_Threshold(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Threshold")]
		public void put_Threshold(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect__Impl.Stubs.put_Threshold(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISharpenEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SharpenEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class SpotDiffuseEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SpotDiffuseEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		public global::System.Numerics.Vector3 get_LightPosition()
		{
			global::System.Numerics.Vector3 __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_LightPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		public void put_LightPosition(global::System.Numerics.Vector3 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_LightPosition(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightTarget")]
		public global::System.Numerics.Vector3 get_LightTarget()
		{
			global::System.Numerics.Vector3 __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_LightTarget(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightTarget")]
		public void put_LightTarget(global::System.Numerics.Vector3 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_LightTarget(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Focus")]
		public float get_Focus()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_Focus(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Focus")]
		public void put_Focus(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_Focus(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LimitingConeAngle")]
		public float get_LimitingConeAngle()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_LimitingConeAngle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LimitingConeAngle")]
		public void put_LimitingConeAngle(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_LimitingConeAngle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DiffuseAmount")]
		public float get_DiffuseAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_DiffuseAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DiffuseAmount")]
		public void put_DiffuseAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_DiffuseAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		public float get_HeightMapScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_HeightMapScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		public void put_HeightMapScale(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_HeightMapScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		public global::Windows.UI.Color get_LightColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_LightColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		public void put_LightColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_LightColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		public global::System.Numerics.Vector2 get_HeightMapKernelSize()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_HeightMapKernelSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		public void put_HeightMapKernelSize(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_HeightMapKernelSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_HeightMapInterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		public void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_HeightMapInterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SpotDiffuseEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class SpotSpecularEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SpotSpecularEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		public global::System.Numerics.Vector3 get_LightPosition()
		{
			global::System.Numerics.Vector3 __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_LightPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		public void put_LightPosition(global::System.Numerics.Vector3 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_LightPosition(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightTarget")]
		public global::System.Numerics.Vector3 get_LightTarget()
		{
			global::System.Numerics.Vector3 __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_LightTarget(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightTarget")]
		public void put_LightTarget(global::System.Numerics.Vector3 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_LightTarget(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Focus")]
		public float get_Focus()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_Focus(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Focus")]
		public void put_Focus(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_Focus(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LimitingConeAngle")]
		public float get_LimitingConeAngle()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_LimitingConeAngle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LimitingConeAngle")]
		public void put_LimitingConeAngle(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_LimitingConeAngle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularExponent")]
		public float get_SpecularExponent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_SpecularExponent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularExponent")]
		public void put_SpecularExponent(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_SpecularExponent(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularAmount")]
		public float get_SpecularAmount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_SpecularAmount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularAmount")]
		public void put_SpecularAmount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_SpecularAmount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		public float get_HeightMapScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_HeightMapScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		public void put_HeightMapScale(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_HeightMapScale(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		public global::Windows.UI.Color get_LightColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_LightColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		public void put_LightColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_LightColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		public global::System.Numerics.Vector2 get_HeightMapKernelSize()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_HeightMapKernelSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		public void put_HeightMapKernelSize(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_HeightMapKernelSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_HeightMapInterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		public void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_HeightMapInterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SpotSpecularEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class StraightenEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public StraightenEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.StraightenEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		public float get_Angle()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.get_Angle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		public void put_Angle(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.put_Angle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaintainSize")]
		public bool get_MaintainSize()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.get_MaintainSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MaintainSize")]
		public void put_MaintainSize(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.put_MaintainSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.get_InterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		public void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.put_InterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IStraightenEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public StraightenEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class TableTransferEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TableTransferEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.TableTransferEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedTable")]
		public float[] get_RedTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_RedTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedTable")]
		public void put_RedTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_RedTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		public bool get_RedDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_RedDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		public void put_RedDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_RedDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenTable")]
		public float[] get_GreenTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_GreenTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenTable")]
		public void put_GreenTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_GreenTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		public bool get_GreenDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_GreenDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		public void put_GreenDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_GreenDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueTable")]
		public float[] get_BlueTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_BlueTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueTable")]
		public void put_BlueTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_BlueTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		public bool get_BlueDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_BlueDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		public void put_BlueDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_BlueDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaTable")]
		public float[] get_AlphaTable()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_AlphaTable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaTable")]
		public void put_AlphaTable(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_AlphaTable(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		public bool get_AlphaDisable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_AlphaDisable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		public void put_AlphaDisable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_AlphaDisable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		public bool get_ClampOutput()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_ClampOutput(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		public void put_ClampOutput(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_ClampOutput(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITableTransferEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TableTransferEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class TemperatureAndTintEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TemperatureAndTintEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Temperature")]
		public float get_Temperature()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect__Impl.Stubs.get_Temperature(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Temperature")]
		public void put_Temperature(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect__Impl.Stubs.put_Temperature(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Tint")]
		public float get_Tint()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect__Impl.Stubs.get_Tint(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Tint")]
		public void put_Tint(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect__Impl.Stubs.put_Tint(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TemperatureAndTintEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ITileEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class TileEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ITileEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TileEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.TileEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		public global::Windows.Foundation.Rect get_SourceRectangle()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Effects.ITileEffect__Impl.Stubs.get_SourceRectangle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		public void put_SourceRectangle(global::Windows.Foundation.Rect value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITileEffect__Impl.Stubs.put_SourceRectangle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ITileEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITileEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TileEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class Transform2DEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Transform2DEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.Transform2DEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.get_InterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		public void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.put_InterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformMatrix")]
		public global::System.Numerics.Matrix3x2 get_TransformMatrix()
		{
			global::System.Numerics.Matrix3x2 __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.get_TransformMatrix(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformMatrix")]
		public void put_TransformMatrix(global::System.Numerics.Matrix3x2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.put_TransformMatrix(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Sharpness")]
		public float get_Sharpness()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.get_Sharpness(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Sharpness")]
		public void put_Sharpness(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.put_Sharpness(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform2DEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Transform2DEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class Transform3DEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Transform3DEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.Transform3DEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		public global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasImageInterpolation __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.get_InterpolationMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		public void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.put_InterpolationMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		public global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
		{
			global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.get_BorderMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		public void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.put_BorderMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformMatrix")]
		public global::System.Numerics.Matrix4x4 get_TransformMatrix()
		{
			global::System.Numerics.Matrix4x4 __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.get_TransformMatrix(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformMatrix")]
		public void put_TransformMatrix(global::System.Numerics.Matrix4x4 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.put_TransformMatrix(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITransform3DEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Transform3DEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class TurbulenceEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TurbulenceEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.TurbulenceEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Offset")]
		public global::System.Numerics.Vector2 get_Offset()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Offset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Offset")]
		public void put_Offset(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Offset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::System.Numerics.Vector2 get_Size()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Size")]
		public void put_Size(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Size(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Frequency")]
		public global::System.Numerics.Vector2 get_Frequency()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Frequency(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Frequency")]
		public void put_Frequency(global::System.Numerics.Vector2 value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Frequency(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Octaves")]
		public int get_Octaves()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Octaves(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Octaves")]
		public void put_Octaves(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Octaves(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Seed")]
		public int get_Seed()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Seed(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Seed")]
		public void put_Seed(int value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Seed(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Noise")]
		public global::Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise get_Noise()
		{
			global::Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Noise(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Noise")]
		public void put_Noise(global::Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Noise(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Tileable")]
		public bool get_Tileable()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.get_Tileable(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Tileable")]
		public void put_Tileable(bool value)
		{
			global::Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect__Impl.Stubs.put_Tileable(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TurbulenceEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class UnPremultiplyEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public UnPremultiplyEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public UnPremultiplyEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasImage))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Graphics.Effects.IGraphicsEffect))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class VignetteEffect : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect, global::Microsoft.Graphics.Canvas.ICanvasImage, global::System.IDisposable, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::Windows.Graphics.Effects.IGraphicsEffect
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public VignetteEffect()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Effects.VignetteEffect");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		public global::Windows.UI.Color get_Color()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.get_Color(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		public void put_Color(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.put_Color(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		public float get_Amount()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.get_Amount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		public void put_Amount(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.put_Amount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Curve")]
		public float get_Curve()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.get_Curve(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Curve")]
		public void put_Curve(float value)
		{
			global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.put_Curve(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
		{
			global::Windows.Graphics.Effects.IGraphicsEffectSource __retVal = global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		public void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source)
		{
			global::Microsoft.Graphics.Canvas.Effects.IVignetteEffect__Impl.Stubs.put_Source(
								this, 
								source
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession, 
					global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.ICanvasImage__Impl.Stubs.GetBounds(
								this, 
								drawingSession, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public void put_Name(string name)
		{
			global::Windows.Graphics.Effects.IGraphicsEffect__Impl.Stubs.put_Name(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public VignetteEffect(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IPixelShaderEffectFactory
	{
		global::System.IntPtr Create(byte[] shaderCode);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IPixelShaderEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Properties")]
		global::System.Collections.Generic.IDictionary<string, object> get_Properties();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source1();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source2();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source3")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source3();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source4")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source4();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source5")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source5();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source6")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source6();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source7")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source7();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source8")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source8();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1")]
		void put_Source1(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2")]
		void put_Source2(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source3")]
		void put_Source3(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source4")]
		void put_Source4(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source5")]
		void put_Source5(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source6")]
		void put_Source6(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source7")]
		void put_Source7(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source8")]
		void put_Source8(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source1Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source2Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source3Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source3Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source4Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source4Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source5Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source5Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source6Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source6Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source7Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source7Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source8Mapping")]
		global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source8Mapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1Mapping")]
		void put_Source1Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2Mapping")]
		void put_Source2Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source3Mapping")]
		void put_Source3Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source4Mapping")]
		void put_Source4Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source5Mapping")]
		void put_Source5Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source6Mapping")]
		void put_Source6Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source7Mapping")]
		void put_Source7Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source8Mapping")]
		void put_Source8Mapping(global::Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaxSamplerOffset")]
		int get_MaxSamplerOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MaxSamplerOffset")]
		void put_MaxSamplerOffset(int value);

		bool IsSupported(global::Microsoft.Graphics.Canvas.CanvasDevice device);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IArithmeticCompositeEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MultiplyAmount")]
		float get_MultiplyAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MultiplyAmount")]
		void put_MultiplyAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1Amount")]
		float get_Source1Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1Amount")]
		void put_Source1Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2Amount")]
		float get_Source2Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2Amount")]
		void put_Source2Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Offset")]
		float get_Offset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Offset")]
		void put_Offset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source1")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source1();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source1")]
		void put_Source1(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source2")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source2();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source2")]
		void put_Source2(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IAtlasEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		global::Windows.Foundation.Rect get_SourceRectangle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		void put_SourceRectangle(global::Windows.Foundation.Rect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PaddingRectangle")]
		global::Windows.Foundation.Rect get_PaddingRectangle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "PaddingRectangle")]
		void put_PaddingRectangle(global::Windows.Foundation.Rect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IBlendEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		global::Microsoft.Graphics.Canvas.Effects.BlendEffectMode get_Mode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		void put_Mode(global::Microsoft.Graphics.Canvas.Effects.BlendEffectMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Background();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		void put_Background(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Foreground")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Foreground();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Foreground")]
		void put_Foreground(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IBorderEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendX")]
		global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendX();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendX")]
		void put_ExtendX(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ExtendY")]
		global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendY();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendY")]
		void put_ExtendY(global::Microsoft.Graphics.Canvas.CanvasEdgeBehavior value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IBrightnessEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "WhitePoint")]
		global::System.Numerics.Vector2 get_WhitePoint();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "WhitePoint")]
		void put_WhitePoint(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlackPoint")]
		global::System.Numerics.Vector2 get_BlackPoint();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlackPoint")]
		void put_BlackPoint(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IChromaKeyEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		global::Windows.UI.Color get_Color();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		void put_Color(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Tolerance")]
		float get_Tolerance();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Tolerance")]
		void put_Tolerance(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InvertAlpha")]
		bool get_InvertAlpha();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InvertAlpha")]
		void put_InvertAlpha(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Feather")]
		bool get_Feather();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Feather")]
		void put_Feather(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IColorMatrixEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ColorMatrix")]
		global::Microsoft.Graphics.Canvas.Effects.Matrix5x4 get_ColorMatrix();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ColorMatrix")]
		void put_ColorMatrix(global::Microsoft.Graphics.Canvas.Effects.Matrix5x4 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaMode")]
		void put_AlphaMode(global::Microsoft.Graphics.Canvas.CanvasAlphaMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IColorSourceEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		global::Windows.UI.Color get_Color();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		void put_Color(global::Windows.UI.Color value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICompositeEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		global::Microsoft.Graphics.Canvas.CanvasComposite get_Mode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		void put_Mode(global::Microsoft.Graphics.Canvas.CanvasComposite value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Sources")]
		global::System.Collections.Generic.IList<global::Windows.Graphics.Effects.IGraphicsEffectSource> get_Sources();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IContrastEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Contrast")]
		float get_Contrast();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Contrast")]
		void put_Contrast(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampSource")]
		bool get_ClampSource();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampSource")]
		void put_ClampSource(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IConvolveMatrixEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelScale")]
		global::System.Numerics.Vector2 get_KernelScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelScale")]
		void put_KernelScale(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelWidth")]
		int get_KernelWidth();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelWidth")]
		void put_KernelWidth(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelHeight")]
		int get_KernelHeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelHeight")]
		void put_KernelHeight(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelMatrix")]
		float[] get_KernelMatrix();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelMatrix")]
		void put_KernelMatrix(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Divisor")]
		float get_Divisor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Divisor")]
		void put_Divisor(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Offset")]
		float get_Offset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Offset")]
		void put_Offset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KernelOffset")]
		global::System.Numerics.Vector2 get_KernelOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "KernelOffset")]
		void put_KernelOffset(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreserveAlpha")]
		bool get_PreserveAlpha();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "PreserveAlpha")]
		void put_PreserveAlpha(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICropEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		global::Windows.Foundation.Rect get_SourceRectangle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		void put_SourceRectangle(global::Windows.Foundation.Rect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IDirectionalBlurEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		float get_BlurAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		void put_BlurAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		float get_Angle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		void put_Angle(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Optimization")]
		global::Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Optimization")]
		void put_Optimization(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IDiscreteTransferEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedTable")]
		float[] get_RedTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedTable")]
		void put_RedTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		bool get_RedDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		void put_RedDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenTable")]
		float[] get_GreenTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenTable")]
		void put_GreenTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		bool get_GreenDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		void put_GreenDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueTable")]
		float[] get_BlueTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueTable")]
		void put_BlueTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		bool get_BlueDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		void put_BlueDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaTable")]
		float[] get_AlphaTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaTable")]
		void put_AlphaTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		bool get_AlphaDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		void put_AlphaDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IDisplacementMapEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		float get_Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		void put_Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "XChannelSelect")]
		global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect get_XChannelSelect();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "XChannelSelect")]
		void put_XChannelSelect(global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "YChannelSelect")]
		global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect get_YChannelSelect();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "YChannelSelect")]
		void put_YChannelSelect(global::Microsoft.Graphics.Canvas.Effects.EffectChannelSelect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Displacement")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Displacement();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Displacement")]
		void put_Displacement(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IDistantDiffuseEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Azimuth")]
		float get_Azimuth();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Azimuth")]
		void put_Azimuth(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Elevation")]
		float get_Elevation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Elevation")]
		void put_Elevation(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DiffuseAmount")]
		float get_DiffuseAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DiffuseAmount")]
		void put_DiffuseAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		float get_HeightMapScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		void put_HeightMapScale(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		global::Windows.UI.Color get_LightColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		void put_LightColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		global::System.Numerics.Vector2 get_HeightMapKernelSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		void put_HeightMapKernelSize(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IDistantSpecularEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Azimuth")]
		float get_Azimuth();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Azimuth")]
		void put_Azimuth(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Elevation")]
		float get_Elevation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Elevation")]
		void put_Elevation(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularExponent")]
		float get_SpecularExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularExponent")]
		void put_SpecularExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularAmount")]
		float get_SpecularAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularAmount")]
		void put_SpecularAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		float get_HeightMapScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		void put_HeightMapScale(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		global::Windows.UI.Color get_LightColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		void put_LightColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		global::System.Numerics.Vector2 get_HeightMapKernelSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		void put_HeightMapKernelSize(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IDpiCompensationEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceDpi")]
		global::System.Numerics.Vector2 get_SourceDpi();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceDpi")]
		void put_SourceDpi(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IEdgeDetectionEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		float get_Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		void put_Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		float get_BlurAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		void put_BlurAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		global::Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode get_Mode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		void put_Mode(global::Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OverlayEdges")]
		bool get_OverlayEdges();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OverlayEdges")]
		void put_OverlayEdges(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaMode")]
		void put_AlphaMode(global::Microsoft.Graphics.Canvas.CanvasAlphaMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IEmbossEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		float get_Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		void put_Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		float get_Angle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		void put_Angle(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IExposureEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Exposure")]
		float get_Exposure();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Exposure")]
		void put_Exposure(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IGammaTransferEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedAmplitude")]
		float get_RedAmplitude();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedAmplitude")]
		void put_RedAmplitude(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedExponent")]
		float get_RedExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedExponent")]
		void put_RedExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedOffset")]
		float get_RedOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedOffset")]
		void put_RedOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		bool get_RedDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		void put_RedDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenAmplitude")]
		float get_GreenAmplitude();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenAmplitude")]
		void put_GreenAmplitude(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenExponent")]
		float get_GreenExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenExponent")]
		void put_GreenExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenOffset")]
		float get_GreenOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenOffset")]
		void put_GreenOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		bool get_GreenDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		void put_GreenDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueAmplitude")]
		float get_BlueAmplitude();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueAmplitude")]
		void put_BlueAmplitude(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueExponent")]
		float get_BlueExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueExponent")]
		void put_BlueExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueOffset")]
		float get_BlueOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueOffset")]
		void put_BlueOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		bool get_BlueDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		void put_BlueDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaAmplitude")]
		float get_AlphaAmplitude();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaAmplitude")]
		void put_AlphaAmplitude(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaExponent")]
		float get_AlphaExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaExponent")]
		void put_AlphaExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaOffset")]
		float get_AlphaOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaOffset")]
		void put_AlphaOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		bool get_AlphaDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		void put_AlphaDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IGaussianBlurEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		float get_BlurAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		void put_BlurAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Optimization")]
		global::Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Optimization")]
		void put_Optimization(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IGrayscaleEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IHighlightsAndShadowsEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Highlights")]
		float get_Highlights();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Highlights")]
		void put_Highlights(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Shadows")]
		float get_Shadows();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Shadows")]
		void put_Shadows(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Clarity")]
		float get_Clarity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Clarity")]
		void put_Clarity(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaskBlurAmount")]
		float get_MaskBlurAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MaskBlurAmount")]
		void put_MaskBlurAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceIsLinearGamma")]
		bool get_SourceIsLinearGamma();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceIsLinearGamma")]
		void put_SourceIsLinearGamma(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IHueRotationEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		float get_Angle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		void put_Angle(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IHueToRgbEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceColorSpace")]
		global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace get_SourceColorSpace();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceColorSpace")]
		void put_SourceColorSpace(global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IInvertEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ILinearTransferEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedOffset")]
		float get_RedOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedOffset")]
		void put_RedOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedSlope")]
		float get_RedSlope();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedSlope")]
		void put_RedSlope(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		bool get_RedDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		void put_RedDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenOffset")]
		float get_GreenOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenOffset")]
		void put_GreenOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenSlope")]
		float get_GreenSlope();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenSlope")]
		void put_GreenSlope(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		bool get_GreenDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		void put_GreenDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueOffset")]
		float get_BlueOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueOffset")]
		void put_BlueOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueSlope")]
		float get_BlueSlope();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueSlope")]
		void put_BlueSlope(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		bool get_BlueDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		void put_BlueDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaOffset")]
		float get_AlphaOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaOffset")]
		void put_AlphaOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaSlope")]
		float get_AlphaSlope();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaSlope")]
		void put_AlphaSlope(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		bool get_AlphaDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		void put_AlphaDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ILuminanceToAlphaEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IMorphologyEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Mode")]
		global::Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode get_Mode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Mode")]
		void put_Mode(global::Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Width")]
		int get_Width();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Width")]
		void put_Width(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Height")]
		int get_Height();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Height")]
		void put_Height(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IOpacityMetadataEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OpaqueRectangle")]
		global::Windows.Foundation.Rect get_OpaqueRectangle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OpaqueRectangle")]
		void put_OpaqueRectangle(global::Windows.Foundation.Rect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IPointDiffuseEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		global::System.Numerics.Vector3 get_LightPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		void put_LightPosition(global::System.Numerics.Vector3 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DiffuseAmount")]
		float get_DiffuseAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DiffuseAmount")]
		void put_DiffuseAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		float get_HeightMapScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		void put_HeightMapScale(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		global::Windows.UI.Color get_LightColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		void put_LightColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		global::System.Numerics.Vector2 get_HeightMapKernelSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		void put_HeightMapKernelSize(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IPointSpecularEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		global::System.Numerics.Vector3 get_LightPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		void put_LightPosition(global::System.Numerics.Vector3 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularExponent")]
		float get_SpecularExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularExponent")]
		void put_SpecularExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularAmount")]
		float get_SpecularAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularAmount")]
		void put_SpecularAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		float get_HeightMapScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		void put_HeightMapScale(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		global::Windows.UI.Color get_LightColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		void put_LightColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		global::System.Numerics.Vector2 get_HeightMapKernelSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		void put_HeightMapKernelSize(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IPosterizeEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedValueCount")]
		int get_RedValueCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedValueCount")]
		void put_RedValueCount(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenValueCount")]
		int get_GreenValueCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenValueCount")]
		void put_GreenValueCount(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueValueCount")]
		int get_BlueValueCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueValueCount")]
		void put_BlueValueCount(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IPremultiplyEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IRgbToHueEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OutputColorSpace")]
		global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace get_OutputColorSpace();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OutputColorSpace")]
		void put_OutputColorSpace(global::Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ISaturationEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Saturation")]
		float get_Saturation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Saturation")]
		void put_Saturation(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IScaleEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Scale")]
		global::System.Numerics.Vector2 get_Scale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Scale")]
		void put_Scale(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CenterPoint")]
		global::System.Numerics.Vector2 get_CenterPoint();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CenterPoint")]
		void put_CenterPoint(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Sharpness")]
		float get_Sharpness();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Sharpness")]
		void put_Sharpness(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ISepiaEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Intensity")]
		float get_Intensity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Intensity")]
		void put_Intensity(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaMode")]
		void put_AlphaMode(global::Microsoft.Graphics.Canvas.CanvasAlphaMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IShadowEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlurAmount")]
		float get_BlurAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlurAmount")]
		void put_BlurAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ShadowColor")]
		global::Windows.UI.Color get_ShadowColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ShadowColor")]
		void put_ShadowColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Optimization")]
		global::Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Optimization")]
		void put_Optimization(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ISharpenEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		float get_Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		void put_Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Threshold")]
		float get_Threshold();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Threshold")]
		void put_Threshold(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ISpotDiffuseEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		global::System.Numerics.Vector3 get_LightPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		void put_LightPosition(global::System.Numerics.Vector3 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightTarget")]
		global::System.Numerics.Vector3 get_LightTarget();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightTarget")]
		void put_LightTarget(global::System.Numerics.Vector3 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Focus")]
		float get_Focus();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Focus")]
		void put_Focus(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LimitingConeAngle")]
		float get_LimitingConeAngle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LimitingConeAngle")]
		void put_LimitingConeAngle(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DiffuseAmount")]
		float get_DiffuseAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DiffuseAmount")]
		void put_DiffuseAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		float get_HeightMapScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		void put_HeightMapScale(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		global::Windows.UI.Color get_LightColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		void put_LightColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		global::System.Numerics.Vector2 get_HeightMapKernelSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		void put_HeightMapKernelSize(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ISpotSpecularEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightPosition")]
		global::System.Numerics.Vector3 get_LightPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightPosition")]
		void put_LightPosition(global::System.Numerics.Vector3 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightTarget")]
		global::System.Numerics.Vector3 get_LightTarget();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightTarget")]
		void put_LightTarget(global::System.Numerics.Vector3 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Focus")]
		float get_Focus();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Focus")]
		void put_Focus(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LimitingConeAngle")]
		float get_LimitingConeAngle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LimitingConeAngle")]
		void put_LimitingConeAngle(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularExponent")]
		float get_SpecularExponent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularExponent")]
		void put_SpecularExponent(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SpecularAmount")]
		float get_SpecularAmount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SpecularAmount")]
		void put_SpecularAmount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapScale")]
		float get_HeightMapScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapScale")]
		void put_HeightMapScale(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LightColor")]
		global::Windows.UI.Color get_LightColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LightColor")]
		void put_LightColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapKernelSize")]
		global::System.Numerics.Vector2 get_HeightMapKernelSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapKernelSize")]
		void put_HeightMapKernelSize(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeightMapInterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeightMapInterpolationMode")]
		void put_HeightMapInterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IStraightenEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Angle")]
		float get_Angle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Angle")]
		void put_Angle(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MaintainSize")]
		bool get_MaintainSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MaintainSize")]
		void put_MaintainSize(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ITableTransferEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedTable")]
		float[] get_RedTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedTable")]
		void put_RedTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RedDisable")]
		bool get_RedDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RedDisable")]
		void put_RedDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenTable")]
		float[] get_GreenTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenTable")]
		void put_GreenTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GreenDisable")]
		bool get_GreenDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "GreenDisable")]
		void put_GreenDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueTable")]
		float[] get_BlueTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueTable")]
		void put_BlueTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BlueDisable")]
		bool get_BlueDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BlueDisable")]
		void put_BlueDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaTable")]
		float[] get_AlphaTable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaTable")]
		void put_AlphaTable(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaDisable")]
		bool get_AlphaDisable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "AlphaDisable")]
		void put_AlphaDisable(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClampOutput")]
		bool get_ClampOutput();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClampOutput")]
		void put_ClampOutput(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ITemperatureAndTintEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Temperature")]
		float get_Temperature();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Temperature")]
		void put_Temperature(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Tint")]
		float get_Tint();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Tint")]
		void put_Tint(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ITileEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourceRectangle")]
		global::Windows.Foundation.Rect get_SourceRectangle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SourceRectangle")]
		void put_SourceRectangle(global::Windows.Foundation.Rect value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ITransform2DEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformMatrix")]
		global::System.Numerics.Matrix3x2 get_TransformMatrix();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformMatrix")]
		void put_TransformMatrix(global::System.Numerics.Matrix3x2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Sharpness")]
		float get_Sharpness();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Sharpness")]
		void put_Sharpness(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ITransform3DEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InterpolationMode")]
		global::Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "InterpolationMode")]
		void put_InterpolationMode(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BorderMode")]
		global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "BorderMode")]
		void put_BorderMode(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformMatrix")]
		global::System.Numerics.Matrix4x4 get_TransformMatrix();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformMatrix")]
		void put_TransformMatrix(global::System.Numerics.Matrix4x4 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ITurbulenceEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Offset")]
		global::System.Numerics.Vector2 get_Offset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Offset")]
		void put_Offset(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::System.Numerics.Vector2 get_Size();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Size")]
		void put_Size(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Frequency")]
		global::System.Numerics.Vector2 get_Frequency();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Frequency")]
		void put_Frequency(global::System.Numerics.Vector2 value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Octaves")]
		int get_Octaves();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Octaves")]
		void put_Octaves(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Seed")]
		int get_Seed();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Seed")]
		void put_Seed(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Noise")]
		global::Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise get_Noise();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Noise")]
		void put_Noise(global::Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Tileable")]
		bool get_Tileable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Tileable")]
		void put_Tileable(bool value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IUnPremultiplyEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface IVignetteEffect : global::Microsoft.Graphics.Canvas.ICanvasImage, global::Windows.Graphics.Effects.IGraphicsEffectSource, global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Color")]
		global::Windows.UI.Color get_Color();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Color")]
		void put_Color(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Amount")]
		float get_Amount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Amount")]
		void put_Amount(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Curve")]
		float get_Curve();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Curve")]
		void put_Curve(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.Graphics.Effects.IGraphicsEffectSource get_Source();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Source")]
		void put_Source(global::Windows.Graphics.Effects.IGraphicsEffectSource source);
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum SamplerCoordinateMapping
	{
		Unknown = 0,
		OneToOne = 1,
		Offset = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum BlendEffectMode
	{
		Multiply = 0,
		Screen = 1,
		Darken = 2,
		Lighten = 3,
		Dissolve = 4,
		ColorBurn = 5,
		LinearBurn = 6,
		DarkerColor = 7,
		LighterColor = 8,
		ColorDodge = 9,
		LinearDodge = 10,
		Overlay = 11,
		SoftLight = 12,
		HardLight = 13,
		VividLight = 14,
		LinearLight = 15,
		PinLight = 16,
		HardMix = 17,
		Difference = 18,
		Exclusion = 19,
		Hue = 20,
		Saturation = 21,
		Color = 22,
		Luminosity = 23,
		Subtract = 24,
		Division = 25,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct Matrix5x4
	{
		public float M11;
		public float M12;
		public float M13;
		public float M14;
		public float M21;
		public float M22;
		public float M23;
		public float M24;
		public float M31;
		public float M32;
		public float M33;
		public float M34;
		public float M41;
		public float M42;
		public float M43;
		public float M44;
		public float M51;
		public float M52;
		public float M53;
		public float M54;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum EffectBorderMode
	{
		Soft = 0,
		Hard = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum EffectOptimization
	{
		Speed = 0,
		Balanced = 1,
		Quality = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum EffectChannelSelect
	{
		Red = 0,
		Green = 1,
		Blue = 2,
		Alpha = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum EdgeDetectionEffectMode
	{
		Sobel = 0,
		Prewitt = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum EffectHueColorSpace
	{
		Hsv = 0,
		Hsl = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum MorphologyEffectMode
	{
		Erode = 0,
		Dilate = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum TurbulenceEffectNoise
	{
		FractalSum = 0,
		Turbulence = 1,
	}
}

namespace Microsoft.Graphics.Canvas.Geometry
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasStrokeStyle : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasStrokeStyle()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StartCap")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle get_StartCap()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_StartCap(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "StartCap")]
		public void put_StartCap(global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_StartCap(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EndCap")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle get_EndCap()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_EndCap(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "EndCap")]
		public void put_EndCap(global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_EndCap(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DashCap")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle get_DashCap()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_DashCap(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DashCap")]
		public void put_DashCap(global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_DashCap(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineJoin")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin get_LineJoin()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_LineJoin(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineJoin")]
		public void put_LineJoin(global::Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_LineJoin(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MiterLimit")]
		public float get_MiterLimit()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_MiterLimit(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MiterLimit")]
		public void put_MiterLimit(float value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_MiterLimit(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DashStyle")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle get_DashStyle()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_DashStyle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DashStyle")]
		public void put_DashStyle(global::Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_DashStyle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DashOffset")]
		public float get_DashOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_DashOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DashOffset")]
		public void put_DashOffset(float value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_DashOffset(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDashStyle")]
		public float[] get_CustomDashStyle()
		{
			float[] __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_CustomDashStyle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDashStyle")]
		public void put_CustomDashStyle(float[] valueElements)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_CustomDashStyle(
								this, 
								valueElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformBehavior")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior get_TransformBehavior()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.get_TransformBehavior(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformBehavior")]
		public void put_TransformBehavior(global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior value)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle__Impl.Stubs.put_TransformBehavior(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CanvasStrokeStyle(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasGeometry : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CombineWith(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry, 
					global::System.Numerics.Matrix3x2 otherGeometryTransform, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine combine)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.CombineWith(
								this, 
								otherGeometry, 
								otherGeometryTransform, 
								combine
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CombineWith(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry, 
					global::System.Numerics.Matrix3x2 otherGeometryTransform, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine combine, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.CombineWith(
								this, 
								otherGeometry, 
								otherGeometryTransform, 
								combine, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Stroke(float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Stroke(
								this, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Stroke(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Stroke(
								this, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Stroke(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Stroke(
								this, 
								strokeWidth, 
								strokeStyle, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Outline()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Outline(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Outline(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Outline(
								this, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Simplify(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification simplification)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Simplify(
								this, 
								simplification
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Simplify(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification simplification, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Simplify(
								this, 
								simplification, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Transform(global::System.Numerics.Matrix3x2 transform)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Transform(
								this, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation CompareWith(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.CompareWith(
								this, 
								otherGeometry
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation CompareWith(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry, 
					global::System.Numerics.Matrix3x2 otherGeometryTransform, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.CompareWith(
								this, 
								otherGeometry, 
								otherGeometryTransform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ComputeArea()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeArea(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ComputeArea(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeArea(
								this, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ComputePathLength()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputePathLength(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ComputePathLength(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputePathLength(
								this, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Numerics.Vector2 ComputePointOnPath(float distance)
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputePointOnPath(
								this, 
								distance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Numerics.Vector2 ComputePointOnPath(
					float distance, 
					out global::System.Numerics.Vector2 tangent)
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputePointOnPath(
								this, 
								distance, 
								out tangent
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Numerics.Vector2 ComputePointOnPath(
					float length, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance, 
					out global::System.Numerics.Vector2 tangent)
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputePointOnPath(
								this, 
								length, 
								transform, 
								flatteningTolerance, 
								out tangent
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool FillContainsPoint(global::System.Numerics.Vector2 point)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.FillContainsPoint(
								this, 
								point
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool FillContainsPoint(
					global::System.Numerics.Vector2 point, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.FillContainsPoint(
								this, 
								point, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect ComputeBounds()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeBounds(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect ComputeBounds(global::System.Numerics.Matrix3x2 transform)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeBounds(
								this, 
								transform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect ComputeStrokeBounds(float strokeWidth)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeStrokeBounds(
								this, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect ComputeStrokeBounds(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeStrokeBounds(
								this, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect ComputeStrokeBounds(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.ComputeStrokeBounds(
								this, 
								strokeWidth, 
								strokeStyle, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool StrokeContainsPoint(
					global::System.Numerics.Vector2 point, 
					float strokeWidth)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.StrokeContainsPoint(
								this, 
								point, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool StrokeContainsPoint(
					global::System.Numerics.Vector2 point, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.StrokeContainsPoint(
								this, 
								point, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool StrokeContainsPoint(
					global::System.Numerics.Vector2 point, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.StrokeContainsPoint(
								this, 
								point, 
								strokeWidth, 
								strokeStyle, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices[] Tessellate()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices[] __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Tessellate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices[] Tessellate(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices[] __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.Tessellate(
								this, 
								transform, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void SendPathTo(global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver streamReader)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.SendPathTo(
								this, 
								streamReader
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Foundation.Rect rect)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRectangle(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								rect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRectangle(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Foundation.Rect rect)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateRectangle(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								rect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float w, 
					float h)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRectangle(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								x, 
								y, 
								w, 
								h
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRectangle(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float w, 
					float h)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateRectangle(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								x, 
								y, 
								w, 
								h
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRoundedRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRoundedRectangle(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								rect, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRoundedRectangle(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateRoundedRectangle(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								rect, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRoundedRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRoundedRectangle(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateRoundedRectangle(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateRoundedRectangle(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								x, 
								y, 
								w, 
								h, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateEllipse(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateEllipse(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								centerPoint, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateEllipse(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateEllipse(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								centerPoint, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateEllipse(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateEllipse(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								x, 
								y, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateEllipse(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float radiusX, 
					float radiusY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateEllipse(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								x, 
								y, 
								radiusX, 
								radiusY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateCircle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2 centerPoint, 
					float radius)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateCircle(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								centerPoint, 
								radius
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateCircle(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2 centerPoint, 
					float radius)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateCircle(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								centerPoint, 
								radius
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateCircle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float radius)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateCircle(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								x, 
								y, 
								radius
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateCircle(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float radius)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateCircle(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								x, 
								y, 
								radius
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreatePath(global::Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder pathBuilder)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreatePath(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								pathBuilder
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreatePath(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder pathBuilder)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreatePath(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								pathBuilder
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreatePolygon(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2[] points)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreatePolygon(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								points
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreatePolygon(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2[] points)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreatePolygon(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								points
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateGroup(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry[] geometries)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateGroup(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								geometries
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateGroup(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry[] geometries)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateGroup(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								geometries
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateGroup(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry[] geometries, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination filledRegionDetermination)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateGroup(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								resourceCreator, 
								geometries, 
								filledRegionDetermination
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateGroup(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry[] geometries, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination filledRegionDetermination)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateGroup(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								resourceCreator, 
								geometries, 
								filledRegionDetermination
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateText(global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateText(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								textLayout
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_CreateText(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.CreateText(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								textLayout
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static float ComputeFlatteningTolerance(
					float dpi, 
					float maximumZoomFactor)
		{
			float retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_ComputeFlatteningTolerance(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								dpi, 
								maximumZoomFactor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static float __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_ComputeFlatteningTolerance(
					string typeName, 
					float dpi, 
					float maximumZoomFactor)
		{
			float __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.ComputeFlatteningTolerance(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								dpi, 
								maximumZoomFactor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static float ComputeFlatteningTolerance(
					float dpi, 
					float maximumZoomFactor, 
					global::System.Numerics.Matrix3x2 expectedGeometryTransform)
		{
			float retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_ComputeFlatteningTolerance(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry", 
								dpi, 
								maximumZoomFactor, 
								expectedGeometryTransform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static float __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_ComputeFlatteningTolerance(
					string typeName, 
					float dpi, 
					float maximumZoomFactor, 
					global::System.Numerics.Matrix3x2 expectedGeometryTransform)
		{
			float __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.ComputeFlatteningTolerance(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
												), 
								dpi, 
								maximumZoomFactor, 
								expectedGeometryTransform
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFlatteningTolerance")]
		public static float get_DefaultFlatteningTolerance()
		{
			float retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_get_DefaultFlatteningTolerance("Microsoft.Graphics.Canvas.Geometry.CanvasGeometry");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static float __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGeometryStatics_get_DefaultFlatteningTolerance(string typeName)
		{
			float __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics__Impl.Stubs.get_DefaultFlatteningTolerance(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasGeometry(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasPathBuilder : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasPathBuilder(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasPathBuilderFactory_Create(
								"Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder", 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasPathBuilderFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory).TypeHandle
												), 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public void BeginFigure(
					global::System.Numerics.Vector2 startPoint, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill figureFill)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.BeginFigure(
								this, 
								startPoint, 
								figureFill
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void BeginFigure(global::System.Numerics.Vector2 startPoint)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.BeginFigure(
								this, 
								startPoint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void BeginFigure(
					float startX, 
					float startY, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill figureFill)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.BeginFigure(
								this, 
								startX, 
								startY, 
								figureFill
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void BeginFigure(
					float startX, 
					float startY)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.BeginFigure(
								this, 
								startX, 
								startY
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddArc(
					global::System.Numerics.Vector2 endPoint, 
					float radiusX, 
					float radiusY, 
					float rotationAngle, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection sweepDirection, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasArcSize arcSize)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddArc(
								this, 
								endPoint, 
								radiusX, 
								radiusY, 
								rotationAngle, 
								sweepDirection, 
								arcSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddArc(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					float startAngle, 
					float sweepAngle)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddArc(
								this, 
								centerPoint, 
								radiusX, 
								radiusY, 
								startAngle, 
								sweepAngle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddCubicBezier(
					global::System.Numerics.Vector2 controlPoint1, 
					global::System.Numerics.Vector2 controlPoint2, 
					global::System.Numerics.Vector2 endPoint)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddCubicBezier(
								this, 
								controlPoint1, 
								controlPoint2, 
								endPoint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddLine(global::System.Numerics.Vector2 endPoint)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddLine(
								this, 
								endPoint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddLine(
					float x, 
					float y)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddLine(
								this, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddQuadraticBezier(
					global::System.Numerics.Vector2 controlPoint, 
					global::System.Numerics.Vector2 endPoint)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddQuadraticBezier(
								this, 
								controlPoint, 
								endPoint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetFilledRegionDetermination(global::Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination filledRegionDetermination)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.SetFilledRegionDetermination(
								this, 
								filledRegionDetermination
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetSegmentOptions(global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions figureSegmentOptions)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.SetSegmentOptions(
								this, 
								figureSegmentOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void EndFigure(global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop figureLoop)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.EndFigure(
								this, 
								figureLoop
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void AddGeometry(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry)
		{
			global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder__Impl.Stubs.AddGeometry(
								this, 
								geometry
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CanvasPathBuilder(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasCachedGeometry : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateFill(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateFill(
								"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry", 
								geometry
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateFill(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics__Impl.Stubs.CreateFill(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics).TypeHandle
												), 
								geometry
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateFill(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateFill(
								"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry", 
								geometry, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateFill(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics__Impl.Stubs.CreateFill(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics).TypeHandle
												), 
								geometry, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateStroke(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateStroke(
								"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry", 
								geometry, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateStroke(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics__Impl.Stubs.CreateStroke(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics).TypeHandle
												), 
								geometry, 
								strokeWidth
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateStroke(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateStroke(
								"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry", 
								geometry, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateStroke(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics__Impl.Stubs.CreateStroke(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics).TypeHandle
												), 
								geometry, 
								strokeWidth, 
								strokeStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateStroke(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateStroke(
								"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry", 
								geometry, 
								strokeWidth, 
								strokeStyle, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasCachedGeometryStatics_CreateStroke(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					float flatteningTolerance)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics__Impl.Stubs.CreateStroke(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics).TypeHandle
												), 
								geometry, 
								strokeWidth, 
								strokeStyle, 
								flatteningTolerance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasCachedGeometry(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasGradientMesh : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasGradientMesh(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch[] patchElements)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGradientMeshFactory_Create(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh", 
								resourceCreator, 
								patchElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGradientMeshFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch[] patchElements)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory).TypeHandle
												), 
								resourceCreator, 
								patchElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Patches")]
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch[] get_Patches()
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch[] __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh__Impl.Stubs.get_Patches(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh__Impl.Stubs.GetBounds(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch CreateCoonsPatch(
					global::System.Numerics.Vector2[] points, 
					global::Windows.UI.Color[] colors, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge[] edges)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGradientMeshStatics_CreateCoonsPatch(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh", 
								points, 
								colors, 
								edges
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGradientMeshStatics_CreateCoonsPatch(
					string typeName, 
					global::System.Numerics.Vector2[] points, 
					global::Windows.UI.Color[] colors, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge[] edges)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics__Impl.Stubs.CreateCoonsPatch(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics).TypeHandle
												), 
								points, 
								colors, 
								edges
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch CreateTensorPatch(
					global::System.Numerics.Vector2[] points, 
					global::Windows.UI.Color[] colors, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge[] edges)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGradientMeshStatics_CreateTensorPatch(
								"Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh", 
								points, 
								colors, 
								edges
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch __Factory_Microsoft_Graphics_Canvas_Geometry__ICanvasGradientMeshStatics_CreateTensorPatch(
					string typeName, 
					global::System.Numerics.Vector2[] points, 
					global::Windows.UI.Color[] colors, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge[] edges)
		{
			global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics__Impl.Stubs.CreateTensorPatch(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics).TypeHandle
												), 
								points, 
								colors, 
								edges
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasGradientMesh(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasStrokeStyle : global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StartCap")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle get_StartCap();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "StartCap")]
		void put_StartCap(global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "EndCap")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle get_EndCap();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "EndCap")]
		void put_EndCap(global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DashCap")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle get_DashCap();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DashCap")]
		void put_DashCap(global::Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineJoin")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin get_LineJoin();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineJoin")]
		void put_LineJoin(global::Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MiterLimit")]
		float get_MiterLimit();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "MiterLimit")]
		void put_MiterLimit(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DashStyle")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle get_DashStyle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DashStyle")]
		void put_DashStyle(global::Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DashOffset")]
		float get_DashOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DashOffset")]
		void put_DashOffset(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDashStyle")]
		float[] get_CustomDashStyle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDashStyle")]
		void put_CustomDashStyle(float[] valueElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TransformBehavior")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior get_TransformBehavior();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TransformBehavior")]
		void put_TransformBehavior(global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasGeometryStatics
	{
		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Foundation.Rect rect);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float w, 
					float h);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRoundedRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Windows.Foundation.Rect rect, 
					float radiusX, 
					float radiusY);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateRoundedRectangle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float w, 
					float h, 
					float radiusX, 
					float radiusY);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateEllipse(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateEllipse(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float radiusX, 
					float radiusY);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateCircle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2 centerPoint, 
					float radius);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateCircle(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float x, 
					float y, 
					float radius);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreatePath(global::Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder pathBuilder);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreatePolygon(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::System.Numerics.Vector2[] points);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateGroup(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry[] geometries);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateGroup(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry[] geometries, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination filledRegionDetermination);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CreateText(global::Microsoft.Graphics.Canvas.Text.CanvasTextLayout textLayout);

		float ComputeFlatteningTolerance(
					float dpi, 
					float maximumZoomFactor);

		float ComputeFlatteningTolerance(
					float dpi, 
					float maximumZoomFactor, 
					global::System.Numerics.Matrix3x2 expectedGeometryTransform);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFlatteningTolerance")]
		float get_DefaultFlatteningTolerance();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPathBuilderFactory
	{
		global::System.IntPtr Create(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPathBuilder : global::System.IDisposable
	{
		void BeginFigure(
					global::System.Numerics.Vector2 startPoint, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill figureFill);

		void BeginFigure(global::System.Numerics.Vector2 startPoint);

		void BeginFigure(
					float startX, 
					float startY, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill figureFill);

		void BeginFigure(
					float startX, 
					float startY);

		void AddArc(
					global::System.Numerics.Vector2 endPoint, 
					float radiusX, 
					float radiusY, 
					float rotationAngle, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection sweepDirection, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasArcSize arcSize);

		void AddArc(
					global::System.Numerics.Vector2 centerPoint, 
					float radiusX, 
					float radiusY, 
					float startAngle, 
					float sweepAngle);

		void AddCubicBezier(
					global::System.Numerics.Vector2 controlPoint1, 
					global::System.Numerics.Vector2 controlPoint2, 
					global::System.Numerics.Vector2 endPoint);

		void AddLine(global::System.Numerics.Vector2 endPoint);

		void AddLine(
					float x, 
					float y);

		void AddQuadraticBezier(
					global::System.Numerics.Vector2 controlPoint, 
					global::System.Numerics.Vector2 endPoint);

		void SetFilledRegionDetermination(global::Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination filledRegionDetermination);

		void SetSegmentOptions(global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions figureSegmentOptions);

		void EndFigure(global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop figureLoop);

		void AddGeometry(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasGeometry : global::System.IDisposable
	{
		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CombineWith(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry, 
					global::System.Numerics.Matrix3x2 otherGeometryTransform, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine combine);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry CombineWith(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry, 
					global::System.Numerics.Matrix3x2 otherGeometryTransform, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine combine, 
					float flatteningTolerance);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Stroke(float strokeWidth);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Stroke(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Stroke(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Outline();

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Outline(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Simplify(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification simplification);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Simplify(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification simplification, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Transform(global::System.Numerics.Matrix3x2 transform);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation CompareWith(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation CompareWith(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry otherGeometry, 
					global::System.Numerics.Matrix3x2 otherGeometryTransform, 
					float flatteningTolerance);

		float ComputeArea();

		float ComputeArea(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		float ComputePathLength();

		float ComputePathLength(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		global::System.Numerics.Vector2 ComputePointOnPath(float distance);

		global::System.Numerics.Vector2 ComputePointOnPath(
					float distance, 
					out global::System.Numerics.Vector2 tangent);

		global::System.Numerics.Vector2 ComputePointOnPath(
					float length, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance, 
					out global::System.Numerics.Vector2 tangent);

		bool FillContainsPoint(global::System.Numerics.Vector2 point);

		bool FillContainsPoint(
					global::System.Numerics.Vector2 point, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		global::Windows.Foundation.Rect ComputeBounds();

		global::Windows.Foundation.Rect ComputeBounds(global::System.Numerics.Matrix3x2 transform);

		global::Windows.Foundation.Rect ComputeStrokeBounds(float strokeWidth);

		global::Windows.Foundation.Rect ComputeStrokeBounds(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		global::Windows.Foundation.Rect ComputeStrokeBounds(
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		bool StrokeContainsPoint(
					global::System.Numerics.Vector2 point, 
					float strokeWidth);

		bool StrokeContainsPoint(
					global::System.Numerics.Vector2 point, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		bool StrokeContainsPoint(
					global::System.Numerics.Vector2 point, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices[] Tessellate();

		global::Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices[] Tessellate(
					global::System.Numerics.Matrix3x2 transform, 
					float flatteningTolerance);

		void SendPathTo(global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver streamReader);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPathReceiver
	{
		void BeginFigure(
					global::System.Numerics.Vector2 startPoint, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill figureFill);

		void AddArc(
					global::System.Numerics.Vector2 endPoint, 
					float radiusX, 
					float radiusY, 
					float rotationAngle, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection sweepDirection, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasArcSize arcSize);

		void AddCubicBezier(
					global::System.Numerics.Vector2 controlPoint1, 
					global::System.Numerics.Vector2 controlPoint2, 
					global::System.Numerics.Vector2 endPoint);

		void AddLine(global::System.Numerics.Vector2 endPoint);

		void AddQuadraticBezier(
					global::System.Numerics.Vector2 controlPoint, 
					global::System.Numerics.Vector2 endPoint);

		void SetFilledRegionDetermination(global::Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination filledRegionDetermination);

		void SetSegmentOptions(global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions figureSegmentOptions);

		void EndFigure(global::Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop figureLoop);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasCachedGeometryStatics
	{
		global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateFill(global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateFill(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float flatteningTolerance);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateStroke(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateStroke(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry CreateStroke(
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGeometry geometry, 
					float strokeWidth, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle strokeStyle, 
					float flatteningTolerance);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasCachedGeometry : global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasGradientMeshFactory
	{
		global::System.IntPtr Create(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch[] patchElements);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasGradientMeshStatics
	{
		global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch CreateCoonsPatch(
					global::System.Numerics.Vector2[] points, 
					global::Windows.UI.Color[] colors, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge[] edges);

		global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch CreateTensorPatch(
					global::System.Numerics.Vector2[] points, 
					global::Windows.UI.Color[] colors, 
					global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge[] edges);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasGradientMesh : global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Patches")]
		global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch[] get_Patches();

		global::Windows.Foundation.Rect GetBounds(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasCapStyle
	{
		Flat = 0,
		Square = 1,
		Round = 2,
		Triangle = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasLineJoin
	{
		Miter = 0,
		Bevel = 1,
		Round = 2,
		MiterOrBevel = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasDashStyle
	{
		Solid = 0,
		Dash = 1,
		Dot = 2,
		DashDot = 3,
		DashDotDot = 4,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasStrokeTransformBehavior
	{
		Normal = 0,
		Fixed = 1,
		Hairline = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFigureFill
	{
		Default = 0,
		DoesNotAffectFills = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasSweepDirection
	{
		CounterClockwise = 0,
		Clockwise = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasArcSize
	{
		Small = 0,
		Large = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFilledRegionDetermination
	{
		Alternate = 0,
		Winding = 1,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFigureSegmentOptions : uint
	{
		None = 0x0u,
		ForceUnstroked = 0x1u,
		ForceRoundLineJoin = 0x2u,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFigureLoop
	{
		Open = 0,
		Closed = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasGeometryCombine
	{
		Union = 0,
		Intersect = 1,
		Xor = 2,
		Exclude = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasGeometrySimplification
	{
		CubicsAndLines = 0,
		Lines = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasGeometryRelation
	{
		Disjoint = 0,
		Contained = 1,
		Contains = 2,
		Overlap = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasTriangleVertices
	{
		public global::System.Numerics.Vector2 Vertex1;
		public global::System.Numerics.Vector2 Vertex2;
		public global::System.Numerics.Vector2 Vertex3;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasGradientMeshPatch
	{
		public global::System.Numerics.Vector2 Point00;
		public global::System.Numerics.Vector2 Point01;
		public global::System.Numerics.Vector2 Point02;
		public global::System.Numerics.Vector2 Point03;
		public global::System.Numerics.Vector2 Point10;
		public global::System.Numerics.Vector2 Point11;
		public global::System.Numerics.Vector2 Point12;
		public global::System.Numerics.Vector2 Point13;
		public global::System.Numerics.Vector2 Point20;
		public global::System.Numerics.Vector2 Point21;
		public global::System.Numerics.Vector2 Point22;
		public global::System.Numerics.Vector2 Point23;
		public global::System.Numerics.Vector2 Point30;
		public global::System.Numerics.Vector2 Point31;
		public global::System.Numerics.Vector2 Point32;
		public global::System.Numerics.Vector2 Point33;
		public global::Windows.UI.Color Color00;
		public global::Windows.UI.Color Color03;
		public global::Windows.UI.Color Color30;
		public global::Windows.UI.Color Color33;
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge Edge00To03;
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge Edge03To33;
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge Edge33To30;
		public global::Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge Edge30To00;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasGradientMeshPatchEdge
	{
		Aliased = 0,
		Antialiased = 1,
		AliasedAndInflated = 2,
	}
}

namespace Microsoft.Graphics.Canvas.Printing
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasPrintDocument : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasPrintDocument(global::Microsoft.Graphics.Canvas.CanvasDevice device)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Printing__ICanvasPrintDocumentFactory_CreateWithDevice(
								"Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument", 
								device
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Printing__ICanvasPrintDocumentFactory_CreateWithDevice(
					string typeName, 
					global::Microsoft.Graphics.Canvas.CanvasDevice device)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory__Impl.Stubs.CreateWithDevice(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory).TypeHandle
												), 
								device
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasPrintDocument()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PrintTaskOptionsChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PrintTaskOptionsChanged(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, global::Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.add_PrintTaskOptionsChanged(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PrintTaskOptionsChanged")]
		public void remove_PrintTaskOptionsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.remove_PrintTaskOptionsChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Preview")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Preview(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, global::Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.add_Preview(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Preview")]
		public void remove_Preview(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.remove_Preview(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Print")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Print(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, global::Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.add_Print(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Print")]
		public void remove_Print(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.remove_Print(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void InvalidatePreview()
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.InvalidatePreview(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetPageCount(uint count)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.SetPageCount(
								this, 
								count
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetIntermediatePageCount(uint count)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument__Impl.Stubs.SetIntermediatePageCount(
								this, 
								count
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreator__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasPrintDocument(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasPrintTaskOptionsChangedEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CurrentPreviewPageNumber")]
		public uint get_CurrentPreviewPageNumber()
		{
			uint __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs__Impl.Stubs.get_CurrentPreviewPageNumber(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "NewPreviewPageNumber")]
		public void put_NewPreviewPageNumber(uint value)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs__Impl.Stubs.put_NewPreviewPageNumber(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewPreviewPageNumber")]
		public uint get_NewPreviewPageNumber()
		{
			uint __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs__Impl.Stubs.get_NewPreviewPageNumber(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral GetDeferral()
		{
			global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs__Impl.Stubs.GetDeferral(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrintTaskOptions")]
		public global::Windows.Graphics.Printing.PrintTaskOptions get_PrintTaskOptions()
		{
			global::Windows.Graphics.Printing.PrintTaskOptions __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs__Impl.Stubs.get_PrintTaskOptions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasPrintTaskOptionsChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasPrintDeferral : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral
	{
		public void Complete()
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral__Impl.Stubs.Complete(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CanvasPrintDeferral(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasPreviewEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PageNumber")]
		public uint get_PageNumber()
		{
			uint __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs__Impl.Stubs.get_PageNumber(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrintTaskOptions")]
		public global::Windows.Graphics.Printing.PrintTaskOptions get_PrintTaskOptions()
		{
			global::Windows.Graphics.Printing.PrintTaskOptions __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs__Impl.Stubs.get_PrintTaskOptions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral GetDeferral()
		{
			global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs__Impl.Stubs.GetDeferral(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawingSession")]
		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession()
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs__Impl.Stubs.get_DrawingSession(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasPreviewEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasPrintEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrintTaskOptions")]
		public global::Windows.Graphics.Printing.PrintTaskOptions get_PrintTaskOptions()
		{
			global::Windows.Graphics.Printing.PrintTaskOptions __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs__Impl.Stubs.get_PrintTaskOptions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Dpi")]
		public void put_Dpi(float value)
		{
			global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs__Impl.Stubs.put_Dpi(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral GetDeferral()
		{
			global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs__Impl.Stubs.GetDeferral(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession()
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs__Impl.Stubs.CreateDrawingSession(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasPrintEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPrintDocumentFactory
	{
		global::System.IntPtr CreateWithDevice(global::Microsoft.Graphics.Canvas.CanvasDevice device);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPrintDocument : global::System.IDisposable, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PrintTaskOptionsChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PrintTaskOptionsChanged(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, global::Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PrintTaskOptionsChanged")]
		void remove_PrintTaskOptionsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Preview")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Preview(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, global::Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Preview")]
		void remove_Preview(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Print")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Print(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, global::Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Print")]
		void remove_Print(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		void InvalidatePreview();

		void SetPageCount(uint count);

		void SetIntermediatePageCount(uint count);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPrintTaskOptionsChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CurrentPreviewPageNumber")]
		uint get_CurrentPreviewPageNumber();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "NewPreviewPageNumber")]
		void put_NewPreviewPageNumber(uint value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewPreviewPageNumber")]
		uint get_NewPreviewPageNumber();

		global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral GetDeferral();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrintTaskOptions")]
		global::Windows.Graphics.Printing.PrintTaskOptions get_PrintTaskOptions();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPrintDeferral
	{
		void Complete();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPreviewEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PageNumber")]
		uint get_PageNumber();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrintTaskOptions")]
		global::Windows.Graphics.Printing.PrintTaskOptions get_PrintTaskOptions();

		global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral GetDeferral();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawingSession")]
		global::Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasPrintEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrintTaskOptions")]
		global::Windows.Graphics.Printing.PrintTaskOptions get_PrintTaskOptions();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		float get_Dpi();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Dpi")]
		void put_Dpi(float value);

		global::Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral GetDeferral();

		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession();
	}
}

namespace Microsoft.Graphics.Canvas.Text
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasTextFormat : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasTextFormat()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Text.CanvasTextFormat");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Direction")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_Direction(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Direction")]
		public void put_Direction(global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_Direction(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontFamily")]
		public string get_FontFamily()
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_FontFamily(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontFamily")]
		public void put_FontFamily(string value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_FontFamily(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontSize")]
		public float get_FontSize()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_FontSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontSize")]
		public void put_FontSize(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_FontSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontStretch")]
		public global::Windows.UI.Text.FontStretch get_FontStretch()
		{
			global::Windows.UI.Text.FontStretch __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_FontStretch(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontStretch")]
		public void put_FontStretch(global::Windows.UI.Text.FontStretch value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_FontStretch(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontStyle")]
		public global::Windows.UI.Text.FontStyle get_FontStyle()
		{
			global::Windows.UI.Text.FontStyle __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_FontStyle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontStyle")]
		public void put_FontStyle(global::Windows.UI.Text.FontStyle value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_FontStyle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontWeight")]
		public global::Windows.UI.Text.FontWeight get_FontWeight()
		{
			global::Windows.UI.Text.FontWeight __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_FontWeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontWeight")]
		public void put_FontWeight(global::Windows.UI.Text.FontWeight value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_FontWeight(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IncrementalTabStop")]
		public float get_IncrementalTabStop()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_IncrementalTabStop(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IncrementalTabStop")]
		public void put_IncrementalTabStop(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_IncrementalTabStop(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacing")]
		public float get_LineSpacing()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_LineSpacing(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacing")]
		public void put_LineSpacing(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_LineSpacing(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingBaseline")]
		public float get_LineSpacingBaseline()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_LineSpacingBaseline(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingBaseline")]
		public void put_LineSpacingBaseline(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_LineSpacingBaseline(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LocaleName")]
		public string get_LocaleName()
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_LocaleName(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LocaleName")]
		public void put_LocaleName(string value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_LocaleName(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalAlignment")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_VerticalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalAlignment")]
		public void put_VerticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_VerticalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalAlignment")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_HorizontalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalAlignment")]
		public void put_HorizontalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_HorizontalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingGranularity")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_TrimmingGranularity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingGranularity")]
		public void put_TrimmingGranularity(global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_TrimmingGranularity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiter")]
		public string get_TrimmingDelimiter()
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_TrimmingDelimiter(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiter")]
		public void put_TrimmingDelimiter(string value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_TrimmingDelimiter(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiterCount")]
		public int get_TrimmingDelimiterCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_TrimmingDelimiterCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiterCount")]
		public void put_TrimmingDelimiterCount(int value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_TrimmingDelimiterCount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "WordWrapping")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_WordWrapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "WordWrapping")]
		public void put_WordWrapping(global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_WordWrapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Options")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_Options(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Options")]
		public void put_Options(global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_Options(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalGlyphOrientation")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_VerticalGlyphOrientation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalGlyphOrientation")]
		public void put_VerticalGlyphOrientation(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_VerticalGlyphOrientation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OpticalAlignment")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_OpticalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OpticalAlignment")]
		public void put_OpticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_OpticalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LastLineWrapping")]
		public bool get_LastLineWrapping()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_LastLineWrapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LastLineWrapping")]
		public void put_LastLineWrapping(bool value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_LastLineWrapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingMode")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_LineSpacingMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingMode")]
		public void put_LineSpacingMode(global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_LineSpacingMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingSign")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.get_TrimmingSign(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingSign")]
		public void put_TrimmingSign(global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormat__Impl.Stubs.put_TrimmingSign(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static string[] GetSystemFontFamilies()
		{
			string[] retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextFormatStatics_GetSystemFontFamilies("Microsoft.Graphics.Canvas.Text.CanvasTextFormat");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static string[] __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextFormatStatics_GetSystemFontFamilies(string typeName)
		{
			string[] __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics__Impl.Stubs.GetSystemFontFamilies(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static string[] GetSystemFontFamilies(global::System.Collections.Generic.IReadOnlyList<string> localeList)
		{
			string[] retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextFormatStatics_GetSystemFontFamilies(
								"Microsoft.Graphics.Canvas.Text.CanvasTextFormat", 
								localeList
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static string[] __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextFormatStatics_GetSystemFontFamilies(
					string typeName, 
					global::System.Collections.Generic.IReadOnlyList<string> localeList)
		{
			string[] __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics__Impl.Stubs.GetSystemFontFamilies(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics).TypeHandle
												), 
								localeList
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasTextFormat(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasTextLayout : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasTextLayout(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string textString, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat textFormat, 
					float requestedWidth, 
					float requestedHeight)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextLayoutFactory_Create(
								"Microsoft.Graphics.Canvas.Text.CanvasTextLayout", 
								resourceCreator, 
								textString, 
								textFormat, 
								requestedWidth, 
								requestedHeight
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextLayoutFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string textString, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat textFormat, 
					float requestedWidth, 
					float requestedHeight)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory).TypeHandle
												), 
								resourceCreator, 
								textString, 
								textFormat, 
								requestedWidth, 
								requestedHeight
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public int[] GetFormatChangeIndices()
		{
			int[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetFormatChangeIndices(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Direction")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_Direction(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Direction")]
		public void put_Direction(global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_Direction(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontFamily")]
		public string get_DefaultFontFamily()
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DefaultFontFamily(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontSize")]
		public float get_DefaultFontSize()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DefaultFontSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontStretch")]
		public global::Windows.UI.Text.FontStretch get_DefaultFontStretch()
		{
			global::Windows.UI.Text.FontStretch __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DefaultFontStretch(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontStyle")]
		public global::Windows.UI.Text.FontStyle get_DefaultFontStyle()
		{
			global::Windows.UI.Text.FontStyle __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DefaultFontStyle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontWeight")]
		public global::Windows.UI.Text.FontWeight get_DefaultFontWeight()
		{
			global::Windows.UI.Text.FontWeight __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DefaultFontWeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IncrementalTabStop")]
		public float get_IncrementalTabStop()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_IncrementalTabStop(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IncrementalTabStop")]
		public void put_IncrementalTabStop(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_IncrementalTabStop(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacing")]
		public float get_LineSpacing()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_LineSpacing(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacing")]
		public void put_LineSpacing(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_LineSpacing(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingBaseline")]
		public float get_LineSpacingBaseline()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_LineSpacingBaseline(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingBaseline")]
		public void put_LineSpacingBaseline(float value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_LineSpacingBaseline(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultLocaleName")]
		public string get_DefaultLocaleName()
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DefaultLocaleName(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalAlignment")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_VerticalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalAlignment")]
		public void put_VerticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_VerticalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalAlignment")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_HorizontalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalAlignment")]
		public void put_HorizontalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_HorizontalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingGranularity")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_TrimmingGranularity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingGranularity")]
		public void put_TrimmingGranularity(global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_TrimmingGranularity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiter")]
		public string get_TrimmingDelimiter()
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_TrimmingDelimiter(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiter")]
		public void put_TrimmingDelimiter(string value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_TrimmingDelimiter(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiterCount")]
		public int get_TrimmingDelimiterCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_TrimmingDelimiterCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiterCount")]
		public void put_TrimmingDelimiterCount(int value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_TrimmingDelimiterCount(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "WordWrapping")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_WordWrapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "WordWrapping")]
		public void put_WordWrapping(global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_WordWrapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Options")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_Options(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Options")]
		public void put_Options(global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_Options(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingMode")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_LineSpacingMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingMode")]
		public void put_LineSpacingMode(global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_LineSpacingMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingSign")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_TrimmingSign(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingSign")]
		public void put_TrimmingSign(global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_TrimmingSign(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RequestedSize")]
		public global::Windows.Foundation.Size get_RequestedSize()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_RequestedSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RequestedSize")]
		public void put_RequestedSize(global::Windows.Foundation.Size value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_RequestedSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public float GetMinimumLineLength()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetMinimumLineLength(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush GetBrush(int characterIndex)
		{
			global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetBrush(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public string GetFontFamily(int characterIndex)
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetFontFamily(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float GetFontSize(int characterIndex)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetFontSize(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Text.FontStretch GetFontStretch(int characterIndex)
		{
			global::Windows.UI.Text.FontStretch __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetFontStretch(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Text.FontStyle GetFontStyle(int characterIndex)
		{
			global::Windows.UI.Text.FontStyle __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetFontStyle(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Text.FontWeight GetFontWeight(int characterIndex)
		{
			global::Windows.UI.Text.FontWeight __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetFontWeight(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public string GetLocaleName(int characterIndex)
		{
			string __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetLocaleName(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool GetStrikethrough(int characterIndex)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetStrikethrough(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool GetUnderline(int characterIndex)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetUnderline(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void SetColor(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Color color)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetColor(
								this, 
								characterIndex, 
								characterCount, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetBrush(
					int characterIndex, 
					int characterCount, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetBrush(
								this, 
								characterIndex, 
								characterCount, 
								brush
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetFontFamily(
					int characterIndex, 
					int characterCount, 
					string fontFamily)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetFontFamily(
								this, 
								characterIndex, 
								characterCount, 
								fontFamily
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetFontSize(
					int characterIndex, 
					int characterCount, 
					float fontSize)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetFontSize(
								this, 
								characterIndex, 
								characterCount, 
								fontSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetFontStretch(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Text.FontStretch fontStretch)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetFontStretch(
								this, 
								characterIndex, 
								characterCount, 
								fontStretch
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetFontStyle(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Text.FontStyle fontStyle)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetFontStyle(
								this, 
								characterIndex, 
								characterCount, 
								fontStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetFontWeight(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Text.FontWeight fontWeight)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetFontWeight(
								this, 
								characterIndex, 
								characterCount, 
								fontWeight
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetLocaleName(
					int characterIndex, 
					int characterCount, 
					string name)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetLocaleName(
								this, 
								characterIndex, 
								characterCount, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetStrikethrough(
					int characterIndex, 
					int characterCount, 
					bool hasStrikethrough)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetStrikethrough(
								this, 
								characterIndex, 
								characterCount, 
								hasStrikethrough
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetUnderline(
					int characterIndex, 
					int characterCount, 
					bool hasUnderline)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetUnderline(
								this, 
								characterIndex, 
								characterCount, 
								hasUnderline
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LayoutBounds")]
		public global::Windows.Foundation.Rect get_LayoutBounds()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_LayoutBounds(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineCount")]
		public int get_LineCount()
		{
			int __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_LineCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawBounds")]
		public global::Windows.Foundation.Rect get_DrawBounds()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_DrawBounds(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HitTest(global::System.Numerics.Vector2 point)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.HitTest(
								this, 
								point
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HitTest(
					float x, 
					float y)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.HitTest(
								this, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HitTest(
					global::System.Numerics.Vector2 point, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.HitTest(
								this, 
								point, 
								out textLayoutRegion
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HitTest(
					float x, 
					float y, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.HitTest(
								this, 
								x, 
								y, 
								out textLayoutRegion
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HitTest(
					global::System.Numerics.Vector2 point, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion, 
					out bool trailingSideOfCharacter)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.HitTest(
								this, 
								point, 
								out textLayoutRegion, 
								out trailingSideOfCharacter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HitTest(
					float x, 
					float y, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion, 
					out bool trailingSideOfCharacter)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.HitTest(
								this, 
								x, 
								y, 
								out textLayoutRegion, 
								out trailingSideOfCharacter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Numerics.Vector2 GetCaretPosition(
					int characterIndex, 
					bool trailingSideOfCharacter)
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetCaretPosition(
								this, 
								characterIndex, 
								trailingSideOfCharacter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Numerics.Vector2 GetCaretPosition(
					int characterIndex, 
					bool trailingSideOfCharacter, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion)
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetCaretPosition(
								this, 
								characterIndex, 
								trailingSideOfCharacter, 
								out textLayoutRegion
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion[] GetCharacterRegions(
					int characterIndex, 
					int characterCount)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetCharacterRegions(
								this, 
								characterIndex, 
								characterCount
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool GetPairKerning(int characterIndex)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetPairKerning(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void SetPairKerning(
					int characterIndex, 
					int characterCount, 
					bool hasPairKerning)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetPairKerning(
								this, 
								characterIndex, 
								characterCount, 
								hasPairKerning
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public float GetLeadingCharacterSpacing(int characterIndex)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetLeadingCharacterSpacing(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float GetTrailingCharacterSpacing(int characterIndex)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetTrailingCharacterSpacing(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float GetMinimumCharacterAdvance(int characterIndex)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.GetMinimumCharacterAdvance(
								this, 
								characterIndex
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void SetCharacterSpacing(
					int characterIndex, 
					int characterCount, 
					float leadingSpacing, 
					float trailingSpacing, 
					float minimumAdvance)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.SetCharacterSpacing(
								this, 
								characterIndex, 
								characterCount, 
								leadingSpacing, 
								trailingSpacing, 
								minimumAdvance
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalGlyphOrientation")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_VerticalGlyphOrientation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalGlyphOrientation")]
		public void put_VerticalGlyphOrientation(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_VerticalGlyphOrientation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OpticalAlignment")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_OpticalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OpticalAlignment")]
		public void put_OpticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_OpticalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LastLineWrapping")]
		public bool get_LastLineWrapping()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_LastLineWrapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LastLineWrapping")]
		public void put_LastLineWrapping(bool value)
		{
			global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.put_LastLineWrapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextLayout__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasTextLayout(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasTextRenderingParameters : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasTextRenderingParameters(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode textRenderingMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit gridFit)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextRenderingParametersFactory_Create(
								"Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters", 
								textRenderingMode, 
								gridFit
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_Text__ICanvasTextRenderingParametersFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode textRenderingMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit gridFit)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory).TypeHandle
												), 
								textRenderingMode, 
								gridFit
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RenderingMode")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode get_RenderingMode()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters__Impl.Stubs.get_RenderingMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GridFit")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit get_GridFit()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters__Impl.Stubs.get_GridFit(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasTextRenderingParameters(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasFontFace : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode GetRecommendedRenderingMode(
					float fontSize, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters renderingParameters)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.GetRecommendedRenderingMode(
								this, 
								fontSize, 
								dpi, 
								measuringMode, 
								renderingParameters
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode GetRecommendedRenderingMode(
					float fontSize, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters renderingParameters, 
					global::System.Numerics.Matrix3x2 transform, 
					bool isSideways, 
					global::Microsoft.Graphics.Canvas.CanvasAntialiasing outlineThreshold)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.GetRecommendedRenderingMode(
								this, 
								fontSize, 
								dpi, 
								measuringMode, 
								renderingParameters, 
								transform, 
								isSideways, 
								outlineThreshold
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit GetRecommendedGridFit(
					float fontSize, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters renderingParameters, 
					global::System.Numerics.Matrix3x2 transform, 
					bool isSideways, 
					global::Microsoft.Graphics.Canvas.CanvasAntialiasing outlineThreshold)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.GetRecommendedGridFit(
								this, 
								fontSize, 
								dpi, 
								measuringMode, 
								renderingParameters, 
								transform, 
								isSideways, 
								outlineThreshold
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GlyphBox")]
		public global::Windows.Foundation.Rect get_GlyphBox()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_GlyphBox(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SubscriptPosition")]
		public global::System.Numerics.Vector2 get_SubscriptPosition()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_SubscriptPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SubscriptSize")]
		public global::Windows.Foundation.Size get_SubscriptSize()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_SubscriptSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SuperscriptPosition")]
		public global::System.Numerics.Vector2 get_SuperscriptPosition()
		{
			global::System.Numerics.Vector2 __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_SuperscriptPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SuperscriptSize")]
		public global::Windows.Foundation.Size get_SuperscriptSize()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_SuperscriptSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasTypographicMetrics")]
		public bool get_HasTypographicMetrics()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_HasTypographicMetrics(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Ascent")]
		public float get_Ascent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_Ascent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Descent")]
		public float get_Descent()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_Descent(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineGap")]
		public float get_LineGap()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_LineGap(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CapHeight")]
		public float get_CapHeight()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_CapHeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LowercaseLetterHeight")]
		public float get_LowercaseLetterHeight()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_LowercaseLetterHeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnderlinePosition")]
		public float get_UnderlinePosition()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_UnderlinePosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnderlineThickness")]
		public float get_UnderlineThickness()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_UnderlineThickness(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StrikethroughPosition")]
		public float get_StrikethroughPosition()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_StrikethroughPosition(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StrikethroughThickness")]
		public float get_StrikethroughThickness()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_StrikethroughThickness(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CaretSlopeRise")]
		public float get_CaretSlopeRise()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_CaretSlopeRise(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CaretSlopeRun")]
		public float get_CaretSlopeRun()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_CaretSlopeRun(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CaretOffset")]
		public float get_CaretOffset()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_CaretOffset(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnicodeRanges")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange[] get_UnicodeRanges()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_UnicodeRanges(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsMonospaced")]
		public bool get_IsMonospaced()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_IsMonospaced(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int[] GetVerticalGlyphVariants(int[] inputElements)
		{
			int[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.GetVerticalGlyphVariants(
								this, 
								inputElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasVerticalGlyphVariants")]
		public bool get_HasVerticalGlyphVariants()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_HasVerticalGlyphVariants(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FileFormatType")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType get_FileFormatType()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_FileFormatType(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Simulations")]
		public global::Microsoft.Graphics.Canvas.Text.CanvasFontSimulations get_Simulations()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontSimulations __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_Simulations(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsSymbolFont")]
		public bool get_IsSymbolFont()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_IsSymbolFont(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GlyphCount")]
		public uint get_GlyphCount()
		{
			uint __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_GlyphCount(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int[] GetGlyphIndices(uint[] inputElements)
		{
			int[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.GetGlyphIndices(
								this, 
								inputElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Weight")]
		public global::Windows.UI.Text.FontWeight get_Weight()
		{
			global::Windows.UI.Text.FontWeight __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_Weight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Stretch")]
		public global::Windows.UI.Text.FontStretch get_Stretch()
		{
			global::Windows.UI.Text.FontStretch __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_Stretch(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Style")]
		public global::Windows.UI.Text.FontStyle get_Style()
		{
			global::Windows.UI.Text.FontStyle __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_Style(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FamilyNames")]
		public global::System.Collections.Generic.IReadOnlyDictionary<string, string> get_FamilyNames()
		{
			global::System.Collections.Generic.IReadOnlyDictionary<string, string> __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_FamilyNames(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FaceNames")]
		public global::System.Collections.Generic.IReadOnlyDictionary<string, string> get_FaceNames()
		{
			global::System.Collections.Generic.IReadOnlyDictionary<string, string> __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.get_FaceNames(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Collections.Generic.IReadOnlyDictionary<string, string> GetInformationalStrings(global::Microsoft.Graphics.Canvas.Text.CanvasFontInformation fontInformation)
		{
			global::System.Collections.Generic.IReadOnlyDictionary<string, string> __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.GetInformationalStrings(
								this, 
								fontInformation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool HasCharacter(uint unicodeValue)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontFace__Impl.Stubs.HasCharacter(
								this, 
								unicodeValue
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasFontFace(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasFontSet : global::System.__ComObject, global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasFontSet()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.Text.CanvasFontSet");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public bool TryFindFontFace(
					global::Microsoft.Graphics.Canvas.Text.CanvasFontFace fontFace, 
					out int index)
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.TryFindFontFace(
								this, 
								fontFace, 
								out index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Fonts")]
		public global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Graphics.Canvas.Text.CanvasFontFace> get_Fonts()
		{
			global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Graphics.Canvas.Text.CanvasFontFace> __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.get_Fonts(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasFontSet GetMatchingFonts(global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] propertyElements)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontSet __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.GetMatchingFonts(
								this, 
								propertyElements
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasFontSet GetMatchingFonts(
					string familyName, 
					global::Windows.UI.Text.FontWeight weight, 
					global::Windows.UI.Text.FontStretch stretch, 
					global::Windows.UI.Text.FontStyle style)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontSet __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.GetMatchingFonts(
								this, 
								familyName, 
								weight, 
								stretch, 
								style
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public uint CountFontsMatchingProperty(global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty property)
		{
			uint __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.CountFontsMatchingProperty(
								this, 
								property
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Collections.Generic.IReadOnlyDictionary<string, string> GetPropertyValues(
					uint fontIndex, 
					global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier propertyIdentifier)
		{
			global::System.Collections.Generic.IReadOnlyDictionary<string, string> __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.GetPropertyValues(
								this, 
								fontIndex, 
								propertyIdentifier
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] GetPropertyValues(
					global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier propertyIdentifier, 
					string preferredLocaleNames)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.GetPropertyValues(
								this, 
								propertyIdentifier, 
								preferredLocaleNames
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] GetPropertyValues(global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier propertyIdentifier)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] __retVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSet__Impl.Stubs.GetPropertyValues(
								this, 
								propertyIdentifier
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SystemFontSet")]
		public static global::Microsoft.Graphics.Canvas.Text.CanvasFontSet get_SystemFontSet()
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontSet retval;
			retval = __Factory_Microsoft_Graphics_Canvas_Text__ICanvasFontSetStatics_get_SystemFontSet("Microsoft.Graphics.Canvas.Text.CanvasFontSet");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Microsoft.Graphics.Canvas.Text.CanvasFontSet __Factory_Microsoft_Graphics_Canvas_Text__ICanvasFontSetStatics_get_SystemFontSet(string typeName)
		{
			global::Microsoft.Graphics.Canvas.Text.CanvasFontSet __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics__Impl.Stubs.get_SystemFontSet(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CanvasFontSet(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasTextFormatStatics
	{
		string[] GetSystemFontFamilies();

		string[] GetSystemFontFamilies(global::System.Collections.Generic.IReadOnlyList<string> localeList);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasTextFormat : global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Direction")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Direction")]
		void put_Direction(global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontFamily")]
		string get_FontFamily();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontFamily")]
		void put_FontFamily(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontSize")]
		float get_FontSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontSize")]
		void put_FontSize(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontStretch")]
		global::Windows.UI.Text.FontStretch get_FontStretch();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontStretch")]
		void put_FontStretch(global::Windows.UI.Text.FontStretch value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontStyle")]
		global::Windows.UI.Text.FontStyle get_FontStyle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontStyle")]
		void put_FontStyle(global::Windows.UI.Text.FontStyle value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontWeight")]
		global::Windows.UI.Text.FontWeight get_FontWeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontWeight")]
		void put_FontWeight(global::Windows.UI.Text.FontWeight value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IncrementalTabStop")]
		float get_IncrementalTabStop();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IncrementalTabStop")]
		void put_IncrementalTabStop(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacing")]
		float get_LineSpacing();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacing")]
		void put_LineSpacing(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingBaseline")]
		float get_LineSpacingBaseline();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingBaseline")]
		void put_LineSpacingBaseline(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LocaleName")]
		string get_LocaleName();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LocaleName")]
		void put_LocaleName(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalAlignment")]
		global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalAlignment")]
		void put_VerticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalAlignment")]
		global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalAlignment")]
		void put_HorizontalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingGranularity")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingGranularity")]
		void put_TrimmingGranularity(global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiter")]
		string get_TrimmingDelimiter();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiter")]
		void put_TrimmingDelimiter(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiterCount")]
		int get_TrimmingDelimiterCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiterCount")]
		void put_TrimmingDelimiterCount(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "WordWrapping")]
		global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "WordWrapping")]
		void put_WordWrapping(global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Options")]
		global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Options")]
		void put_Options(global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalGlyphOrientation")]
		global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalGlyphOrientation")]
		void put_VerticalGlyphOrientation(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OpticalAlignment")]
		global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OpticalAlignment")]
		void put_OpticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LastLineWrapping")]
		bool get_LastLineWrapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LastLineWrapping")]
		void put_LastLineWrapping(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingMode")]
		global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingMode")]
		void put_LineSpacingMode(global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingSign")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingSign")]
		void put_TrimmingSign(global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasTextLayoutFactory
	{
		global::System.IntPtr Create(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					string textString, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextFormat textFormat, 
					float requestedWidth, 
					float requestedHeight);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasTextLayout : global::System.IDisposable
	{
		int[] GetFormatChangeIndices();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Direction")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Direction")]
		void put_Direction(global::Microsoft.Graphics.Canvas.Text.CanvasTextDirection value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontFamily")]
		string get_DefaultFontFamily();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontSize")]
		float get_DefaultFontSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontStretch")]
		global::Windows.UI.Text.FontStretch get_DefaultFontStretch();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontStyle")]
		global::Windows.UI.Text.FontStyle get_DefaultFontStyle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultFontWeight")]
		global::Windows.UI.Text.FontWeight get_DefaultFontWeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IncrementalTabStop")]
		float get_IncrementalTabStop();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IncrementalTabStop")]
		void put_IncrementalTabStop(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacing")]
		float get_LineSpacing();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacing")]
		void put_LineSpacing(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingBaseline")]
		float get_LineSpacingBaseline();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingBaseline")]
		void put_LineSpacingBaseline(float value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultLocaleName")]
		string get_DefaultLocaleName();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalAlignment")]
		global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalAlignment")]
		void put_VerticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalAlignment")]
		global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalAlignment")]
		void put_HorizontalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingGranularity")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingGranularity")]
		void put_TrimmingGranularity(global::Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiter")]
		string get_TrimmingDelimiter();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiter")]
		void put_TrimmingDelimiter(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingDelimiterCount")]
		int get_TrimmingDelimiterCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingDelimiterCount")]
		void put_TrimmingDelimiterCount(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "WordWrapping")]
		global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "WordWrapping")]
		void put_WordWrapping(global::Microsoft.Graphics.Canvas.Text.CanvasWordWrapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Options")]
		global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Options")]
		void put_Options(global::Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineSpacingMode")]
		global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LineSpacingMode")]
		void put_LineSpacingMode(global::Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TrimmingSign")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TrimmingSign")]
		void put_TrimmingSign(global::Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RequestedSize")]
		global::Windows.Foundation.Size get_RequestedSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "RequestedSize")]
		void put_RequestedSize(global::Windows.Foundation.Size value);

		float GetMinimumLineLength();

		global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush GetBrush(int characterIndex);

		string GetFontFamily(int characterIndex);

		float GetFontSize(int characterIndex);

		global::Windows.UI.Text.FontStretch GetFontStretch(int characterIndex);

		global::Windows.UI.Text.FontStyle GetFontStyle(int characterIndex);

		global::Windows.UI.Text.FontWeight GetFontWeight(int characterIndex);

		string GetLocaleName(int characterIndex);

		bool GetStrikethrough(int characterIndex);

		bool GetUnderline(int characterIndex);

		void SetColor(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Color color);

		void SetBrush(
					int characterIndex, 
					int characterCount, 
					global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush brush);

		void SetFontFamily(
					int characterIndex, 
					int characterCount, 
					string fontFamily);

		void SetFontSize(
					int characterIndex, 
					int characterCount, 
					float fontSize);

		void SetFontStretch(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Text.FontStretch fontStretch);

		void SetFontStyle(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Text.FontStyle fontStyle);

		void SetFontWeight(
					int characterIndex, 
					int characterCount, 
					global::Windows.UI.Text.FontWeight fontWeight);

		void SetLocaleName(
					int characterIndex, 
					int characterCount, 
					string name);

		void SetStrikethrough(
					int characterIndex, 
					int characterCount, 
					bool hasStrikethrough);

		void SetUnderline(
					int characterIndex, 
					int characterCount, 
					bool hasUnderline);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LayoutBounds")]
		global::Windows.Foundation.Rect get_LayoutBounds();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineCount")]
		int get_LineCount();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawBounds")]
		global::Windows.Foundation.Rect get_DrawBounds();

		bool HitTest(global::System.Numerics.Vector2 point);

		bool HitTest(
					float x, 
					float y);

		bool HitTest(
					global::System.Numerics.Vector2 point, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion);

		bool HitTest(
					float x, 
					float y, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion);

		bool HitTest(
					global::System.Numerics.Vector2 point, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion, 
					out bool trailingSideOfCharacter);

		bool HitTest(
					float x, 
					float y, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion, 
					out bool trailingSideOfCharacter);

		global::System.Numerics.Vector2 GetCaretPosition(
					int characterIndex, 
					bool trailingSideOfCharacter);

		global::System.Numerics.Vector2 GetCaretPosition(
					int characterIndex, 
					bool trailingSideOfCharacter, 
					out global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion textLayoutRegion);

		global::Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion[] GetCharacterRegions(
					int characterIndex, 
					int characterCount);

		bool GetPairKerning(int characterIndex);

		void SetPairKerning(
					int characterIndex, 
					int characterCount, 
					bool hasPairKerning);

		float GetLeadingCharacterSpacing(int characterIndex);

		float GetTrailingCharacterSpacing(int characterIndex);

		float GetMinimumCharacterAdvance(int characterIndex);

		void SetCharacterSpacing(
					int characterIndex, 
					int characterCount, 
					float leadingSpacing, 
					float trailingSpacing, 
					float minimumAdvance);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalGlyphOrientation")]
		global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalGlyphOrientation")]
		void put_VerticalGlyphOrientation(global::Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OpticalAlignment")]
		global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "OpticalAlignment")]
		void put_OpticalAlignment(global::Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LastLineWrapping")]
		bool get_LastLineWrapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "LastLineWrapping")]
		void put_LastLineWrapping(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasTextRenderingParametersFactory
	{
		global::System.IntPtr Create(
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode textRenderingMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit gridFit);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasTextRenderingParameters
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RenderingMode")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode get_RenderingMode();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GridFit")]
		global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit get_GridFit();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasFontFace : global::System.IDisposable
	{
		global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode GetRecommendedRenderingMode(
					float fontSize, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters renderingParameters);

		global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode GetRecommendedRenderingMode(
					float fontSize, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters renderingParameters, 
					global::System.Numerics.Matrix3x2 transform, 
					bool isSideways, 
					global::Microsoft.Graphics.Canvas.CanvasAntialiasing outlineThreshold);

		global::Microsoft.Graphics.Canvas.Text.CanvasTextGridFit GetRecommendedGridFit(
					float fontSize, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode, 
					global::Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters renderingParameters, 
					global::System.Numerics.Matrix3x2 transform, 
					bool isSideways, 
					global::Microsoft.Graphics.Canvas.CanvasAntialiasing outlineThreshold);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GlyphBox")]
		global::Windows.Foundation.Rect get_GlyphBox();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SubscriptPosition")]
		global::System.Numerics.Vector2 get_SubscriptPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SubscriptSize")]
		global::Windows.Foundation.Size get_SubscriptSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SuperscriptPosition")]
		global::System.Numerics.Vector2 get_SuperscriptPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SuperscriptSize")]
		global::Windows.Foundation.Size get_SuperscriptSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasTypographicMetrics")]
		bool get_HasTypographicMetrics();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Ascent")]
		float get_Ascent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Descent")]
		float get_Descent();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LineGap")]
		float get_LineGap();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CapHeight")]
		float get_CapHeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LowercaseLetterHeight")]
		float get_LowercaseLetterHeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnderlinePosition")]
		float get_UnderlinePosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnderlineThickness")]
		float get_UnderlineThickness();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StrikethroughPosition")]
		float get_StrikethroughPosition();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "StrikethroughThickness")]
		float get_StrikethroughThickness();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CaretSlopeRise")]
		float get_CaretSlopeRise();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CaretSlopeRun")]
		float get_CaretSlopeRun();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CaretOffset")]
		float get_CaretOffset();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnicodeRanges")]
		global::Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange[] get_UnicodeRanges();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsMonospaced")]
		bool get_IsMonospaced();

		int[] GetVerticalGlyphVariants(int[] inputElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasVerticalGlyphVariants")]
		bool get_HasVerticalGlyphVariants();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FileFormatType")]
		global::Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType get_FileFormatType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Simulations")]
		global::Microsoft.Graphics.Canvas.Text.CanvasFontSimulations get_Simulations();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsSymbolFont")]
		bool get_IsSymbolFont();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "GlyphCount")]
		uint get_GlyphCount();

		int[] GetGlyphIndices(uint[] inputElements);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Weight")]
		global::Windows.UI.Text.FontWeight get_Weight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Stretch")]
		global::Windows.UI.Text.FontStretch get_Stretch();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Style")]
		global::Windows.UI.Text.FontStyle get_Style();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FamilyNames")]
		global::System.Collections.Generic.IReadOnlyDictionary<string, string> get_FamilyNames();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FaceNames")]
		global::System.Collections.Generic.IReadOnlyDictionary<string, string> get_FaceNames();

		global::System.Collections.Generic.IReadOnlyDictionary<string, string> GetInformationalStrings(global::Microsoft.Graphics.Canvas.Text.CanvasFontInformation fontInformation);

		bool HasCharacter(uint unicodeValue);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasFontSetStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SystemFontSet")]
		global::Microsoft.Graphics.Canvas.Text.CanvasFontSet get_SystemFontSet();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasFontSet : global::System.IDisposable
	{
		bool TryFindFontFace(
					global::Microsoft.Graphics.Canvas.Text.CanvasFontFace fontFace, 
					out int index);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Fonts")]
		global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Graphics.Canvas.Text.CanvasFontFace> get_Fonts();

		global::Microsoft.Graphics.Canvas.Text.CanvasFontSet GetMatchingFonts(global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] propertyElements);

		global::Microsoft.Graphics.Canvas.Text.CanvasFontSet GetMatchingFonts(
					string familyName, 
					global::Windows.UI.Text.FontWeight weight, 
					global::Windows.UI.Text.FontStretch stretch, 
					global::Windows.UI.Text.FontStyle style);

		uint CountFontsMatchingProperty(global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty property);

		global::System.Collections.Generic.IReadOnlyDictionary<string, string> GetPropertyValues(
					uint fontIndex, 
					global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier propertyIdentifier);

		global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] GetPropertyValues(
					global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier propertyIdentifier, 
					string preferredLocaleNames);

		global::Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] GetPropertyValues(global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier propertyIdentifier);
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTextDirection
	{
		LeftToRightThenTopToBottom = 0,
		RightToLeftThenTopToBottom = 1,
		LeftToRightThenBottomToTop = 2,
		RightToLeftThenBottomToTop = 3,
		TopToBottomThenLeftToRight = 4,
		BottomToTopThenLeftToRight = 5,
		TopToBottomThenRightToLeft = 6,
		BottomToTopThenRightToLeft = 7,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasVerticalAlignment
	{
		Top = 0,
		Bottom = 1,
		Center = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasHorizontalAlignment
	{
		Left = 0,
		Right = 1,
		Center = 2,
		Justified = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTextTrimmingGranularity
	{
		None = 0,
		Character = 1,
		Word = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasWordWrapping
	{
		Wrap = 0,
		NoWrap = 1,
		EmergencyBreak = 2,
		WholeWord = 3,
		Character = 4,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasDrawTextOptions : uint
	{
		Default = 0x0u,
		NoPixelSnap = 0x1u,
		Clip = 0x2u,
		EnableColorFont = 0x4u,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasVerticalGlyphOrientation
	{
		Default = 0,
		Stacked = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasOpticalAlignment
	{
		Default = 0,
		NoSideBearings = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasLineSpacingMode
	{
		Default = 0,
		Uniform = 1,
		Proportional = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTrimmingSign
	{
		None = 0,
		Ellipsis = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasTextLayoutRegion
	{
		public int CharacterIndex;
		public int CharacterCount;
		public global::Windows.Foundation.Rect LayoutBounds;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTextAntialiasing
	{
		Auto = 0,
		ClearType = 1,
		Grayscale = 2,
		Aliased = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTextRenderingMode
	{
		Default = 0,
		Aliased = 1,
		GdiClassic = 2,
		GdiNatural = 3,
		Natural = 4,
		NaturalSymmetric = 5,
		Outline = 6,
		NaturalSymmetricDownsampled = 7,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTextGridFit
	{
		Default = 0,
		Disable = 1,
		Enable = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasTextMeasuringMode
	{
		Natural = 0,
		GdiClassic = 1,
		GdiNatural = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasUnicodeRange
	{
		public uint First;
		public uint Last;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFontFileFormatType
	{
		Cff = 0,
		TrueType = 1,
		TrueTypeCollection = 2,
		Type1 = 3,
		Vector = 4,
		Bitmap = 5,
		Unknown = 6,
		RawCff = 7,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFontSimulations : uint
	{
		None = 0x0u,
		Bold = 0x1u,
		Oblique = 0x2u,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFontInformation
	{
		None = 0,
		CopyrightNotice = 1,
		VersionStrings = 2,
		Trademark = 3,
		Manufacturer = 4,
		Designer = 5,
		DesignerUrl = 6,
		Description = 7,
		FontVendorUrl = 8,
		LicenseDescription = 9,
		LicenseInfoUrl = 10,
		Win32FamilyNames = 11,
		Win32SubfamilyNames = 12,
		PreferredFamilyNames = 13,
		PreferredSubfamilyNames = 14,
		SampleText = 15,
		FullName = 16,
		PostscriptName = 17,
		PostscriptCidName = 18,
		WwsFamilyName = 19,
		DesignScriptLanguageTag = 20,
		SupportedScriptLanguageTag = 21,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasFontProperty
	{
		public global::Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier Identifier;
		public string Value;
		public string Locale;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasFontPropertyIdentifier
	{
		None = 0,
		FamilyName = 1,
		PreferredFamilyName = 2,
		FaceName = 3,
		FullName = 4,
		Win32FamilyName = 5,
		PostscriptName = 6,
		DesignScriptLanguageTag = 7,
		SupportedScriptLanguageTag = 8,
		SemanticTag = 9,
		Weight = 10,
		Stretch = 11,
		Style = 12,
		Total = 13,
	}
}

namespace Microsoft.Graphics.Canvas.UI
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasCreateResourcesEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasCreateResourcesEventArgs(global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason createResourcesReason)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI__ICanvasCreateResourcesEventArgsFactory_Create(
								"Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs", 
								createResourcesReason
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI__ICanvasCreateResourcesEventArgsFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason createResourcesReason)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory).TypeHandle
												), 
								createResourcesReason
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Reason")]
		public global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason get_Reason()
		{
			global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason __retVal = global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs__Impl.Stubs.get_Reason(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void TrackAsyncAction(global::Windows.Foundation.IAsyncAction action)
		{
			global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs__Impl.Stubs.TrackAsyncAction(
								this, 
								action
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Foundation.IAsyncAction GetTrackedAction()
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs__Impl.Stubs.GetTrackedAction(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasCreateResourcesEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasCreateResourcesEventArgsFactory
	{
		global::System.IntPtr Create(global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason createResourcesReason);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasCreateResourcesEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Reason")]
		global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason get_Reason();

		void TrackAsyncAction(global::Windows.Foundation.IAsyncAction action);

		global::Windows.Foundation.IAsyncAction GetTrackedAction();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public enum CanvasCreateResourcesReason
	{
		FirstTime = 0,
		NewDevice = 1,
		DpiChanged = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe struct CanvasTimingInformation
	{
		public long UpdateCount;
		public global::System.TimeSpan TotalTime;
		public global::System.TimeSpan ElapsedTime;
		public bool IsRunningSlowly;
	}
}

namespace Microsoft.Graphics.Canvas.UI.Xaml
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasControl : global::Windows.UI.Xaml.Controls.UserControl, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl, global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasControl() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CreateResources")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CreateResources(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.add_CreateResources(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CreateResources")]
		public void remove_CreateResources(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.remove_CreateResources(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ReadyToDraw")]
		public bool get_ReadyToDraw()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_ReadyToDraw(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Draw")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Draw(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.add_Draw(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Draw")]
		public void remove_Draw(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.remove_Draw(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClearColor")]
		public void put_ClearColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.put_ClearColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClearColor")]
		public global::Windows.UI.Color get_ClearColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_ClearColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void Invalidate()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.Invalidate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void RemoveFromVisualTree()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.RemoveFromVisualTree(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UseSharedDevice")]
		public bool get_UseSharedDevice()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_UseSharedDevice(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "UseSharedDevice")]
		public void put_UseSharedDevice(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.put_UseSharedDevice(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		public bool get_ForceSoftwareRenderer()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_ForceSoftwareRenderer(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ForceSoftwareRenderer")]
		public void put_ForceSoftwareRenderer(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.put_ForceSoftwareRenderer(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDevice")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_CustomDevice(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDevice")]
		public void put_CustomDevice(global::Microsoft.Graphics.Canvas.CanvasDevice value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.put_CustomDevice(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DpiScale")]
		public float get_DpiScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.get_DpiScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DpiScale")]
		public void put_DpiScale(float ratio)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl__Impl.Stubs.put_DpiScale(
								this, 
								ratio
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreator__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasControl(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasDrawEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasDrawEventArgs(global::Microsoft.Graphics.Canvas.CanvasDrawingSession canvasDrawingSession)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasDrawEventArgsFactory_Create(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs", 
								canvasDrawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasDrawEventArgsFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession canvasDrawingSession)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory).TypeHandle
												), 
								canvasDrawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawingSession")]
		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession()
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs__Impl.Stubs.get_DrawingSession(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasDrawEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasImageSource : global::Windows.UI.Xaml.Media.Imaging.SurfaceImageSource, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithSize(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource", 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithSize(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory__Impl.Stubs.CreateWithSize(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithWidthAndHeight(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource", 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithWidthAndHeight(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory__Impl.Stubs.CreateWithWidthAndHeight(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpi(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource", 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpi(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpi(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource", 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpiAndAlphaMode(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(global::Windows.UI.Color clearColor)
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.CreateDrawingSession(
								this, 
								clearColor
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(
					global::Windows.UI.Color clearColor, 
					global::Windows.Foundation.Rect updateRectangle)
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.CreateDrawingSession(
								this, 
								clearColor, 
								updateRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void Recreate(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.Recreate(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		public global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels()
		{
			global::Windows.Graphics.Imaging.BitmapSize __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.get_SizeInPixels(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasImageSource(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasAnimatedUpdateEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasAnimatedUpdateEventArgs(global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation timingInformation)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasAnimatedUpdateEventArgsFactory_Create(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs", 
								timingInformation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasAnimatedUpdateEventArgsFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation timingInformation)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory).TypeHandle
												), 
								timingInformation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Timing")]
		public global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation get_Timing()
		{
			global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs__Impl.Stubs.get_Timing(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasAnimatedUpdateEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasAnimatedDrawEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasAnimatedDrawEventArgs(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession canvasDrawingSession, 
					global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation timingInformation)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasAnimatedDrawEventArgsFactory_Create(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs", 
								canvasDrawingSession, 
								timingInformation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasAnimatedDrawEventArgsFactory_Create(
					string typeName, 
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession canvasDrawingSession, 
					global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation timingInformation)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory__Impl.Stubs.Create(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory).TypeHandle
												), 
								canvasDrawingSession, 
								timingInformation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawingSession")]
		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession()
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs__Impl.Stubs.get_DrawingSession(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Timing")]
		public global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation get_Timing()
		{
			global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs__Impl.Stubs.get_Timing(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasAnimatedDrawEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasAnimatedControl : global::Windows.UI.Xaml.Controls.UserControl, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasAnimatedControl() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CreateResources")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CreateResources(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl, global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.add_CreateResources(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CreateResources")]
		public void remove_CreateResources(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.remove_CreateResources(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Update")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Update(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.add_Update(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Update")]
		public void remove_Update(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.remove_Update(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Draw")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Draw(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.add_Draw(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Draw")]
		public void remove_Draw(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.remove_Draw(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GameLoopStarting")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GameLoopStarting(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, object> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.add_GameLoopStarting(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GameLoopStarting")]
		public void remove_GameLoopStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.remove_GameLoopStarting(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GameLoopStopped")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GameLoopStopped(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, object> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.add_GameLoopStopped(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GameLoopStopped")]
		public void remove_GameLoopStopped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.remove_GameLoopStopped(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ReadyToDraw")]
		public bool get_ReadyToDraw()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_ReadyToDraw(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IsFixedTimeStep")]
		public void put_IsFixedTimeStep(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_IsFixedTimeStep(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsFixedTimeStep")]
		public bool get_IsFixedTimeStep()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_IsFixedTimeStep(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TargetElapsedTime")]
		public void put_TargetElapsedTime(global::System.TimeSpan value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_TargetElapsedTime(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TargetElapsedTime")]
		public global::System.TimeSpan get_TargetElapsedTime()
		{
			global::System.TimeSpan __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_TargetElapsedTime(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Paused")]
		public void put_Paused(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_Paused(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Paused")]
		public bool get_Paused()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_Paused(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClearColor")]
		public void put_ClearColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_ClearColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClearColor")]
		public global::Windows.UI.Color get_ClearColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_ClearColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void Invalidate()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.Invalidate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResetElapsedTime()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.ResetElapsedTime(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.UI.Core.CoreIndependentInputSource CreateCoreIndependentInputSource(global::Windows.UI.Core.CoreInputDeviceTypes deviceTypes)
		{
			global::Windows.UI.Core.CoreIndependentInputSource __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.CreateCoreIndependentInputSource(
								this, 
								deviceTypes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void RemoveFromVisualTree()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.RemoveFromVisualTree(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasGameLoopThreadAccess")]
		public bool get_HasGameLoopThreadAccess()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_HasGameLoopThreadAccess(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction RunOnGameLoopThreadAsync(global::Windows.UI.Core.DispatchedHandler agileCallback)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.RunOnGameLoopThreadAsync(
								this, 
								agileCallback
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UseSharedDevice")]
		public bool get_UseSharedDevice()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_UseSharedDevice(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "UseSharedDevice")]
		public void put_UseSharedDevice(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_UseSharedDevice(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		public bool get_ForceSoftwareRenderer()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_ForceSoftwareRenderer(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ForceSoftwareRenderer")]
		public void put_ForceSoftwareRenderer(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_ForceSoftwareRenderer(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDevice")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_CustomDevice(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDevice")]
		public void put_CustomDevice(global::Microsoft.Graphics.Canvas.CanvasDevice value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_CustomDevice(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DpiScale")]
		public float get_DpiScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.get_DpiScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DpiScale")]
		public void put_DpiScale(float ratio)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl__Impl.Stubs.put_DpiScale(
								this, 
								ratio
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreator__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasAnimatedControl(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasSwapChainPanel : global::Windows.UI.Xaml.Controls.SwapChainPanel, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasSwapChainPanel() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SwapChain")]
		public void put_SwapChain(global::Microsoft.Graphics.Canvas.CanvasSwapChain value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel__Impl.Stubs.put_SwapChain(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SwapChain")]
		public global::Microsoft.Graphics.Canvas.CanvasSwapChain get_SwapChain()
		{
			global::Microsoft.Graphics.Canvas.CanvasSwapChain __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel__Impl.Stubs.get_SwapChain(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void RemoveFromVisualTree()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel__Impl.Stubs.RemoveFromVisualTree(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CanvasSwapChainPanel(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasVirtualImageSource : global::System.__ComObject, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasVirtualImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithSize(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource", 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithSize(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory__Impl.Stubs.CreateWithSize(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasVirtualImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithWidthAndHeight(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource", 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithWidthAndHeight(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory__Impl.Stubs.CreateWithWidthAndHeight(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasVirtualImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpi(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource", 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpi(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpi(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasVirtualImageSource(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr retval;
			retval = __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(
								"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource", 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Microsoft_Graphics_Canvas_UI_Xaml__ICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(
					string typeName, 
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory__Impl.Stubs.CreateWithWidthAndHeightAndDpiAndAlphaMode(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory).TypeHandle
												), 
								resourceCreator, 
								width, 
								height, 
								dpi, 
								alphaMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		public global::Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource get_Source()
		{
			global::Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.get_Source(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(
					global::Windows.UI.Color clearColor, 
					global::Windows.Foundation.Rect updateRectangle)
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.CreateDrawingSession(
								this, 
								clearColor, 
								updateRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void SuspendDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.SuspendDrawingSession(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResumeDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.ResumeDrawingSession(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Invalidate()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.Invalidate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Invalidate(global::Windows.Foundation.Rect region)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.Invalidate(
								this, 
								region
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void RaiseRegionsInvalidatedIfAny()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.RaiseRegionsInvalidatedIfAny(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RegionsInvalidated")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RegionsInvalidated(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.add_RegionsInvalidated(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RegionsInvalidated")]
		public void remove_RegionsInvalidated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.remove_RegionsInvalidated(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Resize(global::Windows.Foundation.Size size)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.Resize(
								this, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Resize(
					float width, 
					float height)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.Resize(
								this, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Resize(
					float width, 
					float height, 
					float dpi)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.Resize(
								this, 
								width, 
								height, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void Recreate(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.Recreate(
								this, 
								resourceCreator
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		public global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels()
		{
			global::Windows.Graphics.Imaging.BitmapSize __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.get_SizeInPixels(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		public global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
		{
			global::Microsoft.Graphics.Canvas.CanvasAlphaMode __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource__Impl.Stubs.get_AlphaMode(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasVirtualImageSource(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasRegionsInvalidatedEventArgs : global::System.__ComObject, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasRegionsInvalidatedEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InvalidatedRegions")]
		public global::Windows.Foundation.Rect[] get_InvalidatedRegions()
		{
			global::Windows.Foundation.Rect[] __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs__Impl.Stubs.get_InvalidatedRegions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VisibleRegion")]
		public global::Windows.Foundation.Rect get_VisibleRegion()
		{
			global::Windows.Foundation.Rect __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs__Impl.Stubs.get_VisibleRegion(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasRegionsInvalidatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(167772160)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe sealed class CanvasVirtualControl : global::Windows.UI.Xaml.Controls.UserControl, global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl, global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public CanvasVirtualControl() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CreateResources")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CreateResources(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.add_CreateResources(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CreateResources")]
		public void remove_CreateResources(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.remove_CreateResources(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ReadyToDraw")]
		public bool get_ReadyToDraw()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_ReadyToDraw(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RegionsInvalidated")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RegionsInvalidated(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs> value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.add_RegionsInvalidated(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RegionsInvalidated")]
		public void remove_RegionsInvalidated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.remove_RegionsInvalidated(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClearColor")]
		public void put_ClearColor(global::Windows.UI.Color value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.put_ClearColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClearColor")]
		public global::Windows.UI.Color get_ClearColor()
		{
			global::Windows.UI.Color __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_ClearColor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(global::Windows.Foundation.Rect updateRectangle)
		{
			global::Microsoft.Graphics.Canvas.CanvasDrawingSession __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.CreateDrawingSession(
								this, 
								updateRectangle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void SuspendDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.SuspendDrawingSession(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void ResumeDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.ResumeDrawingSession(
								this, 
								drawingSession
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Invalidate()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.Invalidate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Invalidate(global::Windows.Foundation.Rect region)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.Invalidate(
								this, 
								region
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public global::Windows.Foundation.Size get_Size()
		{
			global::Windows.Foundation.Size __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void RemoveFromVisualTree()
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.RemoveFromVisualTree(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UseSharedDevice")]
		public bool get_UseSharedDevice()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_UseSharedDevice(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "UseSharedDevice")]
		public void put_UseSharedDevice(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.put_UseSharedDevice(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		public bool get_ForceSoftwareRenderer()
		{
			bool __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_ForceSoftwareRenderer(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ForceSoftwareRenderer")]
		public void put_ForceSoftwareRenderer(bool value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.put_ForceSoftwareRenderer(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDevice")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_CustomDevice(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDevice")]
		public void put_CustomDevice(global::Microsoft.Graphics.Canvas.CanvasDevice value)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.put_CustomDevice(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DpiScale")]
		public float get_DpiScale()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.get_DpiScale(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DpiScale")]
		public void put_DpiScale(float ratio)
		{
			global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl__Impl.Stubs.put_DpiScale(
								this, 
								ratio
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		public float get_Dpi()
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.get_Dpi(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public float ConvertPixelsToDips(int pixels)
		{
			float __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertPixelsToDips(
								this, 
								pixels
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding)
		{
			int __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi__Impl.Stubs.ConvertDipsToPixels(
								this, 
								dips, 
								dpiRounding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		public global::Microsoft.Graphics.Canvas.CanvasDevice get_Device()
		{
			global::Microsoft.Graphics.Canvas.CanvasDevice __retVal = global::Microsoft.Graphics.Canvas.ICanvasResourceCreator__Impl.Stubs.get_Device(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CanvasVirtualControl(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasControl : global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CreateResources")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CreateResources(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CreateResources")]
		void remove_CreateResources(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ReadyToDraw")]
		bool get_ReadyToDraw();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Draw")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Draw(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Draw")]
		void remove_Draw(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClearColor")]
		void put_ClearColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClearColor")]
		global::Windows.UI.Color get_ClearColor();

		void Invalidate();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		void RemoveFromVisualTree();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UseSharedDevice")]
		bool get_UseSharedDevice();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "UseSharedDevice")]
		void put_UseSharedDevice(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		bool get_ForceSoftwareRenderer();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ForceSoftwareRenderer")]
		void put_ForceSoftwareRenderer(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDevice")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDevice")]
		void put_CustomDevice(global::Microsoft.Graphics.Canvas.CanvasDevice value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DpiScale")]
		float get_DpiScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DpiScale")]
		void put_DpiScale(float ratio);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasDrawEventArgsFactory
	{
		global::System.IntPtr Create(global::Microsoft.Graphics.Canvas.CanvasDrawingSession canvasDrawingSession);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasDrawEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawingSession")]
		global::Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasImageSourceFactory
	{
		global::System.IntPtr CreateWithSize(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size);

		global::System.IntPtr CreateWithWidthAndHeight(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height);

		global::System.IntPtr CreateWithWidthAndHeightAndDpi(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi);

		global::System.IntPtr CreateWithWidthAndHeightAndDpiAndAlphaMode(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasImageSource
	{
		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(global::Windows.UI.Color clearColor);

		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(
					global::Windows.UI.Color clearColor, 
					global::Windows.Foundation.Rect updateRectangle);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();

		void Recreate(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		float get_Dpi();

		float ConvertPixelsToDips(int pixels);

		int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasAnimatedUpdateEventArgsFactory
	{
		global::System.IntPtr Create(global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation timingInformation);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasAnimatedUpdateEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Timing")]
		global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation get_Timing();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasAnimatedDrawEventArgsFactory
	{
		global::System.IntPtr Create(
					global::Microsoft.Graphics.Canvas.CanvasDrawingSession canvasDrawingSession, 
					global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation timingInformation);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasAnimatedDrawEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DrawingSession")]
		global::Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Timing")]
		global::Microsoft.Graphics.Canvas.UI.CanvasTimingInformation get_Timing();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasAnimatedControl : global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CreateResources")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CreateResources(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl, global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CreateResources")]
		void remove_CreateResources(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Update")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Update(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Update")]
		void remove_Update(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Draw")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Draw(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Draw")]
		void remove_Draw(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GameLoopStarting")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GameLoopStarting(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, object> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GameLoopStarting")]
		void remove_GameLoopStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GameLoopStopped")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GameLoopStopped(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, object> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GameLoopStopped")]
		void remove_GameLoopStopped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ReadyToDraw")]
		bool get_ReadyToDraw();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IsFixedTimeStep")]
		void put_IsFixedTimeStep(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsFixedTimeStep")]
		bool get_IsFixedTimeStep();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TargetElapsedTime")]
		void put_TargetElapsedTime(global::System.TimeSpan value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TargetElapsedTime")]
		global::System.TimeSpan get_TargetElapsedTime();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Paused")]
		void put_Paused(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Paused")]
		bool get_Paused();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClearColor")]
		void put_ClearColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClearColor")]
		global::Windows.UI.Color get_ClearColor();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		void Invalidate();

		void ResetElapsedTime();

		global::Windows.UI.Core.CoreIndependentInputSource CreateCoreIndependentInputSource(global::Windows.UI.Core.CoreInputDeviceTypes deviceTypes);

		void RemoveFromVisualTree();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasGameLoopThreadAccess")]
		bool get_HasGameLoopThreadAccess();

		global::Windows.Foundation.IAsyncAction RunOnGameLoopThreadAsync(global::Windows.UI.Core.DispatchedHandler agileCallback);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UseSharedDevice")]
		bool get_UseSharedDevice();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "UseSharedDevice")]
		void put_UseSharedDevice(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		bool get_ForceSoftwareRenderer();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ForceSoftwareRenderer")]
		void put_ForceSoftwareRenderer(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDevice")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDevice")]
		void put_CustomDevice(global::Microsoft.Graphics.Canvas.CanvasDevice value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DpiScale")]
		float get_DpiScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DpiScale")]
		void put_DpiScale(float ratio);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasSwapChainPanel
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SwapChain")]
		void put_SwapChain(global::Microsoft.Graphics.Canvas.CanvasSwapChain value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SwapChain")]
		global::Microsoft.Graphics.Canvas.CanvasSwapChain get_SwapChain();

		void RemoveFromVisualTree();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasVirtualImageSourceFactory
	{
		global::System.IntPtr CreateWithSize(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					global::Windows.Foundation.Size size);

		global::System.IntPtr CreateWithWidthAndHeight(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi resourceCreator, 
					float width, 
					float height);

		global::System.IntPtr CreateWithWidthAndHeightAndDpi(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi);

		global::System.IntPtr CreateWithWidthAndHeightAndDpiAndAlphaMode(
					global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator, 
					float width, 
					float height, 
					float dpi, 
					global::Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasVirtualImageSource
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Source")]
		global::Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource get_Source();

		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(
					global::Windows.UI.Color clearColor, 
					global::Windows.Foundation.Rect updateRectangle);

		void SuspendDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession);

		void ResumeDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession);

		void Invalidate();

		void Invalidate(global::Windows.Foundation.Rect region);

		void RaiseRegionsInvalidatedIfAny();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RegionsInvalidated")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RegionsInvalidated(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RegionsInvalidated")]
		void remove_RegionsInvalidated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		void Resize(global::Windows.Foundation.Size size);

		void Resize(
					float width, 
					float height);

		void Resize(
					float width, 
					float height, 
					float dpi);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Device")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_Device();

		void Recreate(global::Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dpi")]
		float get_Dpi();

		float ConvertPixelsToDips(int pixels);

		int ConvertDipsToPixels(
					float dips, 
					global::Microsoft.Graphics.Canvas.CanvasDpiRounding dpiRounding);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SizeInPixels")]
		global::Windows.Graphics.Imaging.BitmapSize get_SizeInPixels();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AlphaMode")]
		global::Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasRegionsInvalidatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InvalidatedRegions")]
		global::Windows.Foundation.Rect[] get_InvalidatedRegions();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VisibleRegion")]
		global::Windows.Foundation.Rect get_VisibleRegion();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Microsoft.Graphics.Canvas, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRun" +
		"time")]
	public unsafe interface ICanvasVirtualControl : global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, global::Microsoft.Graphics.Canvas.ICanvasResourceCreator
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CreateResources")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CreateResources(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, global::Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CreateResources")]
		void remove_CreateResources(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ReadyToDraw")]
		bool get_ReadyToDraw();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RegionsInvalidated")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RegionsInvalidated(global::Windows.Foundation.TypedEventHandler<global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs> value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RegionsInvalidated")]
		void remove_RegionsInvalidated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ClearColor")]
		void put_ClearColor(global::Windows.UI.Color value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClearColor")]
		global::Windows.UI.Color get_ClearColor();

		global::Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(global::Windows.Foundation.Rect updateRectangle);

		void SuspendDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession);

		void ResumeDrawingSession(global::Microsoft.Graphics.Canvas.CanvasDrawingSession drawingSession);

		void Invalidate();

		void Invalidate(global::Windows.Foundation.Rect region);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		global::Windows.Foundation.Size get_Size();

		void RemoveFromVisualTree();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UseSharedDevice")]
		bool get_UseSharedDevice();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "UseSharedDevice")]
		void put_UseSharedDevice(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ForceSoftwareRenderer")]
		bool get_ForceSoftwareRenderer();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ForceSoftwareRenderer")]
		void put_ForceSoftwareRenderer(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CustomDevice")]
		global::Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "CustomDevice")]
		void put_CustomDevice(global::Microsoft.Graphics.Canvas.CanvasDevice value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DpiScale")]
		float get_DpiScale();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DpiScale")]
		void put_DpiScale(float ratio);
	}
}

namespace Microsoft.Win32.SafeHandles
{
	[global::System.Runtime.InteropServices.McgRedirectedType("Microsoft.Win32.SafeHandles.SafePasswordHandle,System.Security.Cryptography.X509Certificates, Version=4.2.1.0, C" +
		"ulture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafePasswordHandle__System_Security_Cryptography_X509Certificates : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafePasswordHandle__System_Security_Cryptography_X509Certificates() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle,System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=" +
		"neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafeNCryptProviderHandle__System_Security_Cryptography_Cng : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeNCryptProviderHandle__System_Security_Cryptography_Cng() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutr" +
		"al, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe class SafeNCryptKeyHandle__System_Security_Cryptography_Cng : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeNCryptKeyHandle__System_Security_Cryptography_Cng() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}
}

namespace System.Net.Sockets
{
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Net.Sockets.SafeCloseSocket,System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f" +
		"11d50a3a")]
	public unsafe class SafeCloseSocket__System_Net_Sockets : global::System.Runtime.InteropServices.SafeHandle
	{
		public SafeCloseSocket__System_Net_Sockets() : 
				base(default(global::System.IntPtr), false)
		{
		}

		public override bool IsInvalid
		{
			get
			{
				return false;
			}
		}

		protected override bool ReleaseHandle()
		{
			return false;
		}
	}
}

namespace System_Net_Sockets
{
	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Net.Sockets.SocketFlags,System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d5" +
		"0a3a")]
	public enum SocketFlags__System_Net_Sockets
	{
		None = 0,
		OutOfBand = 1,
		Peek = 2,
		DontRoute = 4,
		Truncated = 256,
		ControlDataTruncated = 512,
		Broadcast = 1024,
		Multicast = 2048,
		Partial = 32768,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Net.Sockets.SocketError,System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f1" +
		"1d50a3a")]
	public enum SocketError__System_Net_Primitives
	{
		SocketError = -1,
		Success = 0,
		OperationAborted = 995,
		IOPending = 997,
		Interrupted = 10004,
		AccessDenied = 10013,
		Fault = 10014,
		InvalidArgument = 10022,
		TooManyOpenSockets = 10024,
		WouldBlock = 10035,
		InProgress = 10036,
		AlreadyInProgress = 10037,
		NotSocket = 10038,
		DestinationAddressRequired = 10039,
		MessageSize = 10040,
		ProtocolType = 10041,
		ProtocolOption = 10042,
		ProtocolNotSupported = 10043,
		SocketNotSupported = 10044,
		OperationNotSupported = 10045,
		ProtocolFamilyNotSupported = 10046,
		AddressFamilyNotSupported = 10047,
		AddressAlreadyInUse = 10048,
		AddressNotAvailable = 10049,
		NetworkDown = 10050,
		NetworkUnreachable = 10051,
		NetworkReset = 10052,
		ConnectionAborted = 10053,
		ConnectionReset = 10054,
		NoBufferSpaceAvailable = 10055,
		IsConnected = 10056,
		NotConnected = 10057,
		Shutdown = 10058,
		TimedOut = 10060,
		ConnectionRefused = 10061,
		HostDown = 10064,
		HostUnreachable = 10065,
		ProcessLimit = 10067,
		SystemNotReady = 10091,
		VersionNotSupported = 10092,
		NotInitialized = 10093,
		Disconnecting = 10101,
		TypeNotFound = 10109,
		HostNotFound = 11001,
		TryAgain = 11002,
		NoRecovery = 11003,
		NoData = 11004,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Net.Sockets.SocketOptionLevel,System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f" +
		"7f11d50a3a")]
	public enum SocketOptionLevel__System_Net_Sockets
	{
		IP = 0,
		Tcp = 6,
		Udp = 17,
		IPv6 = 41,
		Socket = 65535,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Net.Sockets.SocketOptionName,System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7" +
		"f11d50a3a")]
	public enum SocketOptionName__System_Net_Sockets
	{
		DontLinger = -129,
		ExclusiveAddressUse = -5,
		Debug = 1,
		IPOptions = 1,
		NoDelay = 1,
		NoChecksum = 1,
		AcceptConnection = 2,
		HeaderIncluded = 2,
		BsdUrgent = 2,
		Expedited = 2,
		TypeOfService = 3,
		ReuseAddress = 4,
		IpTimeToLive = 4,
		KeepAlive = 8,
		MulticastInterface = 9,
		MulticastTimeToLive = 10,
		MulticastLoopback = 11,
		AddMembership = 12,
		DropMembership = 13,
		DontFragment = 14,
		AddSourceMembership = 15,
		DontRoute = 16,
		DropSourceMembership = 16,
		BlockSource = 17,
		UnblockSource = 18,
		PacketInformation = 19,
		ChecksumCoverage = 20,
		HopLimit = 21,
		IPProtectionLevel = 23,
		IPv6Only = 27,
		Broadcast = 32,
		UseLoopback = 64,
		Linger = 128,
		OutOfBandInline = 256,
		SendBuffer = 4097,
		ReceiveBuffer = 4098,
		SendLowWater = 4099,
		ReceiveLowWater = 4100,
		SendTimeout = 4101,
		ReceiveTimeout = 4102,
		Error = 4103,
		Type = 4104,
		ReuseUnicastPort = 12295,
		UpdateAcceptContext = 28683,
		UpdateConnectContext = 28688,
		MaxConnections = 2147483647,
	}
}

namespace System_Runtime_InteropServices
{
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.IClassFactory,System.Private.Interop, Version=999.999.999.999, Culture=neutral, P" +
		"ublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe interface IClassFactory__System_Private_Interop
	{
		int CreateInstance(
					global::System.IntPtr pUnkOuter, 
					global::System.Guid* riid, 
					global::System.IntPtr* ppvObject);

		int LockServer(int fLock);
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Public" +
		"KeyToken=b77a5c561934e089")]
	public unsafe interface IMarshal__System_Runtime_WindowsRuntime
	{
		void GetUnmarshalClass(
					ref global::System.Guid riid, 
					global::System.IntPtr pv, 
					uint dwDestContext, 
					global::System.IntPtr pvDestContext, 
					uint mshlFlags, 
					out global::System.Guid pCid);

		void GetMarshalSizeMax(
					ref global::System.Guid riid, 
					global::System.IntPtr pv, 
					uint dwDestContext, 
					global::System.IntPtr pvDestContext, 
					uint mshlflags, 
					out uint pSize);

		void MarshalInterface(
					global::System.IntPtr pStm, 
					ref global::System.Guid riid, 
					global::System.IntPtr pv, 
					uint dwDestContext, 
					global::System.IntPtr pvDestContext, 
					uint mshlflags);

		void UnmarshalInterface(
					global::System.IntPtr pStm, 
					ref global::System.Guid riid, 
					out global::System.IntPtr ppv);

		void ReleaseMarshalData(global::System.IntPtr pStm);

		void DisconnectObject(uint dwReserved);
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.IAgileObject,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Pu" +
		"blicKeyToken=b77a5c561934e089")]
	public unsafe interface IAgileObject__System_Runtime_WindowsRuntime
	{
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ClassFactory,System.Private.Interop, Version=999.999.999.999, Culture=neutral, Pu" +
		"blicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial class ClassFactory__System_Private_Interop
	{
	}

	[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit, Size=24)]
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.HSTRING_HEADER,System.Private.Interop, Version=999.999.999.999, Culture=neutral, " +
		"PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct HSTRING_HEADER__System_Private_Interop
	{
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.HSTRING,System.Private.Interop, Version=999.999.999.999, Culture=neutral, PublicK" +
		"eyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct HSTRING__System_Private_Interop
	{
		public global::System.IntPtr handle;
	}
}

namespace System_Runtime_InteropServices_ComTypes
{
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.ITypeInfo,System.Private.Interop, Version=999.999.999.999, Culture=neutr" +
		"al, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe interface ITypeInfo__System_Private_Interop
	{
		void GetTypeAttr(out global::System.IntPtr ppTypeAttr);

		void GetTypeComp(out global::System_Runtime_InteropServices_ComTypes.ITypeComp__System_Private_Interop ppTComp);

		void GetFuncDesc(
					int index, 
					out global::System.IntPtr ppFuncDesc);

		void GetVarDesc(
					int index, 
					out global::System.IntPtr ppVarDesc);

		void GetNames(
					int memid, 
					string[] rgBstrNames, 
					int cMaxNames, 
					out int pcNames);

		void GetRefTypeOfImplType(
					int index, 
					out int href);

		void GetImplTypeFlags(
					int index, 
					out global::System_Runtime_InteropServices_ComTypes.IMPLTYPEFLAGS__System_Private_Interop pImplTypeFlags);

		void GetIDsOfNames(
					string[] rgszNames, 
					int cNames, 
					int[] pMemId);

		void Invoke(
					object pvInstance, 
					int memid, 
					short wFlags, 
					ref global::System_Runtime_InteropServices_ComTypes.DISPPARAMS__System_Private_Interop pDispParams, 
					global::System.IntPtr pVarResult, 
					global::System.IntPtr pExcepInfo, 
					out int puArgErr);

		void GetDocumentation(
					int index, 
					out string strName, 
					out string strDocString, 
					out int dwHelpContext, 
					out string strHelpFile);

		void GetDllEntry(
					int memid, 
					global::System_Runtime_InteropServices_ComTypes.INVOKEKIND__System_Private_Interop invKind, 
					global::System.IntPtr pBstrDllName, 
					global::System.IntPtr pBstrName, 
					global::System.IntPtr pwOrdinal);

		void GetRefTypeInfo(
					int hRef, 
					out global::System_Runtime_InteropServices_ComTypes.ITypeInfo__System_Private_Interop ppTI);

		void AddressOfMember(
					int memid, 
					global::System_Runtime_InteropServices_ComTypes.INVOKEKIND__System_Private_Interop invKind, 
					out global::System.IntPtr ppv);

		void CreateInstance(
					object pUnkOuter, 
					ref global::System.Guid riid, 
					out object ppvObj);

		void GetMops(
					int memid, 
					out string pBstrMops);

		void GetContainingTypeLib(
					out global::System_Runtime_InteropServices_ComTypes.ITypeLib__System_Private_Interop ppTLB, 
					out int pIndex);

		void ReleaseTypeAttr(global::System.IntPtr pTypeAttr);

		void ReleaseFuncDesc(global::System.IntPtr pFuncDesc);

		void ReleaseVarDesc(global::System.IntPtr pVarDesc);
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.ITypeComp,System.Private.Interop, Version=999.999.999.999, Culture=neutr" +
		"al, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe interface ITypeComp__System_Private_Interop
	{
		void Bind(
					string szName, 
					int lHashVal, 
					short wFlags, 
					out global::System_Runtime_InteropServices_ComTypes.ITypeInfo__System_Private_Interop ppTInfo, 
					out global::System_Runtime_InteropServices_ComTypes.DESCKIND__System_Private_Interop pDescKind, 
					out global::System_Runtime_InteropServices_ComTypes.BINDPTR__System_Private_Interop pBindPtr);

		void BindType(
					string szName, 
					int lHashVal, 
					out global::System_Runtime_InteropServices_ComTypes.ITypeInfo__System_Private_Interop ppTInfo, 
					out global::System_Runtime_InteropServices_ComTypes.ITypeComp__System_Private_Interop ppTComp);
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.ITypeLib,System.Private.Interop, Version=999.999.999.999, Culture=neutra" +
		"l, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe interface ITypeLib__System_Private_Interop
	{
		int GetTypeInfoCount();

		void GetTypeInfo(
					int index, 
					out global::System_Runtime_InteropServices_ComTypes.ITypeInfo__System_Private_Interop ppTI);

		void GetTypeInfoType(
					int index, 
					out global::System_Runtime_InteropServices_ComTypes.TYPEKIND__System_Private_Interop pTKind);

		void GetTypeInfoOfGuid(
					ref global::System.Guid guid, 
					out global::System_Runtime_InteropServices_ComTypes.ITypeInfo__System_Private_Interop ppTInfo);

		void GetLibAttr(out global::System.IntPtr ppTLibAttr);

		void GetTypeComp(out global::System_Runtime_InteropServices_ComTypes.ITypeComp__System_Private_Interop ppTComp);

		void GetDocumentation(
					int index, 
					out string strName, 
					out string strDocString, 
					out int dwHelpContext, 
					out string strHelpFile);

		bool IsName(
					string szNameBuf, 
					int lHashVal);

		void FindName(
					string szNameBuf, 
					int lHashVal, 
					global::System_Runtime_InteropServices_ComTypes.ITypeInfo__System_Private_Interop[] ppTInfo, 
					int[] rgMemId, 
					ref short pcFound);

		void ReleaseTLibAttr(global::System.IntPtr pTLibAttr);
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.DESCKIND,System.Private.Interop, Version=999.999.999.999, Culture=neutra" +
		"l, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum DESCKIND__System_Private_Interop
	{
		DESCKIND_NONE = 0,
		DESCKIND_FUNCDESC = 1,
		DESCKIND_VARDESC = 2,
		DESCKIND_TYPECOMP = 3,
		DESCKIND_IMPLICITAPPOBJ = 4,
		DESCKIND_MAX = 5,
	}

	[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit, Size=4)]
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.BINDPTR,System.Private.Interop, Version=999.999.999.999, Culture=neutral" +
		", PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct BINDPTR__System_Private_Interop
	{
		[global::System.Runtime.InteropServices.FieldOffset(0)]
		public global::System.IntPtr lpfuncdesc;
		[global::System.Runtime.InteropServices.FieldOffset(0)]
		public global::System.IntPtr lpvardesc;
		[global::System.Runtime.InteropServices.FieldOffset(0)]
		public global::System.IntPtr lptcomp;
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS,System.Private.Interop, Version=999.999.999.999, Culture=n" +
		"eutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum IMPLTYPEFLAGS__System_Private_Interop
	{
		IMPLTYPEFLAG_FDEFAULT = 1,
		IMPLTYPEFLAG_FSOURCE = 2,
		IMPLTYPEFLAG_FRESTRICTED = 4,
		IMPLTYPEFLAG_FDEFAULTVTABLE = 8,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.DISPPARAMS,System.Private.Interop, Version=999.999.999.999, Culture=neut" +
		"ral, PublicKeyToken=b03f5f7f11d50a3a")]
	public unsafe partial struct DISPPARAMS__System_Private_Interop
	{
		public global::System.IntPtr rgvarg;
		public global::System.IntPtr rgdispidNamedArgs;
		public int cArgs;
		public int cNamedArgs;
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Private.Interop, Version=999.999.999.999, Culture=neut" +
		"ral, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum INVOKEKIND__System_Private_Interop
	{
		INVOKE_FUNC = 1,
		INVOKE_PROPERTYGET = 2,
		INVOKE_PROPERTYPUT = 4,
		INVOKE_PROPERTYPUTREF = 8,
	}

	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.ComTypes.TYPEKIND,System.Private.Interop, Version=999.999.999.999, Culture=neutra" +
		"l, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum TYPEKIND__System_Private_Interop
	{
		TKIND_ENUM = 0,
		TKIND_RECORD = 1,
		TKIND_MODULE = 2,
		TKIND_INTERFACE = 3,
		TKIND_DISPATCH = 4,
		TKIND_COCLASS = 5,
		TKIND_ALIAS = 6,
		TKIND_UNION = 7,
		TKIND_MAX = 8,
	}
}

namespace System_Runtime_InteropServices_WindowsRuntime
{
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Runtime.InteropServices.WindowsRuntime.IBufferByteAccess,System.Runtime.WindowsRuntime, Version=4.0.14.0," +
		" Culture=neutral, PublicKeyToken=b77a5c561934e089")]
	public unsafe interface IBufferByteAccess__System_Runtime_WindowsRuntime
	{
		global::System.IntPtr GetBuffer();
	}
}

namespace System_Security_Cryptography
{
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Security.Cryptography.OidGroup,System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, P" +
		"ublicKeyToken=b03f5f7f11d50a3a")]
	public enum OidGroup__System_Security_Cryptography_Encoding
	{
		All = 0,
		HashAlgorithm = 1,
		EncryptionAlgorithm = 2,
		PublicKeyAlgorithm = 3,
		SignatureAlgorithm = 4,
		Attribute = 5,
		ExtensionOrAttribute = 6,
		EnhancedKeyUsage = 7,
		Policy = 8,
		Template = 9,
		KeyDerivationFunction = 10,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Security.Cryptography.CngKeyOpenOptions,System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutra" +
		"l, PublicKeyToken=b03f5f7f11d50a3a")]
	public enum CngKeyOpenOptions__System_Security_Cryptography_Cng
	{
		None = 0,
		UserKey = 0,
		MachineKey = 32,
		Silent = 64,
	}
}

namespace System_Threading
{
	[global::System.Runtime.InteropServices.McgRedirectedType("System.Threading.NativeOverlapped,System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5" +
		"f7f11d50a3a")]
	public unsafe partial struct NativeOverlapped__System_Private_CoreLib
	{
		public global::System.IntPtr InternalLow;
		public global::System.IntPtr InternalHigh;
		public int OffsetLow;
		public int OffsetHigh;
		public global::System.IntPtr EventHandle;
	}
}

namespace Windows.ApplicationModel
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.ISuspendingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SuspendingEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.ISuspendingEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SuspendingOperation")]
		public global::Windows.ApplicationModel.SuspendingOperation get_SuspendingOperation()
		{
			global::Windows.ApplicationModel.SuspendingOperation __retVal = global::Windows.ApplicationModel.ISuspendingEventArgs__Impl.Stubs.get_SuspendingOperation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public SuspendingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.ISuspendingOperation))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SuspendingOperation : global::System.__ComObject, global::Windows.ApplicationModel.ISuspendingOperation
	{
		public global::Windows.ApplicationModel.SuspendingDeferral GetDeferral()
		{
			global::Windows.ApplicationModel.SuspendingDeferral __retVal = global::Windows.ApplicationModel.ISuspendingOperation__Impl.Stubs.GetDeferral(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public SuspendingOperation(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.ISuspendingDeferral))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SuspendingDeferral : global::System.__ComObject, global::Windows.ApplicationModel.ISuspendingDeferral
	{
		public void Complete()
		{
			global::Windows.ApplicationModel.ISuspendingDeferral__Impl.Stubs.Complete(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SuspendingDeferral(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.ILeavingBackgroundEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class LeavingBackgroundEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.ILeavingBackgroundEventArgs
	{
		public LeavingBackgroundEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.IEnteredBackgroundEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class EnteredBackgroundEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.IEnteredBackgroundEventArgs
	{
		public EnteredBackgroundEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.IPackage))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.IPackage2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Package : global::System.__ComObject, global::Windows.ApplicationModel.IPackage, global::Windows.ApplicationModel.IPackage2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Id")]
		public global::Windows.ApplicationModel.PackageId get_Id()
		{
			global::Windows.ApplicationModel.PackageId __retVal = global::Windows.ApplicationModel.IPackage__Impl.Stubs.get_Id(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InstalledLocation")]
		public global::Windows.Storage.StorageFolder get_InstalledLocation()
		{
			global::Windows.Storage.StorageFolder __retVal = global::Windows.ApplicationModel.IPackage__Impl.Stubs.get_InstalledLocation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DisplayName")]
		public string get_DisplayName()
		{
			string __retVal = global::Windows.ApplicationModel.IPackage2__Impl.Stubs.get_DisplayName(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		public static global::Windows.ApplicationModel.Package get_Current()
		{
			global::Windows.ApplicationModel.Package retval;
			retval = __Factory_Windows_ApplicationModel__IPackageStatics_get_Current("Windows.ApplicationModel.Package");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.ApplicationModel.Package __Factory_Windows_ApplicationModel__IPackageStatics_get_Current(string typeName)
		{
			global::Windows.ApplicationModel.Package __pRetVal;
			__pRetVal = global::Windows.ApplicationModel.IPackageStatics__Impl.Stubs.get_Current(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.ApplicationModel.IPackageStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public Package(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.IPackageId))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class PackageId : global::System.__ComObject, global::Windows.ApplicationModel.IPackageId
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.ApplicationModel.IPackageId__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FullName")]
		public string get_FullName()
		{
			string __retVal = global::Windows.ApplicationModel.IPackageId__Impl.Stubs.get_FullName(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public PackageId(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISuspendingEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SuspendingOperation")]
		global::Windows.ApplicationModel.SuspendingOperation get_SuspendingOperation();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISuspendingOperation
	{
		global::Windows.ApplicationModel.SuspendingDeferral GetDeferral();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISuspendingDeferral
	{
		void Complete();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ILeavingBackgroundEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IEnteredBackgroundEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPackageStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		global::Windows.ApplicationModel.Package get_Current();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPackage
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Id")]
		global::Windows.ApplicationModel.PackageId get_Id();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "InstalledLocation")]
		global::Windows.Storage.StorageFolder get_InstalledLocation();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPackageId
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		string get_Name();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FullName")]
		string get_FullName();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPackage2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DisplayName")]
		string get_DisplayName();
	}
}

namespace Windows.ApplicationModel.Activation
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class LaunchActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs, global::Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Arguments")]
		public string get_Arguments()
		{
			string __retVal = global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs__Impl.Stubs.get_Arguments(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrelaunchActivated")]
		public bool get_PrelaunchActivated()
		{
			bool __retVal = global::Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs__Impl.Stubs.get_PrelaunchActivated(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public LaunchActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IFileActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FileActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.IFileActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Files")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.IStorageItem> get_Files()
		{
			global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.IStorageItem> __retVal = global::Windows.ApplicationModel.Activation.IFileActivatedEventArgs__Impl.Stubs.get_Files(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public FileActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.ISearchActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SearchActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.ISearchActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public SearchActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ShareTargetActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public ShareTargetActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FileOpenPickerActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public FileOpenPickerActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FileSavePickerActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public FileSavePickerActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CachedFileUpdaterActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		public global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState()
		{
			global::Windows.ApplicationModel.Activation.ApplicationExecutionState __retVal = global::Windows.ApplicationModel.Activation.IActivatedEventArgs__Impl.Stubs.get_PreviousExecutionState(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CachedFileUpdaterActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class BackgroundActivatedEventArgs : global::System.__ComObject, global::Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs
	{
		public BackgroundActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousExecutionState")]
		global::Windows.ApplicationModel.Activation.ApplicationExecutionState get_PreviousExecutionState();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ILaunchActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Arguments")]
		string get_Arguments();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPrelaunchActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PrelaunchActivated")]
		bool get_PrelaunchActivated();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFileActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Files")]
		global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.IStorageItem> get_Files();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISearchActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IShareTargetActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFileOpenPickerActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFileSavePickerActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICachedFileUpdaterActivatedEventArgs : global::Windows.ApplicationModel.Activation.IActivatedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBackgroundActivatedEventArgs
	{
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum ApplicationExecutionState
	{
		NotRunning = 0,
		Running = 1,
		Suspended = 2,
		Terminated = 3,
		ClosedByUser = 4,
	}
}

namespace Windows.ApplicationModel.Core
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Core.ICoreApplicationView))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Core.ICoreApplicationView3))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreApplicationView : global::System.__ComObject, global::Windows.ApplicationModel.Core.ICoreApplicationView, global::Windows.ApplicationModel.Core.ICoreApplicationView3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TitleBar")]
		public global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar get_TitleBar()
		{
			global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar __retVal = global::Windows.ApplicationModel.Core.ICoreApplicationView3__Impl.Stubs.get_TitleBar(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CoreApplicationView(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Core.ICoreApplicationViewTitleBar))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreApplicationViewTitleBar : global::System.__ComObject, global::Windows.ApplicationModel.Core.ICoreApplicationViewTitleBar
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendViewIntoTitleBar")]
		public void put_ExtendViewIntoTitleBar(bool value)
		{
			global::Windows.ApplicationModel.Core.ICoreApplicationViewTitleBar__Impl.Stubs.put_ExtendViewIntoTitleBar(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CoreApplicationViewTitleBar(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreApplication : global::System.__ComObject
	{
		public static global::Windows.ApplicationModel.Core.CoreApplicationView GetCurrentView()
		{
			global::Windows.ApplicationModel.Core.CoreApplicationView retval;
			retval = __Factory_Windows_ApplicationModel_Core__ICoreApplication_GetCurrentView("Windows.ApplicationModel.Core.CoreApplication");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.ApplicationModel.Core.CoreApplicationView __Factory_Windows_ApplicationModel_Core__ICoreApplication_GetCurrentView(string typeName)
		{
			global::Windows.ApplicationModel.Core.CoreApplicationView __pRetVal;
			__pRetVal = global::Windows.ApplicationModel.Core.ICoreApplication__Impl.Stubs.GetCurrentView(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.ApplicationModel.Core.ICoreApplication).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CoreApplication(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreApplicationView
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreApplicationView3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TitleBar")]
		global::Windows.ApplicationModel.Core.CoreApplicationViewTitleBar get_TitleBar();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreApplicationViewTitleBar
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ExtendViewIntoTitleBar")]
		void put_ExtendViewIntoTitleBar(bool value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreApplication
	{
		global::Windows.ApplicationModel.Core.CoreApplicationView GetCurrentView();
	}
}

namespace Windows.ApplicationModel.Resources.Core
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Resources.Core.IResourceContext))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ResourceContext : global::System.__ComObject, global::Windows.ApplicationModel.Resources.Core.IResourceContext
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "QualifierValues")]
		public global::Windows.Foundation.Collections.IObservableMap<string, string> get_QualifierValues()
		{
			global::Windows.Foundation.Collections.IObservableMap<string, string> __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceContext__Impl.Stubs.get_QualifierValues(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.ApplicationModel.Resources.Core.ResourceContext Clone()
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceContext __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceContext__Impl.Stubs.Clone(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Languages")]
		public global::System.Collections.Generic.IReadOnlyList<string> get_Languages()
		{
			global::System.Collections.Generic.IReadOnlyList<string> __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceContext__Impl.Stubs.get_Languages(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Languages")]
		public void put_Languages(global::System.Collections.Generic.IReadOnlyList<string> languages)
		{
			global::Windows.ApplicationModel.Resources.Core.IResourceContext__Impl.Stubs.put_Languages(
								this, 
								languages
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static global::Windows.ApplicationModel.Resources.Core.ResourceContext GetForViewIndependentUse()
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceContext retval;
			retval = __Factory_Windows_ApplicationModel_Resources_Core__IResourceContextStatics2_GetForViewIndependentUse("Windows.ApplicationModel.Resources.Core.ResourceContext");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.ApplicationModel.Resources.Core.ResourceContext __Factory_Windows_ApplicationModel_Resources_Core__IResourceContextStatics2_GetForViewIndependentUse(string typeName)
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceContext __pRetVal;
			__pRetVal = global::Windows.ApplicationModel.Resources.Core.IResourceContextStatics2__Impl.Stubs.GetForViewIndependentUse(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.ApplicationModel.Resources.Core.IResourceContextStatics2).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public ResourceContext(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Resources.Core.IResourceManager))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ResourceManager : global::System.__ComObject, global::Windows.ApplicationModel.Resources.Core.IResourceManager
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MainResourceMap")]
		public global::Windows.ApplicationModel.Resources.Core.ResourceMap get_MainResourceMap()
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceMap __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceManager__Impl.Stubs.get_MainResourceMap(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AllResourceMaps")]
		public global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.ResourceMap> get_AllResourceMaps()
		{
			global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.ResourceMap> __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceManager__Impl.Stubs.get_AllResourceMaps(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		public static global::Windows.ApplicationModel.Resources.Core.ResourceManager get_Current()
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceManager retval;
			retval = __Factory_Windows_ApplicationModel_Resources_Core__IResourceManagerStatics_get_Current("Windows.ApplicationModel.Resources.Core.ResourceManager");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.ApplicationModel.Resources.Core.ResourceManager __Factory_Windows_ApplicationModel_Resources_Core__IResourceManagerStatics_get_Current(string typeName)
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceManager __pRetVal;
			__pRetVal = global::Windows.ApplicationModel.Resources.Core.IResourceManagerStatics__Impl.Stubs.get_Current(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.ApplicationModel.Resources.Core.IResourceManagerStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public ResourceManager(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Resources.Core.IResourceMap))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ResourceMap : global::System.__ComObject, global::Windows.ApplicationModel.Resources.Core.IResourceMap, global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>, global::System.Collections.Generic.IReadOnlyCollection<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>
	{
		int global::System.Collections.Generic.IReadOnlyCollection<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapViewSharedReferenceTypesRCWAdapter.Count_Get(((global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>)this));
			}
		}

		global::Windows.ApplicationModel.Resources.Core.NamedResource global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>.this[string index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapViewSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>)this), 
									index
								);
			}
		}

		global::System.Collections.Generic.IEnumerable<string> global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>.Keys
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapViewSharedReferenceTypesRCWAdapter.Keys(this);
			}
		}

		global::System.Collections.Generic.IEnumerable<global::Windows.ApplicationModel.Resources.Core.NamedResource> global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>.Values
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapViewSharedReferenceTypesRCWAdapter.Values(this);
			}
		}

		bool global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>.ContainsKey(string key)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapViewSharedReferenceTypesRCWAdapter.ContainsKey(
								this, 
								key
							);
		}

		bool global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>.TryGetValue(
					string key, 
					out global::Windows.ApplicationModel.Resources.Core.NamedResource value)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapViewSharedReferenceTypesRCWAdapter.TryGetValue(
								this, 
								key, 
								out value
							);
		}

		global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>.GetEnumerator()
		{
			return (global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>).TypeHandle
							);
		}

		public global::Windows.ApplicationModel.Resources.Core.ResourceCandidate GetValue(
					string resource, 
					global::Windows.ApplicationModel.Resources.Core.ResourceContext context)
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceCandidate __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceMap__Impl.Stubs.GetValue(
								this, 
								resource, 
								context
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.ApplicationModel.Resources.Core.ResourceMap GetSubtree(string reference)
		{
			global::Windows.ApplicationModel.Resources.Core.ResourceMap __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceMap__Impl.Stubs.GetSubtree(
								this, 
								reference
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public ResourceMap(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Resources.Core.INamedResource))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class NamedResource : global::System.__ComObject, global::Windows.ApplicationModel.Resources.Core.INamedResource
	{
		public NamedResource(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.ApplicationModel.Resources.Core.IResourceCandidate))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ResourceCandidate : global::System.__ComObject, global::Windows.ApplicationModel.Resources.Core.IResourceCandidate
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ValueAsString")]
		public string get_ValueAsString()
		{
			string __retVal = global::Windows.ApplicationModel.Resources.Core.IResourceCandidate__Impl.Stubs.get_ValueAsString(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public ResourceCandidate(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceContextStatics2
	{
		global::Windows.ApplicationModel.Resources.Core.ResourceContext GetForViewIndependentUse();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceContext
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "QualifierValues")]
		global::Windows.Foundation.Collections.IObservableMap<string, string> get_QualifierValues();

		global::Windows.ApplicationModel.Resources.Core.ResourceContext Clone();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Languages")]
		global::System.Collections.Generic.IReadOnlyList<string> get_Languages();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Languages")]
		void put_Languages(global::System.Collections.Generic.IReadOnlyList<string> languages);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceManagerStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		global::Windows.ApplicationModel.Resources.Core.ResourceManager get_Current();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceManager
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MainResourceMap")]
		global::Windows.ApplicationModel.Resources.Core.ResourceMap get_MainResourceMap();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "AllResourceMaps")]
		global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.ResourceMap> get_AllResourceMaps();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceMap : global::System.Collections.Generic.IReadOnlyDictionary<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.ApplicationModel.Resources.Core.NamedResource>>
	{
		global::Windows.ApplicationModel.Resources.Core.ResourceCandidate GetValue(
					string resource, 
					global::Windows.ApplicationModel.Resources.Core.ResourceContext context);

		global::Windows.ApplicationModel.Resources.Core.ResourceMap GetSubtree(string reference);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INamedResource
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceCandidate
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ValueAsString")]
		string get_ValueAsString();
	}
}

namespace Windows.Data.Xml.Dom
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Data.Xml.Dom.IXmlDocument))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Data.Xml.Dom.IXmlDocumentIO))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class XmlDocument : global::System.__ComObject, global::Windows.Data.Xml.Dom.IXmlDocument, global::Windows.Data.Xml.Dom.IXmlDocumentIO
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public XmlDocument()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.Data.Xml.Dom.XmlDocument");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public void LoadXml(string xml)
		{
			global::Windows.Data.Xml.Dom.IXmlDocumentIO__Impl.Stubs.LoadXml(
								this, 
								xml
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public XmlDocument(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXmlDocument
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXmlDocumentIO
	{
		void LoadXml(string xml);
	}
}

namespace Windows.Foundation
{
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStringable
	{
		string ToString();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct UniversalApiContract
	{
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct FoundationContract
	{
	}
}

namespace Windows.Foundation.Diagnostics
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TracingStatusChangedEventArgs : global::System.__ComObject, global::Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Enabled")]
		public bool get_Enabled()
		{
			bool __retVal = global::Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs__Impl.Stubs.get_Enabled(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public TracingStatusChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AsyncCausalityTracer : global::System.__ComObject
	{
		public static void TraceOperationCreation(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					string operationName, 
					ulong relatedContext)
		{
			__Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceOperationCreation(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								operationName, 
								relatedContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceOperationCreation(
					string typeName, 
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					string operationName, 
					ulong relatedContext)
		{
			global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.TraceOperationCreation(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								operationName, 
								relatedContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static void TraceOperationCompletion(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.AsyncStatus status)
		{
			__Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceOperationCompletion(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								status
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceOperationCompletion(
					string typeName, 
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.AsyncStatus status)
		{
			global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.TraceOperationCompletion(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								status
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static void TraceOperationRelation(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.Diagnostics.CausalityRelation relation)
		{
			__Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceOperationRelation(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								relation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceOperationRelation(
					string typeName, 
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.Diagnostics.CausalityRelation relation)
		{
			global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.TraceOperationRelation(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								relation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static void TraceSynchronousWorkStart(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.Diagnostics.CausalitySynchronousWork work)
		{
			__Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceSynchronousWorkStart(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								work
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceSynchronousWorkStart(
					string typeName, 
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.Diagnostics.CausalitySynchronousWork work)
		{
			global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.TraceSynchronousWorkStart(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								traceLevel, 
								source, 
								platformId, 
								operationId, 
								work
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static void TraceSynchronousWorkCompletion(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::Windows.Foundation.Diagnostics.CausalitySynchronousWork work)
		{
			__Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceSynchronousWorkCompletion(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								traceLevel, 
								source, 
								work
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_TraceSynchronousWorkCompletion(
					string typeName, 
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::Windows.Foundation.Diagnostics.CausalitySynchronousWork work)
		{
			global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.TraceSynchronousWorkCompletion(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								traceLevel, 
								source, 
								work
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TracingStatusChanged")]
		public static global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TracingStatusChanged(global::System.EventHandler<global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken retval;
			retval = __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_add_TracingStatusChanged(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_add_TracingStatusChanged(
					string typeName, 
					global::System.EventHandler<global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __pRetVal;
			__pRetVal = global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.add_TracingStatusChanged(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TracingStatusChanged")]
		public static void remove_TracingStatusChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken cookie)
		{
			__Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_remove_TracingStatusChanged(
								"Windows.Foundation.Diagnostics.AsyncCausalityTracer", 
								cookie
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Foundation_Diagnostics__IAsyncCausalityTracerStatics_remove_TracingStatusChanged(
					string typeName, 
					global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken cookie)
		{
			global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics__Impl.Stubs.remove_TracingStatusChanged(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics).TypeHandle
												), 
								cookie
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public AsyncCausalityTracer(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITracingStatusChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Enabled")]
		bool get_Enabled();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAsyncCausalityTracerStatics
	{
		void TraceOperationCreation(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					string operationName, 
					ulong relatedContext);

		void TraceOperationCompletion(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.AsyncStatus status);

		void TraceOperationRelation(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.Diagnostics.CausalityRelation relation);

		void TraceSynchronousWorkStart(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::System.Guid platformId, 
					ulong operationId, 
					global::Windows.Foundation.Diagnostics.CausalitySynchronousWork work);

		void TraceSynchronousWorkCompletion(
					global::Windows.Foundation.Diagnostics.CausalityTraceLevel traceLevel, 
					global::Windows.Foundation.Diagnostics.CausalitySource source, 
					global::Windows.Foundation.Diagnostics.CausalitySynchronousWork work);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TracingStatusChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TracingStatusChanged(global::System.EventHandler<global::Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TracingStatusChanged")]
		void remove_TracingStatusChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken cookie);
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CausalityTraceLevel
	{
		Required = 0,
		Important = 1,
		Verbose = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CausalitySource
	{
		Application = 0,
		Library = 1,
		System = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CausalityRelation
	{
		AssignDelegate = 0,
		Join = 1,
		Choice = 2,
		Cancel = 3,
		Error = 4,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CausalitySynchronousWork
	{
		CompletionNotification = 0,
		ProgressNotification = 1,
		Execution = 2,
	}
}

namespace Windows.Foundation.Metadata
{
	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class LengthIsAttribute : global::System.Attribute
	{
		public LengthIsAttribute(int indexLengthParameter)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.LengthIsAttribute\'.  Windows Runtime attribute types are not " +
					"constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class OverloadAttribute : global::System.Attribute
	{
		public OverloadAttribute(string method)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.OverloadAttribute\'.  Windows Runtime attribute types are not " +
					"constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DefaultOverloadAttribute : global::System.Attribute
	{
		public DefaultOverloadAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.DefaultOverloadAttribute\'.  Windows Runtime attribute types a" +
					"re not constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class GuidAttribute : global::System.Attribute
	{
		public GuidAttribute(
					uint a, 
					ushort b, 
					ushort c, 
					byte d, 
					byte e, 
					byte f, 
					byte g, 
					byte h, 
					byte i, 
					byte j, 
					byte k)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.GuidAttribute\'.  Windows Runtime attribute types are not cons" +
					"tructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class WebHostHiddenAttribute : global::System.Attribute
	{
		public WebHostHiddenAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.WebHostHiddenAttribute\'.  Windows Runtime attribute types are" +
					" not constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ExclusiveToAttribute : global::System.Attribute
	{
		public ExclusiveToAttribute(global::System.Type typeName)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ExclusiveToAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=true)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ContractVersionAttribute : global::System.Attribute
	{
		public ContractVersionAttribute(uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ContractVersionAttribute\'.  Windows Runtime attribute types a" +
					"re not constructable.");
		}

		public ContractVersionAttribute(
					global::System.Type contract, 
					uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ContractVersionAttribute\'.  Windows Runtime attribute types a" +
					"re not constructable.");
		}

		public ContractVersionAttribute(
					string contract, 
					uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ContractVersionAttribute\'.  Windows Runtime attribute types a" +
					"re not constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=true)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ComposableAttribute : global::System.Attribute
	{
		public ComposableAttribute(
					global::System.Type type, 
					global::Windows.Foundation.Metadata.CompositionType compositionType, 
					uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ComposableAttribute\'.  Windows Runtime attribute types are no" +
					"t constructable.");
		}

		public ComposableAttribute(
					global::System.Type type, 
					global::Windows.Foundation.Metadata.CompositionType compositionType, 
					uint version, 
					string contract)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ComposableAttribute\'.  Windows Runtime attribute types are no" +
					"t constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ThreadingAttribute : global::System.Attribute
	{
		public ThreadingAttribute(global::Windows.Foundation.Metadata.ThreadingModel model)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ThreadingAttribute\'.  Windows Runtime attribute types are not" +
					" constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=true)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class StaticAttribute : global::System.Attribute
	{
		public StaticAttribute(
					global::System.Type type, 
					uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.StaticAttribute\'.  Windows Runtime attribute types are not co" +
					"nstructable.");
		}

		public StaticAttribute(
					global::System.Type type, 
					uint version, 
					string contractName)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.StaticAttribute\'.  Windows Runtime attribute types are not co" +
					"nstructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class MarshalingBehaviorAttribute : global::System.Attribute
	{
		public MarshalingBehaviorAttribute(global::Windows.Foundation.Metadata.MarshalingType behavior)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.MarshalingBehaviorAttribute\'.  Windows Runtime attribute type" +
					"s are not constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=true)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ActivatableAttribute : global::System.Attribute
	{
		public ActivatableAttribute(uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ActivatableAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}

		public ActivatableAttribute(
					uint version, 
					string type)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ActivatableAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}

		public ActivatableAttribute(
					global::System.Type type, 
					uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ActivatableAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}

		public ActivatableAttribute(
					global::System.Type type, 
					uint version, 
					string contractName)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ActivatableAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=true)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class VersionAttribute : global::System.Attribute
	{
		public VersionAttribute(uint version)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.VersionAttribute\'.  Windows Runtime attribute types are not c" +
					"onstructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class MuseAttribute : global::System.Attribute
	{
		public MuseAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.MuseAttribute\'.  Windows Runtime attribute types are not cons" +
					"tructable.");
		}
		public uint Version;
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DualApiPartitionAttribute : global::System.Attribute
	{
		public DualApiPartitionAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.DualApiPartitionAttribute\'.  Windows Runtime attribute types " +
					"are not constructable.");
		}
		public uint version;
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class GCPressureAttribute : global::System.Attribute
	{
		public GCPressureAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.GCPressureAttribute\'.  Windows Runtime attribute types are no" +
					"t constructable.");
		}
		public global::Windows.Foundation.Metadata.GCPressureAmount amount;
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AttributeNameAttribute : global::System.Attribute
	{
		public AttributeNameAttribute(string A_0)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.AttributeNameAttribute\'.  Windows Runtime attribute types are" +
					" not constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AllowMultipleAttribute : global::System.Attribute
	{
		public AllowMultipleAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.AllowMultipleAttribute\'.  Windows Runtime attribute types are" +
					" not constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ApiContractAttribute : global::System.Attribute
	{
		public ApiContractAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.ApiContractAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class RemoteAsyncAttribute : global::System.Attribute
	{
		public RemoteAsyncAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.RemoteAsyncAttribute\'.  Windows Runtime attribute types are n" +
					"ot constructable.");
		}
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=true)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DeprecatedAttribute : global::System.Attribute
	{
		public DeprecatedAttribute(
					string message, 
					global::Windows.Foundation.Metadata.DeprecationType type, 
					uint version, 
					string contract)
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.Foundation.Metadata.DeprecatedAttribute\'.  Windows Runtime attribute types are no" +
					"t constructable.");
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CompositionType
	{
		Protected = 1,
		Public = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum ThreadingModel
	{
		InvalidThreading = 0,
		STA = 1,
		MTA = 2,
		Both = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum MarshalingType
	{
		InvalidMarshaling = 0,
		None = 1,
		Agile = 2,
		Standard = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum GCPressureAmount
	{
		Low = 0,
		Medium = 1,
		High = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum DeprecationType
	{
		Deprecate = 0,
		Remove = 1,
	}
}

namespace Windows.Globalization
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Globalization.ICalendar))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Calendar : global::System.__ComObject, global::Windows.Globalization.ICalendar
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Calendar()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.Globalization.Calendar");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public void ChangeCalendarSystem(string value)
		{
			global::Windows.Globalization.ICalendar__Impl.Stubs.ChangeCalendarSystem(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::System.DateTimeOffset GetDateTime()
		{
			global::System.DateTimeOffset __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.GetDateTime(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LastEra")]
		public int get_LastEra()
		{
			int __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.get_LastEra(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Era")]
		public void put_Era(int value)
		{
			global::Windows.Globalization.ICalendar__Impl.Stubs.put_Era(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public string EraAsString()
		{
			string __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.EraAsString(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public string EraAsString(int idealLength)
		{
			string __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.EraAsString(
								this, 
								idealLength
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FirstYearInThisEra")]
		public int get_FirstYearInThisEra()
		{
			int __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.get_FirstYearInThisEra(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Year")]
		public void put_Year(int value)
		{
			global::Windows.Globalization.ICalendar__Impl.Stubs.put_Year(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FirstMonthInThisYear")]
		public int get_FirstMonthInThisYear()
		{
			int __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.get_FirstMonthInThisYear(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Month")]
		public void put_Month(int value)
		{
			global::Windows.Globalization.ICalendar__Impl.Stubs.put_Month(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FirstDayInThisMonth")]
		public int get_FirstDayInThisMonth()
		{
			int __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.get_FirstDayInThisMonth(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Day")]
		public int get_Day()
		{
			int __retVal = global::Windows.Globalization.ICalendar__Impl.Stubs.get_Day(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Day")]
		public void put_Day(int value)
		{
			global::Windows.Globalization.ICalendar__Impl.Stubs.put_Day(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Calendar(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Globalization.ILanguage))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Language : global::System.__ComObject, global::Windows.Globalization.ILanguage
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Language(string languageTag)
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_Globalization__ILanguageFactory_CreateLanguage(
								"Windows.Globalization.Language", 
								languageTag
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_Globalization__ILanguageFactory_CreateLanguage(
					string typeName, 
					string languageTag)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Windows.Globalization.ILanguageFactory__Impl.Stubs.CreateLanguage(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Globalization.ILanguageFactory).TypeHandle
												), 
								languageTag
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DisplayName")]
		public string get_DisplayName()
		{
			string __retVal = global::Windows.Globalization.ILanguage__Impl.Stubs.get_DisplayName(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CurrentInputMethodLanguageTag")]
		public static string get_CurrentInputMethodLanguageTag()
		{
			string retval;
			retval = __Factory_Windows_Globalization__ILanguageStatics_get_CurrentInputMethodLanguageTag("Windows.Globalization.Language");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static string __Factory_Windows_Globalization__ILanguageStatics_get_CurrentInputMethodLanguageTag(string typeName)
		{
			string __pRetVal;
			__pRetVal = global::Windows.Globalization.ILanguageStatics__Impl.Stubs.get_CurrentInputMethodLanguageTag(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.Globalization.ILanguageStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public Language(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Globalization.IGeographicRegion))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class GeographicRegion : global::System.__ComObject, global::Windows.Globalization.IGeographicRegion
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public GeographicRegion(string geographicRegionCode)
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_Globalization__IGeographicRegionFactory_CreateGeographicRegion(
								"Windows.Globalization.GeographicRegion", 
								geographicRegionCode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_Globalization__IGeographicRegionFactory_CreateGeographicRegion(
					string typeName, 
					string geographicRegionCode)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Windows.Globalization.IGeographicRegionFactory__Impl.Stubs.CreateGeographicRegion(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Globalization.IGeographicRegionFactory).TypeHandle
												), 
								geographicRegionCode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DisplayName")]
		public string get_DisplayName()
		{
			string __retVal = global::Windows.Globalization.IGeographicRegion__Impl.Stubs.get_DisplayName(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public GeographicRegion(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CalendarIdentifiers : global::System.__ComObject
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Gregorian")]
		public static string get_Gregorian()
		{
			string retval;
			retval = __Factory_Windows_Globalization__ICalendarIdentifiersStatics_get_Gregorian("Windows.Globalization.CalendarIdentifiers");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static string __Factory_Windows_Globalization__ICalendarIdentifiersStatics_get_Gregorian(string typeName)
		{
			string __pRetVal;
			__pRetVal = global::Windows.Globalization.ICalendarIdentifiersStatics__Impl.Stubs.get_Gregorian(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.Globalization.ICalendarIdentifiersStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Hijri")]
		public static string get_Hijri()
		{
			string retval;
			retval = __Factory_Windows_Globalization__ICalendarIdentifiersStatics_get_Hijri("Windows.Globalization.CalendarIdentifiers");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static string __Factory_Windows_Globalization__ICalendarIdentifiersStatics_get_Hijri(string typeName)
		{
			string __pRetVal;
			__pRetVal = global::Windows.Globalization.ICalendarIdentifiersStatics__Impl.Stubs.get_Hijri(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.Globalization.ICalendarIdentifiersStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Japanese")]
		public static string get_Japanese()
		{
			string retval;
			retval = __Factory_Windows_Globalization__ICalendarIdentifiersStatics_get_Japanese("Windows.Globalization.CalendarIdentifiers");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static string __Factory_Windows_Globalization__ICalendarIdentifiersStatics_get_Japanese(string typeName)
		{
			string __pRetVal;
			__pRetVal = global::Windows.Globalization.ICalendarIdentifiersStatics__Impl.Stubs.get_Japanese(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.Globalization.ICalendarIdentifiersStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CalendarIdentifiers(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ApplicationLanguages : global::System.__ComObject
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "PrimaryLanguageOverride")]
		public static void put_PrimaryLanguageOverride(string value)
		{
			__Factory_Windows_Globalization__IApplicationLanguagesStatics_put_PrimaryLanguageOverride(
								"Windows.Globalization.ApplicationLanguages", 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_Globalization__IApplicationLanguagesStatics_put_PrimaryLanguageOverride(
					string typeName, 
					string value)
		{
			global::Windows.Globalization.IApplicationLanguagesStatics__Impl.Stubs.put_PrimaryLanguageOverride(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Globalization.IApplicationLanguagesStatics).TypeHandle
												), 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ApplicationLanguages(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICalendar
	{
		void ChangeCalendarSystem(string value);

		global::System.DateTimeOffset GetDateTime();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LastEra")]
		int get_LastEra();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Era")]
		void put_Era(int value);

		string EraAsString();

		string EraAsString(int idealLength);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FirstYearInThisEra")]
		int get_FirstYearInThisEra();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Year")]
		void put_Year(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FirstMonthInThisYear")]
		int get_FirstMonthInThisYear();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Month")]
		void put_Month(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FirstDayInThisMonth")]
		int get_FirstDayInThisMonth();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Day")]
		int get_Day();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Day")]
		void put_Day(int value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ILanguageFactory
	{
		global::System.IntPtr CreateLanguage(string languageTag);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ILanguageStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CurrentInputMethodLanguageTag")]
		string get_CurrentInputMethodLanguageTag();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ILanguage
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DisplayName")]
		string get_DisplayName();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGeographicRegionFactory
	{
		global::System.IntPtr CreateGeographicRegion(string geographicRegionCode);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGeographicRegion
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DisplayName")]
		string get_DisplayName();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICalendarIdentifiersStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Gregorian")]
		string get_Gregorian();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Hijri")]
		string get_Hijri();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Japanese")]
		string get_Japanese();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationLanguagesStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "PrimaryLanguageOverride")]
		void put_PrimaryLanguageOverride(string value);
	}
}

namespace Windows.Graphics.DirectX
{
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum DirectXPixelFormat
	{
		Unknown = 0,
		R32G32B32A32Typeless = 1,
		R32G32B32A32Float = 2,
		R32G32B32A32UInt = 3,
		R32G32B32A32Int = 4,
		R32G32B32Typeless = 5,
		R32G32B32Float = 6,
		R32G32B32UInt = 7,
		R32G32B32Int = 8,
		R16G16B16A16Typeless = 9,
		R16G16B16A16Float = 10,
		R16G16B16A16UIntNormalized = 11,
		R16G16B16A16UInt = 12,
		R16G16B16A16IntNormalized = 13,
		R16G16B16A16Int = 14,
		R32G32Typeless = 15,
		R32G32Float = 16,
		R32G32UInt = 17,
		R32G32Int = 18,
		R32G8X24Typeless = 19,
		D32FloatS8X24UInt = 20,
		R32FloatX8X24Typeless = 21,
		X32TypelessG8X24UInt = 22,
		R10G10B10A2Typeless = 23,
		R10G10B10A2UIntNormalized = 24,
		R10G10B10A2UInt = 25,
		R11G11B10Float = 26,
		R8G8B8A8Typeless = 27,
		R8G8B8A8UIntNormalized = 28,
		R8G8B8A8UIntNormalizedSrgb = 29,
		R8G8B8A8UInt = 30,
		R8G8B8A8IntNormalized = 31,
		R8G8B8A8Int = 32,
		R16G16Typeless = 33,
		R16G16Float = 34,
		R16G16UIntNormalized = 35,
		R16G16UInt = 36,
		R16G16IntNormalized = 37,
		R16G16Int = 38,
		R32Typeless = 39,
		D32Float = 40,
		R32Float = 41,
		R32UInt = 42,
		R32Int = 43,
		R24G8Typeless = 44,
		D24UIntNormalizedS8UInt = 45,
		R24UIntNormalizedX8Typeless = 46,
		X24TypelessG8UInt = 47,
		R8G8Typeless = 48,
		R8G8UIntNormalized = 49,
		R8G8UInt = 50,
		R8G8IntNormalized = 51,
		R8G8Int = 52,
		R16Typeless = 53,
		R16Float = 54,
		D16UIntNormalized = 55,
		R16UIntNormalized = 56,
		R16UInt = 57,
		R16IntNormalized = 58,
		R16Int = 59,
		R8Typeless = 60,
		R8UIntNormalized = 61,
		R8UInt = 62,
		R8IntNormalized = 63,
		R8Int = 64,
		A8UIntNormalized = 65,
		R1UIntNormalized = 66,
		R9G9B9E5SharedExponent = 67,
		R8G8B8G8UIntNormalized = 68,
		G8R8G8B8UIntNormalized = 69,
		BC1Typeless = 70,
		BC1UIntNormalized = 71,
		BC1UIntNormalizedSrgb = 72,
		BC2Typeless = 73,
		BC2UIntNormalized = 74,
		BC2UIntNormalizedSrgb = 75,
		BC3Typeless = 76,
		BC3UIntNormalized = 77,
		BC3UIntNormalizedSrgb = 78,
		BC4Typeless = 79,
		BC4UIntNormalized = 80,
		BC4IntNormalized = 81,
		BC5Typeless = 82,
		BC5UIntNormalized = 83,
		BC5IntNormalized = 84,
		B5G6R5UIntNormalized = 85,
		B5G5R5A1UIntNormalized = 86,
		B8G8R8A8UIntNormalized = 87,
		B8G8R8X8UIntNormalized = 88,
		R10G10B10XRBiasA2UIntNormalized = 89,
		B8G8R8A8Typeless = 90,
		B8G8R8A8UIntNormalizedSrgb = 91,
		B8G8R8X8Typeless = 92,
		B8G8R8X8UIntNormalizedSrgb = 93,
		BC6HTypeless = 94,
		BC6H16UnsignedFloat = 95,
		BC6H16Float = 96,
		BC7Typeless = 97,
		BC7UIntNormalized = 98,
		BC7UIntNormalizedSrgb = 99,
		Ayuv = 100,
		Y410 = 101,
		Y416 = 102,
		NV12 = 103,
		P010 = 104,
		P016 = 105,
		Opaque420 = 106,
		Yuy2 = 107,
		Y210 = 108,
		Y216 = 109,
		NV11 = 110,
		AI44 = 111,
		IA44 = 112,
		P8 = 113,
		A8P8 = 114,
		B4G4R4A4UIntNormalized = 115,
		P208 = 130,
		V208 = 131,
		V408 = 132,
		SamplerFeedbackMinMipOpaque = 189,
		SamplerFeedbackMipRegionUsedOpaque = 190,
	}
}

namespace Windows.Graphics.DirectX.Direct3D11
{
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDirect3DDevice : global::System.IDisposable
	{
		void Trim();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDirect3DSurface : global::System.IDisposable
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Description")]
		global::Windows.Graphics.DirectX.Direct3D11.Direct3DSurfaceDescription get_Description();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct Direct3DSurfaceDescription
	{
		public int Width;
		public int Height;
		public global::Windows.Graphics.DirectX.DirectXPixelFormat Format;
		public global::Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription MultisampleDescription;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct Direct3DMultisampleDescription
	{
		public int Count;
		public int Quality;
	}
}

namespace Windows.Graphics.Effects
{
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGraphicsEffectSource
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGraphicsEffect : global::Windows.Graphics.Effects.IGraphicsEffectSource
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		string get_Name();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		void put_Name(string name);
	}
}

namespace Windows.Graphics.Imaging
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Graphics.Imaging.ISoftwareBitmap))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SoftwareBitmap : global::System.__ComObject, global::Windows.Graphics.Imaging.ISoftwareBitmap, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public SoftwareBitmap(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISoftwareBitmap : global::System.IDisposable
	{
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct BitmapSize
	{
		public uint Width;
		public uint Height;
	}
}

namespace Windows.Graphics.Printing
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Graphics.Printing.IPrintTaskOptionsCore))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class PrintTaskOptions : global::System.__ComObject, global::Windows.Graphics.Printing.IPrintTaskOptionsCore
	{
		public PrintTaskOptions(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPrintTaskOptionsCore
	{
	}
}

namespace Windows.Media.SpeechSynthesis
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Media.SpeechSynthesis.ISpeechSynthesizer))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SpeechSynthesizer : global::System.__ComObject, global::Windows.Media.SpeechSynthesis.ISpeechSynthesizer, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SpeechSynthesizer()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.Media.SpeechSynthesis.SpeechSynthesizer");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Media.SpeechSynthesis.SpeechSynthesisStream> SynthesizeTextToStreamAsync(string text)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Media.SpeechSynthesis.SpeechSynthesisStream> __retVal = global::Windows.Media.SpeechSynthesis.ISpeechSynthesizer__Impl.Stubs.SynthesizeTextToStreamAsync(
								this, 
								text
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public SpeechSynthesizer(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Media.SpeechSynthesis.ISpeechSynthesisStream))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.Streams.IContentTypeProvider))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.Streams.IRandomAccessStream))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.Streams.IOutputStream))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.Streams.IInputStream))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SpeechSynthesisStream : global::System.__ComObject, global::Windows.Media.SpeechSynthesis.ISpeechSynthesisStream, global::Windows.Storage.Streams.IContentTypeProvider, global::Windows.Storage.Streams.IRandomAccessStream, global::Windows.Storage.Streams.IOutputStream, global::System.IDisposable, global::Windows.Storage.Streams.IInputStream
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		public ulong get_Size()
		{
			ulong __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.get_Size(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Size")]
		public void put_Size(ulong value)
		{
			global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.put_Size(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Storage.Streams.IInputStream GetInputStreamAt(ulong position)
		{
			global::Windows.Storage.Streams.IInputStream __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.GetInputStreamAt(
								this, 
								position
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Storage.Streams.IOutputStream GetOutputStreamAt(ulong position)
		{
			global::Windows.Storage.Streams.IOutputStream __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.GetOutputStreamAt(
								this, 
								position
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Position")]
		public ulong get_Position()
		{
			ulong __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.get_Position(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void Seek(ulong position)
		{
			global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.Seek(
								this, 
								position
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::Windows.Storage.Streams.IRandomAccessStream CloneStream()
		{
			global::Windows.Storage.Streams.IRandomAccessStream __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.CloneStream(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CanRead")]
		public bool get_CanRead()
		{
			bool __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.get_CanRead(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CanWrite")]
		public bool get_CanWrite()
		{
			bool __retVal = global::Windows.Storage.Streams.IRandomAccessStream__Impl.Stubs.get_CanWrite(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperationWithProgress<global::Windows.Storage.Streams.IBuffer, uint> ReadAsync(
					global::Windows.Storage.Streams.IBuffer buffer, 
					uint count, 
					global::Windows.Storage.Streams.InputStreamOptions options)
		{
			global::Windows.Foundation.IAsyncOperationWithProgress<global::Windows.Storage.Streams.IBuffer, uint> __retVal = global::Windows.Storage.Streams.IInputStream__Impl.Stubs.ReadAsync(
								this, 
								buffer, 
								count, 
								options
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperationWithProgress<uint, uint> WriteAsync(global::Windows.Storage.Streams.IBuffer buffer)
		{
			global::Windows.Foundation.IAsyncOperationWithProgress<uint, uint> __retVal = global::Windows.Storage.Streams.IOutputStream__Impl.Stubs.WriteAsync(
								this, 
								buffer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<bool> FlushAsync()
		{
			global::Windows.Foundation.IAsyncOperation<bool> __retVal = global::Windows.Storage.Streams.IOutputStream__Impl.Stubs.FlushAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentType")]
		public string get_ContentType()
		{
			string __retVal = global::Windows.Storage.Streams.IContentTypeProvider__Impl.Stubs.get_ContentType(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public SpeechSynthesisStream(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISpeechSynthesizer
	{
		global::Windows.Foundation.IAsyncOperation<global::Windows.Media.SpeechSynthesis.SpeechSynthesisStream> SynthesizeTextToStreamAsync(string text);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISpeechSynthesisStream : global::Windows.Storage.Streams.IRandomAccessStream, global::System.IDisposable, global::Windows.Storage.Streams.IInputStream, global::Windows.Storage.Streams.IOutputStream, global::Windows.Storage.Streams.IContentTypeProvider
	{
	}
}

namespace Windows.Storage
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.IStorageFile))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.IStorageItem))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class StorageFile : global::System.__ComObject, global::Windows.Storage.IStorageFile, global::Windows.Storage.Streams.IInputStreamReference, global::Windows.Storage.Streams.IRandomAccessStreamReference, global::Windows.Storage.IStorageItem, global::Windows.Storage.IStorageItemProperties, global::Windows.Storage.IStorageItemProperties2, global::Windows.Storage.IStorageItem2, global::Windows.Storage.IStorageItemPropertiesWithProvider, global::Windows.Storage.IStorageFilePropertiesWithAvailability, global::Windows.Storage.IStorageFile2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FileType")]
		public string get_FileType()
		{
			string __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.get_FileType(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentType")]
		public string get_ContentType()
		{
			string __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.get_ContentType(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> OpenAsync(global::Windows.Storage.FileAccessMode accessMode)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.OpenAsync(
								this, 
								accessMode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageStreamTransaction> OpenTransactedWriteAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageStreamTransaction> __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.OpenTransactedWriteAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CopyAsync(global::Windows.Storage.IStorageFolder destinationFolder)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.CopyAsync(
								this, 
								destinationFolder
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CopyAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.CopyAsync(
								this, 
								destinationFolder, 
								desiredNewName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CopyAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName, 
					global::Windows.Storage.NameCollisionOption option)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.CopyAsync(
								this, 
								destinationFolder, 
								desiredNewName, 
								option
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction CopyAndReplaceAsync(global::Windows.Storage.IStorageFile fileToReplace)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.CopyAndReplaceAsync(
								this, 
								fileToReplace
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction MoveAsync(global::Windows.Storage.IStorageFolder destinationFolder)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.MoveAsync(
								this, 
								destinationFolder
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction MoveAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.MoveAsync(
								this, 
								destinationFolder, 
								desiredNewName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction MoveAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName, 
					global::Windows.Storage.NameCollisionOption option)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.MoveAsync(
								this, 
								destinationFolder, 
								desiredNewName, 
								option
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction MoveAndReplaceAsync(global::Windows.Storage.IStorageFile fileToReplace)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageFile__Impl.Stubs.MoveAndReplaceAsync(
								this, 
								fileToReplace
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction RenameAsync(string desiredName)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.RenameAsync(
								this, 
								desiredName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction RenameAsync(
					string desiredName, 
					global::Windows.Storage.NameCollisionOption option)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.RenameAsync(
								this, 
								desiredName, 
								option
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction DeleteAsync()
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.DeleteAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction DeleteAsync(global::Windows.Storage.StorageDeleteOption option)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.DeleteAsync(
								this, 
								option
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.FileProperties.BasicProperties> GetBasicPropertiesAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.FileProperties.BasicProperties> __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.GetBasicPropertiesAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Path")]
		public string get_Path()
		{
			string __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_Path(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Attributes")]
		public global::Windows.Storage.FileAttributes get_Attributes()
		{
			global::Windows.Storage.FileAttributes __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_Attributes(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DateCreated")]
		public global::System.DateTimeOffset get_DateCreated()
		{
			global::System.DateTimeOffset __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_DateCreated(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool IsOfType(global::Windows.Storage.StorageItemTypes type)
		{
			bool __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.IsOfType(
								this, 
								type
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public StorageFile(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.IStorageStreamTransaction))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class StorageStreamTransaction : global::System.__ComObject, global::Windows.Storage.IStorageStreamTransaction, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public StorageStreamTransaction(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.IStorageFolder))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class StorageFolder : global::System.__ComObject, global::Windows.Storage.IStorageFolder, global::Windows.Storage.IStorageItem, global::Windows.Storage.Search.IStorageFolderQueryOperations, global::Windows.Storage.IStorageItemProperties, global::Windows.Storage.IStorageItemProperties2, global::Windows.Storage.IStorageItem2, global::Windows.Storage.IStorageFolder2, global::Windows.Storage.IStorageItemPropertiesWithProvider, global::Windows.Storage.IStorageFolder3
	{
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CreateFileAsync(string desiredName)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.CreateFileAsync(
								this, 
								desiredName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CreateFileAsync(
					string desiredName, 
					global::Windows.Storage.CreationCollisionOption options)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.CreateFileAsync(
								this, 
								desiredName, 
								options
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> CreateFolderAsync(string desiredName)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.CreateFolderAsync(
								this, 
								desiredName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> CreateFolderAsync(
					string desiredName, 
					global::Windows.Storage.CreationCollisionOption options)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.CreateFolderAsync(
								this, 
								desiredName, 
								options
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> GetFileAsync(string name)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.GetFileAsync(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> GetFolderAsync(string name)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.GetFolderAsync(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.IStorageItem> GetItemAsync(string name)
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.IStorageItem> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.GetItemAsync(
								this, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.StorageFile>> GetFilesAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.StorageFile>> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.GetFilesAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.StorageFolder>> GetFoldersAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.StorageFolder>> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.GetFoldersAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.IStorageItem>> GetItemsAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.IStorageItem>> __retVal = global::Windows.Storage.IStorageFolder__Impl.Stubs.GetItemsAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction RenameAsync(string desiredName)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.RenameAsync(
								this, 
								desiredName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction RenameAsync(
					string desiredName, 
					global::Windows.Storage.NameCollisionOption option)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.RenameAsync(
								this, 
								desiredName, 
								option
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction DeleteAsync()
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.DeleteAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction DeleteAsync(global::Windows.Storage.StorageDeleteOption option)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.DeleteAsync(
								this, 
								option
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.FileProperties.BasicProperties> GetBasicPropertiesAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.FileProperties.BasicProperties> __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.GetBasicPropertiesAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public string get_Name()
		{
			string __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Path")]
		public string get_Path()
		{
			string __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_Path(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Attributes")]
		public global::Windows.Storage.FileAttributes get_Attributes()
		{
			global::Windows.Storage.FileAttributes __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_Attributes(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DateCreated")]
		public global::System.DateTimeOffset get_DateCreated()
		{
			global::System.DateTimeOffset __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.get_DateCreated(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public bool IsOfType(global::Windows.Storage.StorageItemTypes type)
		{
			bool __retVal = global::Windows.Storage.IStorageItem__Impl.Stubs.IsOfType(
								this, 
								type
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public StorageFolder(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.IApplicationData))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.IDisposable))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ApplicationData : global::System.__ComObject, global::Windows.Storage.IApplicationData, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LocalFolder")]
		public global::Windows.Storage.StorageFolder get_LocalFolder()
		{
			global::Windows.Storage.StorageFolder __retVal = global::Windows.Storage.IApplicationData__Impl.Stubs.get_LocalFolder(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		public static global::Windows.Storage.ApplicationData get_Current()
		{
			global::Windows.Storage.ApplicationData retval;
			retval = __Factory_Windows_Storage__IApplicationDataStatics_get_Current("Windows.Storage.ApplicationData");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Storage.ApplicationData __Factory_Windows_Storage__IApplicationDataStatics_get_Current(string typeName)
		{
			global::Windows.Storage.ApplicationData __pRetVal;
			__pRetVal = global::Windows.Storage.IApplicationDataStatics__Impl.Stubs.get_Current(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.Storage.IApplicationDataStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public ApplicationData(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FileIO : global::System.__ComObject
	{
		public static global::Windows.Foundation.IAsyncOperation<string> ReadTextAsync(global::Windows.Storage.IStorageFile file)
		{
			global::Windows.Foundation.IAsyncOperation<string> retval;
			retval = __Factory_Windows_Storage__IFileIOStatics_ReadTextAsync(
								"Windows.Storage.FileIO", 
								file
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.Foundation.IAsyncOperation<string> __Factory_Windows_Storage__IFileIOStatics_ReadTextAsync(
					string typeName, 
					global::Windows.Storage.IStorageFile file)
		{
			global::Windows.Foundation.IAsyncOperation<string> __pRetVal;
			__pRetVal = global::Windows.Storage.IFileIOStatics__Impl.Stubs.ReadTextAsync(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.Storage.IFileIOStatics).TypeHandle
												), 
								file
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public FileIO(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageItem
	{
		global::Windows.Foundation.IAsyncAction RenameAsync(string desiredName);

		global::Windows.Foundation.IAsyncAction RenameAsync(
					string desiredName, 
					global::Windows.Storage.NameCollisionOption option);

		global::Windows.Foundation.IAsyncAction DeleteAsync();

		global::Windows.Foundation.IAsyncAction DeleteAsync(global::Windows.Storage.StorageDeleteOption option);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.FileProperties.BasicProperties> GetBasicPropertiesAsync();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		string get_Name();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Path")]
		string get_Path();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Attributes")]
		global::Windows.Storage.FileAttributes get_Attributes();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DateCreated")]
		global::System.DateTimeOffset get_DateCreated();

		bool IsOfType(global::Windows.Storage.StorageItemTypes type);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFile : global::Windows.Storage.IStorageItem, global::Windows.Storage.Streams.IRandomAccessStreamReference, global::Windows.Storage.Streams.IInputStreamReference
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FileType")]
		string get_FileType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentType")]
		string get_ContentType();

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IRandomAccessStream> OpenAsync(global::Windows.Storage.FileAccessMode accessMode);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageStreamTransaction> OpenTransactedWriteAsync();

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CopyAsync(global::Windows.Storage.IStorageFolder destinationFolder);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CopyAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CopyAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName, 
					global::Windows.Storage.NameCollisionOption option);

		global::Windows.Foundation.IAsyncAction CopyAndReplaceAsync(global::Windows.Storage.IStorageFile fileToReplace);

		global::Windows.Foundation.IAsyncAction MoveAsync(global::Windows.Storage.IStorageFolder destinationFolder);

		global::Windows.Foundation.IAsyncAction MoveAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName);

		global::Windows.Foundation.IAsyncAction MoveAsync(
					global::Windows.Storage.IStorageFolder destinationFolder, 
					string desiredNewName, 
					global::Windows.Storage.NameCollisionOption option);

		global::Windows.Foundation.IAsyncAction MoveAndReplaceAsync(global::Windows.Storage.IStorageFile fileToReplace);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageStreamTransaction : global::System.IDisposable
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFolder : global::Windows.Storage.IStorageItem
	{
		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CreateFileAsync(string desiredName);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> CreateFileAsync(
					string desiredName, 
					global::Windows.Storage.CreationCollisionOption options);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> CreateFolderAsync(string desiredName);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> CreateFolderAsync(
					string desiredName, 
					global::Windows.Storage.CreationCollisionOption options);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> GetFileAsync(string name);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> GetFolderAsync(string name);

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.IStorageItem> GetItemAsync(string name);

		global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.StorageFile>> GetFilesAsync();

		global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.StorageFolder>> GetFoldersAsync();

		global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Storage.IStorageItem>> GetItemsAsync();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageItemProperties
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageItemProperties2 : global::Windows.Storage.IStorageItemProperties
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageItem2 : global::Windows.Storage.IStorageItem
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFolder2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageItemPropertiesWithProvider : global::Windows.Storage.IStorageItemProperties
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFolder3
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFilePropertiesWithAvailability
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFile2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationDataStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		global::Windows.Storage.ApplicationData get_Current();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationData
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "LocalFolder")]
		global::Windows.Storage.StorageFolder get_LocalFolder();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFileIOStatics
	{
		global::Windows.Foundation.IAsyncOperation<string> ReadTextAsync(global::Windows.Storage.IStorageFile file);
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum NameCollisionOption
	{
		GenerateUniqueName = 0,
		ReplaceExisting = 1,
		FailIfExists = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum StorageDeleteOption
	{
		Default = 0,
		PermanentDelete = 1,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum FileAttributes : uint
	{
		Normal = 0x0u,
		ReadOnly = 0x1u,
		Directory = 0x10u,
		Archive = 0x20u,
		Temporary = 0x100u,
		LocallyIncomplete = 0x200u,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum StorageItemTypes : uint
	{
		None = 0x0u,
		File = 0x1u,
		Folder = 0x2u,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum FileAccessMode
	{
		Read = 0,
		ReadWrite = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CreationCollisionOption
	{
		GenerateUniqueName = 0,
		ReplaceExisting = 1,
		FailIfExists = 2,
		OpenIfExists = 3,
	}
}

namespace Windows.Storage.FileProperties
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.FileProperties.IBasicProperties))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class BasicProperties : global::System.__ComObject, global::Windows.Storage.FileProperties.IBasicProperties
	{
		public BasicProperties(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBasicProperties
	{
	}
}

namespace Windows.Storage.Pickers
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Storage.Pickers.IFileOpenPicker))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FileOpenPicker : global::System.__ComObject, global::Windows.Storage.Pickers.IFileOpenPicker
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public FileOpenPicker()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.Storage.Pickers.FileOpenPicker");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ViewMode")]
		public void put_ViewMode(global::Windows.Storage.Pickers.PickerViewMode value)
		{
			global::Windows.Storage.Pickers.IFileOpenPicker__Impl.Stubs.put_ViewMode(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SuggestedStartLocation")]
		public void put_SuggestedStartLocation(global::Windows.Storage.Pickers.PickerLocationId value)
		{
			global::Windows.Storage.Pickers.IFileOpenPicker__Impl.Stubs.put_SuggestedStartLocation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FileTypeFilter")]
		public global::System.Collections.Generic.IList<string> get_FileTypeFilter()
		{
			global::System.Collections.Generic.IList<string> __retVal = global::Windows.Storage.Pickers.IFileOpenPicker__Impl.Stubs.get_FileTypeFilter(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> PickSingleFileAsync()
		{
			global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> __retVal = global::Windows.Storage.Pickers.IFileOpenPicker__Impl.Stubs.PickSingleFileAsync(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public FileOpenPicker(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFileOpenPicker
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ViewMode")]
		void put_ViewMode(global::Windows.Storage.Pickers.PickerViewMode value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SuggestedStartLocation")]
		void put_SuggestedStartLocation(global::Windows.Storage.Pickers.PickerLocationId value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FileTypeFilter")]
		global::System.Collections.Generic.IList<string> get_FileTypeFilter();

		global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile> PickSingleFileAsync();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum PickerViewMode
	{
		List = 0,
		Thumbnail = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum PickerLocationId
	{
		DocumentsLibrary = 0,
		ComputerFolder = 1,
		Desktop = 2,
		Downloads = 3,
		HomeGroup = 4,
		MusicLibrary = 5,
		PicturesLibrary = 6,
		VideosLibrary = 7,
		Objects3D = 8,
		Unspecified = 9,
	}
}

namespace Windows.Storage.Search
{
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStorageFolderQueryOperations
	{
	}
}

namespace Windows.Storage.Streams
{
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRandomAccessStream : global::System.IDisposable, global::Windows.Storage.Streams.IInputStream, global::Windows.Storage.Streams.IOutputStream
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Size")]
		ulong get_Size();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Size")]
		void put_Size(ulong value);

		global::Windows.Storage.Streams.IInputStream GetInputStreamAt(ulong position);

		global::Windows.Storage.Streams.IOutputStream GetOutputStreamAt(ulong position);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Position")]
		ulong get_Position();

		void Seek(ulong position);

		global::Windows.Storage.Streams.IRandomAccessStream CloneStream();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CanRead")]
		bool get_CanRead();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CanWrite")]
		bool get_CanWrite();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IInputStream : global::System.IDisposable
	{
		global::Windows.Foundation.IAsyncOperationWithProgress<global::Windows.Storage.Streams.IBuffer, uint> ReadAsync(
					global::Windows.Storage.Streams.IBuffer buffer, 
					uint count, 
					global::Windows.Storage.Streams.InputStreamOptions options);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBuffer
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Capacity")]
		uint get_Capacity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Length")]
		uint get_Length();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Length")]
		void put_Length(uint value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IOutputStream : global::System.IDisposable
	{
		global::Windows.Foundation.IAsyncOperationWithProgress<uint, uint> WriteAsync(global::Windows.Storage.Streams.IBuffer buffer);

		global::Windows.Foundation.IAsyncOperation<bool> FlushAsync();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentTypeProvider
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentType")]
		string get_ContentType();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRandomAccessStreamReference
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IInputStreamReference
	{
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum InputStreamOptions : uint
	{
		None = 0x0u,
		Partial = 0x1u,
		ReadAhead = 0x2u,
	}
}

namespace Windows.System
{
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum VirtualKey
	{
		None = 0,
		LeftButton = 1,
		RightButton = 2,
		Cancel = 3,
		MiddleButton = 4,
		XButton1 = 5,
		XButton2 = 6,
		Back = 8,
		Tab = 9,
		Clear = 12,
		Enter = 13,
		Shift = 16,
		Control = 17,
		Menu = 18,
		Pause = 19,
		CapitalLock = 20,
		Kana = 21,
		Hangul = 21,
		ImeOn = 22,
		Junja = 23,
		Final = 24,
		Hanja = 25,
		Kanji = 25,
		ImeOff = 26,
		Escape = 27,
		Convert = 28,
		NonConvert = 29,
		Accept = 30,
		ModeChange = 31,
		Space = 32,
		PageUp = 33,
		PageDown = 34,
		End = 35,
		Home = 36,
		Left = 37,
		Up = 38,
		Right = 39,
		Down = 40,
		Select = 41,
		Print = 42,
		Execute = 43,
		Snapshot = 44,
		Insert = 45,
		Delete = 46,
		Help = 47,
		Number0 = 48,
		Number1 = 49,
		Number2 = 50,
		Number3 = 51,
		Number4 = 52,
		Number5 = 53,
		Number6 = 54,
		Number7 = 55,
		Number8 = 56,
		Number9 = 57,
		A = 65,
		B = 66,
		C = 67,
		D = 68,
		E = 69,
		F = 70,
		G = 71,
		H = 72,
		I = 73,
		J = 74,
		K = 75,
		L = 76,
		M = 77,
		N = 78,
		O = 79,
		P = 80,
		Q = 81,
		R = 82,
		S = 83,
		T = 84,
		U = 85,
		V = 86,
		W = 87,
		X = 88,
		Y = 89,
		Z = 90,
		LeftWindows = 91,
		RightWindows = 92,
		Application = 93,
		Sleep = 95,
		NumberPad0 = 96,
		NumberPad1 = 97,
		NumberPad2 = 98,
		NumberPad3 = 99,
		NumberPad4 = 100,
		NumberPad5 = 101,
		NumberPad6 = 102,
		NumberPad7 = 103,
		NumberPad8 = 104,
		NumberPad9 = 105,
		Multiply = 106,
		Add = 107,
		Separator = 108,
		Subtract = 109,
		Decimal = 110,
		Divide = 111,
		F1 = 112,
		F2 = 113,
		F3 = 114,
		F4 = 115,
		F5 = 116,
		F6 = 117,
		F7 = 118,
		F8 = 119,
		F9 = 120,
		F10 = 121,
		F11 = 122,
		F12 = 123,
		F13 = 124,
		F14 = 125,
		F15 = 126,
		F16 = 127,
		F17 = 128,
		F18 = 129,
		F19 = 130,
		F20 = 131,
		F21 = 132,
		F22 = 133,
		F23 = 134,
		F24 = 135,
		NavigationView = 136,
		NavigationMenu = 137,
		NavigationUp = 138,
		NavigationDown = 139,
		NavigationLeft = 140,
		NavigationRight = 141,
		NavigationAccept = 142,
		NavigationCancel = 143,
		NumberKeyLock = 144,
		Scroll = 145,
		LeftShift = 160,
		RightShift = 161,
		LeftControl = 162,
		RightControl = 163,
		LeftMenu = 164,
		RightMenu = 165,
		GoBack = 166,
		GoForward = 167,
		Refresh = 168,
		Stop = 169,
		Search = 170,
		Favorites = 171,
		GoHome = 172,
		GamepadA = 195,
		GamepadB = 196,
		GamepadX = 197,
		GamepadY = 198,
		GamepadRightShoulder = 199,
		GamepadLeftShoulder = 200,
		GamepadLeftTrigger = 201,
		GamepadRightTrigger = 202,
		GamepadDPadUp = 203,
		GamepadDPadDown = 204,
		GamepadDPadLeft = 205,
		GamepadDPadRight = 206,
		GamepadMenu = 207,
		GamepadView = 208,
		GamepadLeftThumbstickButton = 209,
		GamepadRightThumbstickButton = 210,
		GamepadLeftThumbstickUp = 211,
		GamepadLeftThumbstickDown = 212,
		GamepadLeftThumbstickRight = 213,
		GamepadLeftThumbstickLeft = 214,
		GamepadRightThumbstickUp = 215,
		GamepadRightThumbstickDown = 216,
		GamepadRightThumbstickRight = 217,
		GamepadRightThumbstickLeft = 218,
	}
}

namespace Windows.UI
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.IColors))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Colors : global::System.__ComObject, global::Windows.UI.IColors
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Beige")]
		public static global::Windows.UI.Color get_Beige()
		{
			global::Windows.UI.Color retval;
			retval = __Factory_Windows_UI__IColorsStatics_get_Beige("Windows.UI.Colors");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Color __Factory_Windows_UI__IColorsStatics_get_Beige(string typeName)
		{
			global::Windows.UI.Color __pRetVal;
			__pRetVal = global::Windows.UI.IColorsStatics__Impl.Stubs.get_Beige(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.IColorsStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MediumVioletRed")]
		public static global::Windows.UI.Color get_MediumVioletRed()
		{
			global::Windows.UI.Color retval;
			retval = __Factory_Windows_UI__IColorsStatics_get_MediumVioletRed("Windows.UI.Colors");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Color __Factory_Windows_UI__IColorsStatics_get_MediumVioletRed(string typeName)
		{
			global::Windows.UI.Color __pRetVal;
			__pRetVal = global::Windows.UI.IColorsStatics__Impl.Stubs.get_MediumVioletRed(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.IColorsStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public Colors(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IColorsStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Beige")]
		global::Windows.UI.Color get_Beige();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "MediumVioletRed")]
		global::Windows.UI.Color get_MediumVioletRed();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IColors
	{
	}
}

namespace Windows.UI.Composition
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ICompositionObject))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class CompositionObject : global::System.__ComObject, global::Windows.UI.Composition.ICompositionObject, global::System.IDisposable, global::Windows.UI.Composition.IAnimationObject
	{
		public virtual void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Compositor")]
		public virtual global::Windows.UI.Composition.Compositor get_Compositor()
		{
			global::Windows.UI.Composition.Compositor __retVal = global::Windows.UI.Composition.ICompositionObject__Impl.Stubs.get_Compositor(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual void StartAnimation(
					string propertyName, 
					global::Windows.UI.Composition.CompositionAnimation animation)
		{
			global::Windows.UI.Composition.ICompositionObject__Impl.Stubs.StartAnimation(
								this, 
								propertyName, 
								animation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CompositionObject(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ICompositor))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ICompositor3))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(131072)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Compositor : global::System.__ComObject, global::Windows.UI.Composition.ICompositor, global::Windows.UI.Composition.ICompositor3, global::System.IDisposable
	{
		public void Dispose()
		{
			global::System.IDisposable__Impl.Stubs.Close(this);
		}

		public global::Windows.UI.Composition.ExpressionAnimation CreateExpressionAnimation(string expression)
		{
			global::Windows.UI.Composition.ExpressionAnimation __retVal = global::Windows.UI.Composition.ICompositor__Impl.Stubs.CreateExpressionAnimation(
								this, 
								expression
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Composition.SpriteVisual CreateSpriteVisual()
		{
			global::Windows.UI.Composition.SpriteVisual __retVal = global::Windows.UI.Composition.ICompositor__Impl.Stubs.CreateSpriteVisual(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Composition.CompositionBackdropBrush CreateHostBackdropBrush()
		{
			global::Windows.UI.Composition.CompositionBackdropBrush __retVal = global::Windows.UI.Composition.ICompositor3__Impl.Stubs.CreateHostBackdropBrush(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public Compositor(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ICompositionAnimation))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class CompositionAnimation : global::Windows.UI.Composition.CompositionObject, global::Windows.UI.Composition.ICompositionAnimation
	{
		public virtual void SetReferenceParameter(
					string key, 
					global::Windows.UI.Composition.CompositionObject compositionObject)
		{
			global::Windows.UI.Composition.ICompositionAnimation__Impl.Stubs.SetReferenceParameter(
								this, 
								key, 
								compositionObject
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public CompositionAnimation(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.IExpressionAnimation))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ExpressionAnimation : global::Windows.UI.Composition.CompositionAnimation, global::Windows.UI.Composition.IExpressionAnimation
	{
		public ExpressionAnimation(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.IVisual))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Visual : global::Windows.UI.Composition.CompositionObject, global::Windows.UI.Composition.IVisual
	{
		public Visual(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.IContainerVisual))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ContainerVisual : global::Windows.UI.Composition.Visual, global::Windows.UI.Composition.IContainerVisual
	{
		public ContainerVisual(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ISpriteVisual))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SpriteVisual : global::Windows.UI.Composition.ContainerVisual, global::Windows.UI.Composition.ISpriteVisual
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Brush")]
		public void put_Brush(global::Windows.UI.Composition.CompositionBrush value)
		{
			global::Windows.UI.Composition.ISpriteVisual__Impl.Stubs.put_Brush(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SpriteVisual(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ICompositionBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class CompositionBrush : global::Windows.UI.Composition.CompositionObject, global::Windows.UI.Composition.ICompositionBrush
	{
		public CompositionBrush(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.ICompositionBackdropBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CompositionBackdropBrush : global::Windows.UI.Composition.CompositionBrush, global::Windows.UI.Composition.ICompositionBackdropBrush
	{
		public CompositionBackdropBrush(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Composition.IAnimationPropertyInfo))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AnimationPropertyInfo : global::Windows.UI.Composition.CompositionObject, global::Windows.UI.Composition.IAnimationPropertyInfo
	{
		public AnimationPropertyInfo(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICompositionObject
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Compositor")]
		global::Windows.UI.Composition.Compositor get_Compositor();

		void StartAnimation(
					string propertyName, 
					global::Windows.UI.Composition.CompositionAnimation animation);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICompositor
	{
		global::Windows.UI.Composition.ExpressionAnimation CreateExpressionAnimation(string expression);

		global::Windows.UI.Composition.SpriteVisual CreateSpriteVisual();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICompositionAnimation
	{
		void SetReferenceParameter(
					string key, 
					global::Windows.UI.Composition.CompositionObject compositionObject);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IExpressionAnimation
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IVisual
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContainerVisual
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISpriteVisual
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Brush")]
		void put_Brush(global::Windows.UI.Composition.CompositionBrush value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICompositionBrush
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICompositor3
	{
		global::Windows.UI.Composition.CompositionBackdropBrush CreateHostBackdropBrush();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICompositionBackdropBrush
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAnimationObject
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAnimationPropertyInfo
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IVisualElement
	{
	}
}

namespace Windows.UI.Core
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.ICoreWindow))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreWindow : global::System.__ComObject, global::Windows.UI.Core.ICoreWindow
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dispatcher")]
		public global::Windows.UI.Core.CoreDispatcher get_Dispatcher()
		{
			global::Windows.UI.Core.CoreDispatcher __retVal = global::Windows.UI.Core.ICoreWindow__Impl.Stubs.get_Dispatcher(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Core.CoreVirtualKeyStates GetKeyState(global::Windows.System.VirtualKey virtualKey)
		{
			global::Windows.UI.Core.CoreVirtualKeyStates __retVal = global::Windows.UI.Core.ICoreWindow__Impl.Stubs.GetKeyState(
								this, 
								virtualKey
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "KeyDown")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_KeyDown(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.KeyEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Core.ICoreWindow__Impl.Stubs.add_KeyDown(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "KeyDown")]
		public void remove_KeyDown(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken cookie)
		{
			global::Windows.UI.Core.ICoreWindow__Impl.Stubs.remove_KeyDown(
								this, 
								cookie
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static global::Windows.UI.Core.CoreWindow GetForCurrentThread()
		{
			global::Windows.UI.Core.CoreWindow retval;
			retval = __Factory_Windows_UI_Core__ICoreWindowStatic_GetForCurrentThread("Windows.UI.Core.CoreWindow");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Core.CoreWindow __Factory_Windows_UI_Core__ICoreWindowStatic_GetForCurrentThread(string typeName)
		{
			global::Windows.UI.Core.CoreWindow __pRetVal;
			__pRetVal = global::Windows.UI.Core.ICoreWindowStatic__Impl.Stubs.GetForCurrentThread(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.Core.ICoreWindowStatic).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public CoreWindow(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.ICoreDispatcher))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreDispatcher : global::System.__ComObject, global::Windows.UI.Core.ICoreDispatcher
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasThreadAccess")]
		public bool get_HasThreadAccess()
		{
			bool __retVal = global::Windows.UI.Core.ICoreDispatcher__Impl.Stubs.get_HasThreadAccess(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.Foundation.IAsyncAction RunAsync(
					global::Windows.UI.Core.CoreDispatcherPriority priority, 
					global::Windows.UI.Core.DispatchedHandler agileCallback)
		{
			global::Windows.Foundation.IAsyncAction __retVal = global::Windows.UI.Core.ICoreDispatcher__Impl.Stubs.RunAsync(
								this, 
								priority, 
								agileCallback
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public CoreDispatcher(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.IKeyEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class KeyEventArgs : global::System.__ComObject, global::Windows.UI.Core.IKeyEventArgs, global::Windows.UI.Core.ICoreWindowEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VirtualKey")]
		public global::Windows.System.VirtualKey get_VirtualKey()
		{
			global::Windows.System.VirtualKey __retVal = global::Windows.UI.Core.IKeyEventArgs__Impl.Stubs.get_VirtualKey(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public KeyEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.ICoreInputSourceBase))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreIndependentInputSource : global::System.__ComObject, global::Windows.UI.Core.ICoreInputSourceBase
	{
		public CoreIndependentInputSource(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.IWindowActivatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class WindowActivatedEventArgs : global::System.__ComObject, global::Windows.UI.Core.IWindowActivatedEventArgs, global::Windows.UI.Core.ICoreWindowEventArgs
	{
		public WindowActivatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.ICoreWindowEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CoreWindowEventArgs : global::System.__ComObject, global::Windows.UI.Core.ICoreWindowEventArgs
	{
		public CoreWindowEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.IWindowSizeChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class WindowSizeChangedEventArgs : global::System.__ComObject, global::Windows.UI.Core.IWindowSizeChangedEventArgs, global::Windows.UI.Core.ICoreWindowEventArgs
	{
		public WindowSizeChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Core.IVisibilityChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class VisibilityChangedEventArgs : global::System.__ComObject, global::Windows.UI.Core.IVisibilityChangedEventArgs, global::Windows.UI.Core.ICoreWindowEventArgs
	{
		public VisibilityChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreWindowStatic
	{
		global::Windows.UI.Core.CoreWindow GetForCurrentThread();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreWindow
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Dispatcher")]
		global::Windows.UI.Core.CoreDispatcher get_Dispatcher();

		global::Windows.UI.Core.CoreVirtualKeyStates GetKeyState(global::Windows.System.VirtualKey virtualKey);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "KeyDown")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_KeyDown(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.KeyEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "KeyDown")]
		void remove_KeyDown(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken cookie);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreDispatcher
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HasThreadAccess")]
		bool get_HasThreadAccess();

		global::Windows.Foundation.IAsyncAction RunAsync(
					global::Windows.UI.Core.CoreDispatcherPriority priority, 
					global::Windows.UI.Core.DispatchedHandler agileCallback);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void DispatchedHandler();

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IKeyEventArgs : global::Windows.UI.Core.ICoreWindowEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VirtualKey")]
		global::Windows.System.VirtualKey get_VirtualKey();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreWindowEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICoreInputSourceBase
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IWindowActivatedEventArgs : global::Windows.UI.Core.ICoreWindowEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IWindowSizeChangedEventArgs : global::Windows.UI.Core.ICoreWindowEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IVisibilityChangedEventArgs : global::Windows.UI.Core.ICoreWindowEventArgs
	{
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CoreDispatcherPriority
	{
		Idle = -2,
		Low = -1,
		Normal = 0,
		High = 1,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CoreVirtualKeyStates : uint
	{
		None = 0x0u,
		Down = 0x1u,
		Locked = 0x2u,
	}

	[global::System.Flags]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum CoreInputDeviceTypes : uint
	{
		None = 0x0u,
		Touch = 0x1u,
		Pen = 0x2u,
		Mouse = 0x4u,
	}
}

namespace Windows.UI.Input.Inking
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Input.Inking.IInkStroke))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class InkStroke : global::System.__ComObject, global::Windows.UI.Input.Inking.IInkStroke
	{
		public InkStroke(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IInkStroke
	{
	}
}

namespace Windows.UI.Notifications
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.IToastNotification))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ToastNotification : global::System.__ComObject, global::Windows.UI.Notifications.IToastNotification, global::Windows.UI.Notifications.IToastNotification2, global::Windows.UI.Notifications.IToastNotification3, global::Windows.UI.Notifications.IToastNotification4, global::Windows.UI.Notifications.IToastNotification6
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ToastNotification(global::Windows.Data.Xml.Dom.XmlDocument content)
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Notifications__IToastNotificationFactory_CreateToastNotification(
								"Windows.UI.Notifications.ToastNotification", 
								content
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Notifications__IToastNotificationFactory_CreateToastNotification(
					string typeName, 
					global::Windows.Data.Xml.Dom.XmlDocument content)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Windows.UI.Notifications.IToastNotificationFactory__Impl.Stubs.CreateToastNotification(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Notifications.IToastNotificationFactory).TypeHandle
												), 
								content
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public ToastNotification(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.IScheduledToastNotification))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ScheduledToastNotification : global::System.__ComObject, global::Windows.UI.Notifications.IScheduledToastNotification, global::Windows.UI.Notifications.IScheduledToastNotification2, global::Windows.UI.Notifications.IScheduledToastNotification3, global::Windows.UI.Notifications.IScheduledToastNotification4
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ScheduledToastNotification(
					global::Windows.Data.Xml.Dom.XmlDocument content, 
					global::System.DateTimeOffset deliveryTime)
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Notifications__IScheduledToastNotificationFactory_CreateScheduledToastNotification(
								"Windows.UI.Notifications.ScheduledToastNotification", 
								content, 
								deliveryTime
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Notifications__IScheduledToastNotificationFactory_CreateScheduledToastNotification(
					string typeName, 
					global::Windows.Data.Xml.Dom.XmlDocument content, 
					global::System.DateTimeOffset deliveryTime)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Windows.UI.Notifications.IScheduledToastNotificationFactory__Impl.Stubs.CreateScheduledToastNotification(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Notifications.IScheduledToastNotificationFactory).TypeHandle
												), 
								content, 
								deliveryTime
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public ScheduledToastNotification(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.INotificationData))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(262144)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class NotificationData : global::System.__ComObject, global::Windows.UI.Notifications.INotificationData
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public NotificationData()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Notifications.NotificationData");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Values")]
		public global::System.Collections.Generic.IDictionary<string, string> get_Values()
		{
			global::System.Collections.Generic.IDictionary<string, string> __retVal = global::Windows.UI.Notifications.INotificationData__Impl.Stubs.get_Values(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SequenceNumber")]
		public void put_SequenceNumber(uint value)
		{
			global::Windows.UI.Notifications.INotificationData__Impl.Stubs.put_SequenceNumber(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public NotificationData(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.IToastNotifier))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.IToastNotifier2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ToastNotifier : global::System.__ComObject, global::Windows.UI.Notifications.IToastNotifier, global::Windows.UI.Notifications.IToastNotifier2
	{
		public void Show(global::Windows.UI.Notifications.ToastNotification notification)
		{
			global::Windows.UI.Notifications.IToastNotifier__Impl.Stubs.Show(
								this, 
								notification
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Hide(global::Windows.UI.Notifications.ToastNotification notification)
		{
			global::Windows.UI.Notifications.IToastNotifier__Impl.Stubs.Hide(
								this, 
								notification
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Setting")]
		public global::Windows.UI.Notifications.NotificationSetting get_Setting()
		{
			global::Windows.UI.Notifications.NotificationSetting __retVal = global::Windows.UI.Notifications.IToastNotifier__Impl.Stubs.get_Setting(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void AddToSchedule(global::Windows.UI.Notifications.ScheduledToastNotification scheduledToast)
		{
			global::Windows.UI.Notifications.IToastNotifier__Impl.Stubs.AddToSchedule(
								this, 
								scheduledToast
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void RemoveFromSchedule(global::Windows.UI.Notifications.ScheduledToastNotification scheduledToast)
		{
			global::Windows.UI.Notifications.IToastNotifier__Impl.Stubs.RemoveFromSchedule(
								this, 
								scheduledToast
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ScheduledToastNotification> GetScheduledToastNotifications()
		{
			global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ScheduledToastNotification> __retVal = global::Windows.UI.Notifications.IToastNotifier__Impl.Stubs.GetScheduledToastNotifications(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Notifications.NotificationUpdateResult Update(
					global::Windows.UI.Notifications.NotificationData data, 
					string tag, 
					string group)
		{
			global::Windows.UI.Notifications.NotificationUpdateResult __retVal = global::Windows.UI.Notifications.IToastNotifier2__Impl.Stubs.Update(
								this, 
								data, 
								tag, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::Windows.UI.Notifications.NotificationUpdateResult Update(
					global::Windows.UI.Notifications.NotificationData data, 
					string tag)
		{
			global::Windows.UI.Notifications.NotificationUpdateResult __retVal = global::Windows.UI.Notifications.IToastNotifier2__Impl.Stubs.Update(
								this, 
								data, 
								tag
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public ToastNotifier(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.ITileNotification))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TileNotification : global::System.__ComObject, global::Windows.UI.Notifications.ITileNotification
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TileNotification(global::Windows.Data.Xml.Dom.XmlDocument content)
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Notifications__ITileNotificationFactory_CreateTileNotification(
								"Windows.UI.Notifications.TileNotification", 
								content
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Notifications__ITileNotificationFactory_CreateTileNotification(
					string typeName, 
					global::Windows.Data.Xml.Dom.XmlDocument content)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Windows.UI.Notifications.ITileNotificationFactory__Impl.Stubs.CreateTileNotification(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Notifications.ITileNotificationFactory).TypeHandle
												), 
								content
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public TileNotification(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.ITileUpdater))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TileUpdater : global::System.__ComObject, global::Windows.UI.Notifications.ITileUpdater
	{
		public void Update(global::Windows.UI.Notifications.TileNotification notification)
		{
			global::Windows.UI.Notifications.ITileUpdater__Impl.Stubs.Update(
								this, 
								notification
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Clear()
		{
			global::Windows.UI.Notifications.ITileUpdater__Impl.Stubs.Clear(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void EnableNotificationQueue(bool enable)
		{
			global::Windows.UI.Notifications.ITileUpdater__Impl.Stubs.EnableNotificationQueue(
								this, 
								enable
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TileUpdater(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TileUpdateManager : global::System.__ComObject
	{
		public static global::Windows.UI.Notifications.TileUpdater CreateTileUpdaterForApplication()
		{
			global::Windows.UI.Notifications.TileUpdater retval;
			retval = __Factory_Windows_UI_Notifications__ITileUpdateManagerStatics_CreateTileUpdaterForApplication("Windows.UI.Notifications.TileUpdateManager");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Notifications.TileUpdater __Factory_Windows_UI_Notifications__ITileUpdateManagerStatics_CreateTileUpdaterForApplication(string typeName)
		{
			global::Windows.UI.Notifications.TileUpdater __pRetVal;
			__pRetVal = global::Windows.UI.Notifications.ITileUpdateManagerStatics__Impl.Stubs.CreateTileUpdaterForApplication(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.Notifications.ITileUpdateManagerStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public TileUpdateManager(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.IToastNotificationHistory))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Notifications.IToastNotificationHistory2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ToastNotificationHistory : global::System.__ComObject, global::Windows.UI.Notifications.IToastNotificationHistory2, global::Windows.UI.Notifications.IToastNotificationHistory
	{
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ToastNotification> GetHistory()
		{
			global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ToastNotification> __retVal = global::Windows.UI.Notifications.IToastNotificationHistory2__Impl.Stubs.GetHistory(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ToastNotification> GetHistory(string applicationId)
		{
			global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ToastNotification> __retVal = global::Windows.UI.Notifications.IToastNotificationHistory2__Impl.Stubs.GetHistory(
								this, 
								applicationId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public void RemoveGroup(string group)
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.RemoveGroup(
								this, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void RemoveGroup(
					string group, 
					string applicationId)
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.RemoveGroup(
								this, 
								group, 
								applicationId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Remove(
					string tag, 
					string group, 
					string applicationId)
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.Remove(
								this, 
								tag, 
								group, 
								applicationId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Remove(
					string tag, 
					string group)
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.Remove(
								this, 
								tag, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Remove(string tag)
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.Remove(
								this, 
								tag
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Clear()
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.Clear(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Clear(string applicationId)
		{
			global::Windows.UI.Notifications.IToastNotificationHistory__Impl.Stubs.Clear(
								this, 
								applicationId
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ToastNotificationHistory(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ToastNotificationManager : global::System.__ComObject
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "History")]
		public static global::Windows.UI.Notifications.ToastNotificationHistory get_History()
		{
			global::Windows.UI.Notifications.ToastNotificationHistory retval;
			retval = __Factory_Windows_UI_Notifications__IToastNotificationManagerStatics2_get_History("Windows.UI.Notifications.ToastNotificationManager");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Notifications.ToastNotificationHistory __Factory_Windows_UI_Notifications__IToastNotificationManagerStatics2_get_History(string typeName)
		{
			global::Windows.UI.Notifications.ToastNotificationHistory __pRetVal;
			__pRetVal = global::Windows.UI.Notifications.IToastNotificationManagerStatics2__Impl.Stubs.get_History(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.Notifications.IToastNotificationManagerStatics2).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static global::Windows.UI.Notifications.ToastNotifier CreateToastNotifier()
		{
			global::Windows.UI.Notifications.ToastNotifier retval;
			retval = __Factory_Windows_UI_Notifications__IToastNotificationManagerStatics_CreateToastNotifier("Windows.UI.Notifications.ToastNotificationManager");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Notifications.ToastNotifier __Factory_Windows_UI_Notifications__IToastNotificationManagerStatics_CreateToastNotifier(string typeName)
		{
			global::Windows.UI.Notifications.ToastNotifier __pRetVal;
			__pRetVal = global::Windows.UI.Notifications.IToastNotificationManagerStatics__Impl.Stubs.CreateToastNotifier(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.Notifications.IToastNotificationManagerStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public ToastNotificationManager(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotificationFactory
	{
		global::System.IntPtr CreateToastNotification(global::Windows.Data.Xml.Dom.XmlDocument content);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotification
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotification2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotification3
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotification4
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotification6
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScheduledToastNotificationFactory
	{
		global::System.IntPtr CreateScheduledToastNotification(
					global::Windows.Data.Xml.Dom.XmlDocument content, 
					global::System.DateTimeOffset deliveryTime);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScheduledToastNotification
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScheduledToastNotification2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScheduledToastNotification3
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScheduledToastNotification4
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INotificationData
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Values")]
		global::System.Collections.Generic.IDictionary<string, string> get_Values();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SequenceNumber")]
		void put_SequenceNumber(uint value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotifier
	{
		void Show(global::Windows.UI.Notifications.ToastNotification notification);

		void Hide(global::Windows.UI.Notifications.ToastNotification notification);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Setting")]
		global::Windows.UI.Notifications.NotificationSetting get_Setting();

		void AddToSchedule(global::Windows.UI.Notifications.ScheduledToastNotification scheduledToast);

		void RemoveFromSchedule(global::Windows.UI.Notifications.ScheduledToastNotification scheduledToast);

		global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ScheduledToastNotification> GetScheduledToastNotifications();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotifier2
	{
		global::Windows.UI.Notifications.NotificationUpdateResult Update(
					global::Windows.UI.Notifications.NotificationData data, 
					string tag, 
					string group);

		global::Windows.UI.Notifications.NotificationUpdateResult Update(
					global::Windows.UI.Notifications.NotificationData data, 
					string tag);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITileNotificationFactory
	{
		global::System.IntPtr CreateTileNotification(global::Windows.Data.Xml.Dom.XmlDocument content);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITileNotification
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITileUpdater
	{
		void Update(global::Windows.UI.Notifications.TileNotification notification);

		void Clear();

		void EnableNotificationQueue(bool enable);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITileUpdateManagerStatics
	{
		global::Windows.UI.Notifications.TileUpdater CreateTileUpdaterForApplication();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotificationHistory
	{
		void RemoveGroup(string group);

		void RemoveGroup(
					string group, 
					string applicationId);

		void Remove(
					string tag, 
					string group, 
					string applicationId);

		void Remove(
					string tag, 
					string group);

		void Remove(string tag);

		void Clear();

		void Clear(string applicationId);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotificationHistory2
	{
		global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ToastNotification> GetHistory();

		global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Notifications.ToastNotification> GetHistory(string applicationId);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotificationManagerStatics2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "History")]
		global::Windows.UI.Notifications.ToastNotificationHistory get_History();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IToastNotificationManagerStatics
	{
		global::Windows.UI.Notifications.ToastNotifier CreateToastNotifier();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum NotificationSetting
	{
		Enabled = 0,
		DisabledForApplication = 1,
		DisabledForUser = 2,
		DisabledByGroupPolicy = 3,
		DisabledByManifest = 4,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum NotificationUpdateResult
	{
		Succeeded = 0,
		Failed = 1,
		NotificationNotFound = 2,
	}
}

namespace Windows.UI.Text
{
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct FontWeight
	{
		public ushort Weight;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum FontStretch
	{
		Undefined = 0,
		UltraCondensed = 1,
		ExtraCondensed = 2,
		Condensed = 3,
		SemiCondensed = 4,
		Normal = 5,
		SemiExpanded = 6,
		Expanded = 7,
		ExtraExpanded = 8,
		UltraExpanded = 9,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum FontStyle
	{
		Normal = 0,
		Oblique = 1,
		Italic = 2,
	}
}

namespace Windows.UI.ViewManagement
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.ViewManagement.IApplicationView))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.ViewManagement.IApplicationView3))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ApplicationView : global::System.__ComObject, global::Windows.UI.ViewManagement.IApplicationView, global::Windows.UI.ViewManagement.IApplicationView3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TitleBar")]
		public global::Windows.UI.ViewManagement.ApplicationViewTitleBar get_TitleBar()
		{
			global::Windows.UI.ViewManagement.ApplicationViewTitleBar __retVal = global::Windows.UI.ViewManagement.IApplicationView3__Impl.Stubs.get_TitleBar(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static global::Windows.UI.ViewManagement.ApplicationView GetForCurrentView()
		{
			global::Windows.UI.ViewManagement.ApplicationView retval;
			retval = __Factory_Windows_UI_ViewManagement__IApplicationViewStatics2_GetForCurrentView("Windows.UI.ViewManagement.ApplicationView");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.ViewManagement.ApplicationView __Factory_Windows_UI_ViewManagement__IApplicationViewStatics2_GetForCurrentView(string typeName)
		{
			global::Windows.UI.ViewManagement.ApplicationView __pRetVal;
			__pRetVal = global::Windows.UI.ViewManagement.IApplicationViewStatics2__Impl.Stubs.GetForCurrentView(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.ViewManagement.IApplicationViewStatics2).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public ApplicationView(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.ViewManagement.IApplicationViewTitleBar))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ApplicationViewTitleBar : global::System.__ComObject, global::Windows.UI.ViewManagement.IApplicationViewTitleBar
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ButtonBackgroundColor")]
		public void put_ButtonBackgroundColor(global::System.Nullable<global::Windows.UI.Color> value)
		{
			global::Windows.UI.ViewManagement.IApplicationViewTitleBar__Impl.Stubs.put_ButtonBackgroundColor(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ApplicationViewTitleBar(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationViewStatics2
	{
		global::Windows.UI.ViewManagement.ApplicationView GetForCurrentView();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationView
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationView3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TitleBar")]
		global::Windows.UI.ViewManagement.ApplicationViewTitleBar get_TitleBar();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationViewTitleBar
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ButtonBackgroundColor")]
		void put_ButtonBackgroundColor(global::System.Nullable<global::Windows.UI.Color> value);
	}
}

namespace Windows.UI.Xaml
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDependencyObject))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class DependencyObject : global::System.__ComObject, global::Windows.UI.Xaml.IDependencyObject, global::Windows.UI.Xaml.IDependencyObject2
	{
		public virtual object GetValue(global::Windows.UI.Xaml.DependencyProperty dp)
		{
			object __retVal = global::Windows.UI.Xaml.IDependencyObject__Impl.Stubs.GetValue(
								this, 
								dp
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public virtual void SetValue(
					global::Windows.UI.Xaml.DependencyProperty dp, 
					object value)
		{
			global::Windows.UI.Xaml.IDependencyObject__Impl.Stubs.SetValue(
								this, 
								dp, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DependencyObject(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDependencyProperty))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DependencyProperty : global::System.__ComObject, global::Windows.UI.Xaml.IDependencyProperty
	{
		public static global::Windows.UI.Xaml.DependencyProperty Register(
					string name, 
					global::System.Type propertyType, 
					global::System.Type ownerType, 
					global::Windows.UI.Xaml.PropertyMetadata typeMetadata)
		{
			global::Windows.UI.Xaml.DependencyProperty retval;
			retval = __Factory_Windows_UI_Xaml__IDependencyPropertyStatics_Register(
								"Windows.UI.Xaml.DependencyProperty", 
								name, 
								propertyType, 
								ownerType, 
								typeMetadata
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Xaml.DependencyProperty __Factory_Windows_UI_Xaml__IDependencyPropertyStatics_Register(
					string typeName, 
					string name, 
					global::System.Type propertyType, 
					global::System.Type ownerType, 
					global::Windows.UI.Xaml.PropertyMetadata typeMetadata)
		{
			global::Windows.UI.Xaml.DependencyProperty __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.IDependencyPropertyStatics__Impl.Stubs.Register(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.IDependencyPropertyStatics).TypeHandle
												), 
								name, 
								propertyType, 
								ownerType, 
								typeMetadata
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public DependencyProperty(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IPropertyMetadata))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class PropertyMetadata : global::System.__ComObject, global::Windows.UI.Xaml.IPropertyMetadata
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PropertyMetadata(object defaultValue)
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml__IPropertyMetadataFactory_CreateInstanceWithDefaultValue(
								"Windows.UI.Xaml.PropertyMetadata", 
								defaultValue
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml__IPropertyMetadataFactory_CreateInstanceWithDefaultValue(
					string typeName, 
					object defaultValue)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.PropertyMetadata).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.IPropertyMetadataFactory__Impl.Stubs.CreateInstanceWithDefaultValue(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IPropertyMetadataFactory).TypeHandle
													), 
									defaultValue, 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.IPropertyMetadataFactory__Impl.Stubs.CreateInstanceWithDefaultValue(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IPropertyMetadataFactory).TypeHandle
													), 
									defaultValue, 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		public PropertyMetadata(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElement))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElement3))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElement4))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElement5))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElement7))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElement8))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElementOverrides))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElementOverrides7))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElementOverrides8))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUIElementOverrides9))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class UIElement : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.IUIElement, global::Windows.UI.Xaml.IUIElement2, global::Windows.UI.Xaml.IUIElement3, global::Windows.UI.Xaml.IUIElement4, global::Windows.UI.Xaml.IUIElement5, global::Windows.UI.Xaml.IUIElement7, global::Windows.UI.Xaml.IUIElement8, global::Windows.UI.Xaml.IUIElement9, global::Windows.UI.Xaml.IUIElement10, global::Windows.UI.Xaml.IUIElementOverrides, global::Windows.UI.Xaml.IUIElementOverrides7, global::Windows.UI.Xaml.IUIElementOverrides8, global::Windows.UI.Xaml.IUIElementOverrides9, global::Windows.UI.Composition.IAnimationObject, global::Windows.UI.Composition.IVisualElement
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		public virtual double get_Opacity()
		{
			double __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.get_Opacity(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		public virtual void put_Opacity(double value)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.put_Opacity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "KeyUp")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_KeyUp(global::Windows.UI.Xaml.Input.KeyEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_KeyUp(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "KeyUp")]
		public virtual void remove_KeyUp(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_KeyUp(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "KeyDown")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_KeyDown(global::Windows.UI.Xaml.Input.KeyEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_KeyDown(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "KeyDown")]
		public virtual void remove_KeyDown(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_KeyDown(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GotFocus")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GotFocus(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_GotFocus(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GotFocus")]
		public virtual void remove_GotFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_GotFocus(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LostFocus")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LostFocus(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_LostFocus(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LostFocus")]
		public virtual void remove_LostFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_LostFocus(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragEnter")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragEnter(global::Windows.UI.Xaml.DragEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_DragEnter(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragEnter")]
		public virtual void remove_DragEnter(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_DragEnter(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragLeave")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragLeave(global::Windows.UI.Xaml.DragEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_DragLeave(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragLeave")]
		public virtual void remove_DragLeave(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_DragLeave(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragOver")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragOver(global::Windows.UI.Xaml.DragEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_DragOver(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragOver")]
		public virtual void remove_DragOver(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_DragOver(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Drop")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Drop(global::Windows.UI.Xaml.DragEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_Drop(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Drop")]
		public virtual void remove_Drop(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_Drop(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerPressed")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerPressed(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerPressed(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerPressed")]
		public virtual void remove_PointerPressed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerPressed(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerMoved")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerMoved(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerMoved(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerMoved")]
		public virtual void remove_PointerMoved(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerMoved(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerReleased")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerReleased(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerReleased(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerReleased")]
		public virtual void remove_PointerReleased(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerReleased(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerEntered")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerEntered(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerEntered(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerEntered")]
		public virtual void remove_PointerEntered(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerEntered(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerExited")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerExited(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerExited(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerExited")]
		public virtual void remove_PointerExited(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerExited(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerCaptureLost")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerCaptureLost(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerCaptureLost(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerCaptureLost")]
		public virtual void remove_PointerCaptureLost(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerCaptureLost(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerCanceled")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerCanceled(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerCanceled(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerCanceled")]
		public virtual void remove_PointerCanceled(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerCanceled(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerWheelChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerWheelChanged(global::Windows.UI.Xaml.Input.PointerEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_PointerWheelChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerWheelChanged")]
		public virtual void remove_PointerWheelChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_PointerWheelChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Tapped")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Tapped(global::Windows.UI.Xaml.Input.TappedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_Tapped(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Tapped")]
		public virtual void remove_Tapped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_Tapped(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DoubleTapped")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DoubleTapped(global::Windows.UI.Xaml.Input.DoubleTappedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_DoubleTapped(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DoubleTapped")]
		public virtual void remove_DoubleTapped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_DoubleTapped(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Holding")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Holding(global::Windows.UI.Xaml.Input.HoldingEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_Holding(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Holding")]
		public virtual void remove_Holding(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_Holding(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RightTapped")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RightTapped(global::Windows.UI.Xaml.Input.RightTappedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_RightTapped(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RightTapped")]
		public virtual void remove_RightTapped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_RightTapped(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationStarting")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationStarting(global::Windows.UI.Xaml.Input.ManipulationStartingEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_ManipulationStarting(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationStarting")]
		public virtual void remove_ManipulationStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_ManipulationStarting(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationInertiaStarting")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationInertiaStarting(global::Windows.UI.Xaml.Input.ManipulationInertiaStartingEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_ManipulationInertiaStarting(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationInertiaStarting")]
		public virtual void remove_ManipulationInertiaStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_ManipulationInertiaStarting(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationStarted")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationStarted(global::Windows.UI.Xaml.Input.ManipulationStartedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_ManipulationStarted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationStarted")]
		public virtual void remove_ManipulationStarted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_ManipulationStarted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationDelta")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationDelta(global::Windows.UI.Xaml.Input.ManipulationDeltaEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_ManipulationDelta(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationDelta")]
		public virtual void remove_ManipulationDelta(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_ManipulationDelta(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationCompleted")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationCompleted(global::Windows.UI.Xaml.Input.ManipulationCompletedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement__Impl.Stubs.add_ManipulationCompleted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationCompleted")]
		public virtual void remove_ManipulationCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement__Impl.Stubs.remove_ManipulationCompleted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragStarting")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragStarting(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.DragStartingEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement3__Impl.Stubs.add_DragStarting(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragStarting")]
		public virtual void remove_DragStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement3__Impl.Stubs.remove_DragStarting(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DropCompleted")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DropCompleted(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.DropCompletedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement3__Impl.Stubs.add_DropCompleted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DropCompleted")]
		public virtual void remove_DropCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement3__Impl.Stubs.remove_DropCompleted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextRequested")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.ContextRequestedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.add_ContextRequested(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextRequested")]
		public virtual void remove_ContextRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.remove_ContextRequested(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextCanceled")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextCanceled(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.RoutedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.add_ContextCanceled(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextCanceled")]
		public virtual void remove_ContextCanceled(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.remove_ContextCanceled(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AccessKeyDisplayRequested")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AccessKeyDisplayRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.add_AccessKeyDisplayRequested(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AccessKeyDisplayRequested")]
		public virtual void remove_AccessKeyDisplayRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.remove_AccessKeyDisplayRequested(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AccessKeyDisplayDismissed")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AccessKeyDisplayDismissed(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.add_AccessKeyDisplayDismissed(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AccessKeyDisplayDismissed")]
		public virtual void remove_AccessKeyDisplayDismissed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.remove_AccessKeyDisplayDismissed(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AccessKeyInvoked")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AccessKeyInvoked(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.add_AccessKeyInvoked(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AccessKeyInvoked")]
		public virtual void remove_AccessKeyInvoked(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement4__Impl.Stubs.remove_AccessKeyInvoked(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GettingFocus")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GettingFocus(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.GettingFocusEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement5__Impl.Stubs.add_GettingFocus(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GettingFocus")]
		public virtual void remove_GettingFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement5__Impl.Stubs.remove_GettingFocus(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LosingFocus")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LosingFocus(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.LosingFocusEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement5__Impl.Stubs.add_LosingFocus(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LosingFocus")]
		public virtual void remove_LosingFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement5__Impl.Stubs.remove_LosingFocus(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "NoFocusCandidateFound")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_NoFocusCandidateFound(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement5__Impl.Stubs.add_NoFocusCandidateFound(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "NoFocusCandidateFound")]
		public virtual void remove_NoFocusCandidateFound(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement5__Impl.Stubs.remove_NoFocusCandidateFound(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CharacterReceived")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CharacterReceived(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.add_CharacterReceived(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CharacterReceived")]
		public virtual void remove_CharacterReceived(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.remove_CharacterReceived(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ProcessKeyboardAccelerators")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ProcessKeyboardAccelerators(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.add_ProcessKeyboardAccelerators(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ProcessKeyboardAccelerators")]
		public virtual void remove_ProcessKeyboardAccelerators(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.remove_ProcessKeyboardAccelerators(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PreviewKeyDown")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PreviewKeyDown(global::Windows.UI.Xaml.Input.KeyEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.add_PreviewKeyDown(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PreviewKeyDown")]
		public virtual void remove_PreviewKeyDown(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.remove_PreviewKeyDown(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PreviewKeyUp")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PreviewKeyUp(global::Windows.UI.Xaml.Input.KeyEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.add_PreviewKeyUp(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PreviewKeyUp")]
		public virtual void remove_PreviewKeyUp(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement7__Impl.Stubs.remove_PreviewKeyUp(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "BringIntoViewRequested")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_BringIntoViewRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IUIElement8__Impl.Stubs.add_BringIntoViewRequested(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "BringIntoViewRequested")]
		public virtual void remove_BringIntoViewRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IUIElement8__Impl.Stubs.remove_BringIntoViewRequested(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer global::Windows.UI.Xaml.IUIElementOverrides.OnCreateAutomationPeer()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal_1 = this.OnCreateAutomationPeer();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal = global::Windows.UI.Xaml.IUIElementOverrides__Impl.Stubs.OnCreateAutomationPeer(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.IUIElementOverrides.OnDisconnectVisualChildren()
		{
			this.OnDisconnectVisualChildren();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnDisconnectVisualChildren()
		{
			global::Windows.UI.Xaml.IUIElementOverrides__Impl.Stubs.OnDisconnectVisualChildren(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> global::Windows.UI.Xaml.IUIElementOverrides.FindSubElementsForTouchTargeting(
					global::Windows.Foundation.Point point, 
					global::Windows.Foundation.Rect boundingRect)
		{
			global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> __retVal_1 = this.FindSubElementsForTouchTargeting(
								point, 
								boundingRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> FindSubElementsForTouchTargeting(
					global::Windows.Foundation.Point point, 
					global::Windows.Foundation.Rect boundingRect)
		{
			global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> __retVal = global::Windows.UI.Xaml.IUIElementOverrides__Impl.Stubs.FindSubElementsForTouchTargeting(
								this, 
								point, 
								boundingRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.DependencyObject> global::Windows.UI.Xaml.IUIElementOverrides7.GetChildrenInTabFocusOrder()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.DependencyObject> __retVal_1 = this.GetChildrenInTabFocusOrder();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.DependencyObject> GetChildrenInTabFocusOrder()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.DependencyObject> __retVal = global::Windows.UI.Xaml.IUIElementOverrides7__Impl.Stubs.GetChildrenInTabFocusOrder(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.IUIElementOverrides7.OnProcessKeyboardAccelerators(global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)
		{
			this.OnProcessKeyboardAccelerators(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnProcessKeyboardAccelerators(global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args)
		{
			global::Windows.UI.Xaml.IUIElementOverrides7__Impl.Stubs.OnProcessKeyboardAccelerators(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IUIElementOverrides8.OnKeyboardAcceleratorInvoked(global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args)
		{
			this.OnKeyboardAcceleratorInvoked(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnKeyboardAcceleratorInvoked(global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args)
		{
			global::Windows.UI.Xaml.IUIElementOverrides8__Impl.Stubs.OnKeyboardAcceleratorInvoked(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IUIElementOverrides8.OnBringIntoViewRequested(global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs e)
		{
			this.OnBringIntoViewRequested(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnBringIntoViewRequested(global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs e)
		{
			global::Windows.UI.Xaml.IUIElementOverrides8__Impl.Stubs.OnBringIntoViewRequested(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IUIElementOverrides9.PopulatePropertyInfoOverride(
					string propertyName, 
					global::Windows.UI.Composition.AnimationPropertyInfo animationPropertyInfo)
		{
			this.PopulatePropertyInfoOverride(
								propertyName, 
								animationPropertyInfo
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void PopulatePropertyInfoOverride(
					string propertyName, 
					global::Windows.UI.Composition.AnimationPropertyInfo animationPropertyInfo)
		{
			global::Windows.UI.Xaml.IUIElementOverrides9__Impl.Stubs.PopulatePropertyInfoOverride(
								this, 
								propertyName, 
								animationPropertyInfo
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public UIElement(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class RoutedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.IRoutedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public RoutedEventArgs()
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml__IRoutedEventArgsFactory_CreateInstance("Windows.UI.Xaml.RoutedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml__IRoutedEventArgsFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.RoutedEventArgs).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.IRoutedEventArgsFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IRoutedEventArgsFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.IRoutedEventArgsFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IRoutedEventArgsFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		public RoutedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDragEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DragEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.IDragEventArgs
	{
		public DragEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDragStartingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DragStartingEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.IDragStartingEventArgs
	{
		public DragStartingEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDropCompletedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DropCompletedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.IDropCompletedEventArgs
	{
		public DropCompletedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IBringIntoViewRequestedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class BringIntoViewRequestedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.IBringIntoViewRequestedEventArgs
	{
		public BringIntoViewRequestedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IResourceDictionary))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IDictionary<object, object>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.ICollection<object>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<object, object>>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ResourceDictionary : global::Windows.UI.Xaml.DependencyObject, global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>, global::System.Collections.Generic.IDictionary<object, object>, global::Windows.UI.Xaml.IResourceDictionary, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<object, object>>
	{
		int global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Count(((global::System.Collections.Generic.IDictionary<object, object>)this));
			}
		}

		bool global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.IsReadOnly
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.IsReadOnly(((global::System.Collections.Generic.IDictionary<object, object>)this));
			}
		}

		void global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.Add(global::System.Collections.Generic.KeyValuePair<object, object> item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Add(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.Clear()
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Clear(((global::System.Collections.Generic.IDictionary<object, object>)this));
		}

		bool global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.Contains(global::System.Collections.Generic.KeyValuePair<object, object> item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Contains(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.CopyTo(
					global::System.Collections.Generic.KeyValuePair<object, object>[] array, 
					int arrayindex)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.CopyTo(
								this, 
								array, 
								arrayindex
							);
		}

		bool global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<object, object>>.Remove(global::System.Collections.Generic.KeyValuePair<object, object> item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Remove(
								this, 
								item
							);
		}

		object global::System.Collections.Generic.IDictionary<object, object>.this[object index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IDictionary<object, object>)this), 
									index
								);
			}
			set
			{
				global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Indexer_Set(
									this, 
									index, 
									value
								);
			}
		}

		global::System.Collections.Generic.ICollection<object> global::System.Collections.Generic.IDictionary<object, object>.Keys
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Keys(((global::System.Collections.Generic.IDictionary<object, object>)this));
			}
		}

		global::System.Collections.Generic.ICollection<object> global::System.Collections.Generic.IDictionary<object, object>.Values
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Values(((global::System.Collections.Generic.IDictionary<object, object>)this));
			}
		}

		void global::System.Collections.Generic.IDictionary<object, object>.Add(
					object key, 
					object value)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Add(
								this, 
								key, 
								value
							);
		}

		bool global::System.Collections.Generic.IDictionary<object, object>.ContainsKey(object key)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.ContainsKey(
								((global::System.Collections.Generic.IDictionary<object, object>)this), 
								key
							);
		}

		bool global::System.Collections.Generic.IDictionary<object, object>.Remove(object key)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.Remove(
								((global::System.Collections.Generic.IDictionary<object, object>)this), 
								key
							);
		}

		bool global::System.Collections.Generic.IDictionary<object, object>.TryGetValue(
					object key, 
					out object value)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IMapSharedReferenceTypesRCWAdapter.TryGetValue(
								this, 
								key, 
								out value
							);
		}

		global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<object, object>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<object, object>>.GetEnumerator()
		{
			return (global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<object, object>>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<object, object>>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<object, object>>).TypeHandle
							);
		}

		public ResourceDictionary(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IStyle))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Style : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.IStyle
	{
		public Style(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElement))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElement2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElement3))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElement6))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElement7))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElementProtected7))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElementOverrides))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkElementOverrides2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class FrameworkElement : global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.IFrameworkElement, global::Windows.UI.Xaml.IFrameworkElement2, global::Windows.UI.Xaml.IFrameworkElement3, global::Windows.UI.Xaml.IFrameworkElement6, global::Windows.UI.Xaml.IFrameworkElement7, global::Windows.UI.Xaml.IFrameworkElementProtected7, global::Windows.UI.Xaml.IFrameworkElementOverrides, global::Windows.UI.Xaml.IFrameworkElementOverrides2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Resources")]
		public virtual global::Windows.UI.Xaml.ResourceDictionary get_Resources()
		{
			global::Windows.UI.Xaml.ResourceDictionary __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_Resources(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Resources")]
		public virtual void put_Resources(global::Windows.UI.Xaml.ResourceDictionary value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Resources(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Language")]
		public virtual void put_Language(string value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Language(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ActualWidth")]
		public virtual double get_ActualWidth()
		{
			double __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_ActualWidth(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ActualHeight")]
		public virtual double get_ActualHeight()
		{
			double __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_ActualHeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Width")]
		public virtual double get_Width()
		{
			double __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_Width(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Width")]
		public virtual void put_Width(double value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Width(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Height")]
		public virtual double get_Height()
		{
			double __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_Height(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Height")]
		public virtual void put_Height(double value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Height(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalAlignment")]
		public virtual global::Windows.UI.Xaml.HorizontalAlignment get_HorizontalAlignment()
		{
			global::Windows.UI.Xaml.HorizontalAlignment __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_HorizontalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalAlignment")]
		public virtual void put_HorizontalAlignment(global::Windows.UI.Xaml.HorizontalAlignment value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_HorizontalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalAlignment")]
		public virtual global::Windows.UI.Xaml.VerticalAlignment get_VerticalAlignment()
		{
			global::Windows.UI.Xaml.VerticalAlignment __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_VerticalAlignment(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalAlignment")]
		public virtual void put_VerticalAlignment(global::Windows.UI.Xaml.VerticalAlignment value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_VerticalAlignment(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Margin")]
		public virtual global::Windows.UI.Xaml.Thickness get_Margin()
		{
			global::Windows.UI.Xaml.Thickness __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_Margin(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Margin")]
		public virtual void put_Margin(global::Windows.UI.Xaml.Thickness value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Margin(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		public virtual string get_Name()
		{
			string __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_Name(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		public virtual void put_Name(string value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Name(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DataContext")]
		public virtual object get_DataContext()
		{
			object __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_DataContext(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DataContext")]
		public virtual void put_DataContext(object value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_DataContext(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Style")]
		public virtual global::Windows.UI.Xaml.Style get_Style()
		{
			global::Windows.UI.Xaml.Style __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.get_Style(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Style")]
		public virtual void put_Style(global::Windows.UI.Xaml.Style value)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.put_Style(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Loaded")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Loaded(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.add_Loaded(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Loaded")]
		public virtual void remove_Loaded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.remove_Loaded(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Unloaded")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Unloaded(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.add_Unloaded(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Unloaded")]
		public virtual void remove_Unloaded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.remove_Unloaded(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SizeChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SizeChanged(global::Windows.UI.Xaml.SizeChangedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.add_SizeChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SizeChanged")]
		public virtual void remove_SizeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.remove_SizeChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LayoutUpdated")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LayoutUpdated(global::System.EventHandler<object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.add_LayoutUpdated(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LayoutUpdated")]
		public virtual void remove_LayoutUpdated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement__Impl.Stubs.remove_LayoutUpdated(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DataContextChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DataContextChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.DataContextChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement2__Impl.Stubs.add_DataContextChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DataContextChanged")]
		public virtual void remove_DataContextChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement2__Impl.Stubs.remove_DataContextChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Loading")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Loading(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement3__Impl.Stubs.add_Loading(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Loading")]
		public virtual void remove_Loading(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement3__Impl.Stubs.remove_Loading(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ActualThemeChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ActualThemeChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement6__Impl.Stubs.add_ActualThemeChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ActualThemeChanged")]
		public virtual void remove_ActualThemeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement6__Impl.Stubs.remove_ActualThemeChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "EffectiveViewportChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_EffectiveViewportChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.EffectiveViewportChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IFrameworkElement7__Impl.Stubs.add_EffectiveViewportChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "EffectiveViewportChanged")]
		public virtual void remove_EffectiveViewportChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IFrameworkElement7__Impl.Stubs.remove_EffectiveViewportChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IFrameworkElementProtected7.InvalidateViewport()
		{
			this.InvalidateViewport();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void InvalidateViewport()
		{
			global::Windows.UI.Xaml.IFrameworkElementProtected7__Impl.Stubs.InvalidateViewport(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		global::Windows.Foundation.Size global::Windows.UI.Xaml.IFrameworkElementOverrides.MeasureOverride(global::Windows.Foundation.Size availableSize)
		{
			global::Windows.Foundation.Size __retVal_1 = this.MeasureOverride(availableSize);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.Foundation.Size MeasureOverride(global::Windows.Foundation.Size availableSize)
		{
			global::Windows.Foundation.Size __retVal = global::Windows.UI.Xaml.IFrameworkElementOverrides__Impl.Stubs.MeasureOverride(
								this, 
								availableSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.Foundation.Size global::Windows.UI.Xaml.IFrameworkElementOverrides.ArrangeOverride(global::Windows.Foundation.Size finalSize)
		{
			global::Windows.Foundation.Size __retVal_1 = this.ArrangeOverride(finalSize);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.Foundation.Size ArrangeOverride(global::Windows.Foundation.Size finalSize)
		{
			global::Windows.Foundation.Size __retVal = global::Windows.UI.Xaml.IFrameworkElementOverrides__Impl.Stubs.ArrangeOverride(
								this, 
								finalSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.IFrameworkElementOverrides.OnApplyTemplate()
		{
			this.OnApplyTemplate();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnApplyTemplate()
		{
			global::Windows.UI.Xaml.IFrameworkElementOverrides__Impl.Stubs.OnApplyTemplate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		bool global::Windows.UI.Xaml.IFrameworkElementOverrides2.GoToElementStateCore(
					string stateName, 
					bool useTransitions)
		{
			bool __retVal_1 = this.GoToElementStateCore(
								stateName, 
								useTransitions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool GoToElementStateCore(
					string stateName, 
					bool useTransitions)
		{
			bool __retVal = global::Windows.UI.Xaml.IFrameworkElementOverrides2__Impl.Stubs.GoToElementStateCore(
								this, 
								stateName, 
								useTransitions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public FrameworkElement(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.ISizeChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SizeChangedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.ISizeChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousSize")]
		public global::Windows.Foundation.Size get_PreviousSize()
		{
			global::Windows.Foundation.Size __retVal = global::Windows.UI.Xaml.ISizeChangedEventArgs__Impl.Stubs.get_PreviousSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewSize")]
		public global::Windows.Foundation.Size get_NewSize()
		{
			global::Windows.Foundation.Size __retVal = global::Windows.UI.Xaml.ISizeChangedEventArgs__Impl.Stubs.get_NewSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public SizeChangedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDataContextChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DataContextChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.IDataContextChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewValue")]
		public object get_NewValue()
		{
			object __retVal = global::Windows.UI.Xaml.IDataContextChangedEventArgs__Impl.Stubs.get_NewValue(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public DataContextChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IEffectiveViewportChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class EffectiveViewportChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.IEffectiveViewportChangedEventArgs
	{
		public EffectiveViewportChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IFrameworkTemplate))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class FrameworkTemplate : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.IFrameworkTemplate
	{
		public FrameworkTemplate(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDependencyPropertyChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DependencyPropertyChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.IDependencyPropertyChangedEventArgs
	{
		public DependencyPropertyChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IDataTemplate))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class DataTemplate : global::Windows.UI.Xaml.FrameworkTemplate, global::Windows.UI.Xaml.IDataTemplate
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public DataTemplate() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml__IDataTemplateFactory_CreateInstance("Windows.UI.Xaml.DataTemplate");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml__IDataTemplateFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.DataTemplate).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.IDataTemplateFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IDataTemplateFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.IDataTemplateFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IDataTemplateFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		public static void SetExtensionInstance(
					global::Windows.UI.Xaml.FrameworkElement element, 
					global::Windows.UI.Xaml.IDataTemplateExtension value)
		{
			__Factory_Windows_UI_Xaml__IDataTemplateStatics2_SetExtensionInstance(
								"Windows.UI.Xaml.DataTemplate", 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml__IDataTemplateStatics2_SetExtensionInstance(
					string typeName, 
					global::Windows.UI.Xaml.FrameworkElement element, 
					global::Windows.UI.Xaml.IDataTemplateExtension value)
		{
			global::Windows.UI.Xaml.IDataTemplateStatics2__Impl.Stubs.SetExtensionInstance(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.IDataTemplateStatics2).TypeHandle
												), 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public DataTemplate(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IPropertyPath))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class PropertyPath : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.IPropertyPath
	{
		public PropertyPath(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.ISetterBase))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class SetterBase : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.ISetterBase
	{
		public SetterBase(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.ISetter))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Setter : global::Windows.UI.Xaml.SetterBase, global::Windows.UI.Xaml.ISetter
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Setter() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Setter");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Property")]
		public global::Windows.UI.Xaml.DependencyProperty get_Property()
		{
			global::Windows.UI.Xaml.DependencyProperty __retVal = global::Windows.UI.Xaml.ISetter__Impl.Stubs.get_Property(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Property")]
		public void put_Property(global::Windows.UI.Xaml.DependencyProperty value)
		{
			global::Windows.UI.Xaml.ISetter__Impl.Stubs.put_Property(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Value")]
		public object get_Value()
		{
			object __retVal = global::Windows.UI.Xaml.ISetter__Impl.Stubs.get_Value(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Value")]
		public void put_Value(object value)
		{
			global::Windows.UI.Xaml.ISetter__Impl.Stubs.put_Value(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Setter(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IApplication))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IApplication2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IApplicationOverrides))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IApplicationOverrides2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Application : global::System.__ComObject, global::Windows.UI.Xaml.IApplication, global::Windows.UI.Xaml.IApplication2, global::Windows.UI.Xaml.IApplicationOverrides, global::Windows.UI.Xaml.IApplicationOverrides2
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Application()
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml__IApplicationFactory_CreateInstance("Windows.UI.Xaml.Application");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml__IApplicationFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Application).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.IApplicationFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IApplicationFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.IApplicationFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.IApplicationFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "UnhandledException")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_UnhandledException(global::Windows.UI.Xaml.UnhandledExceptionEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IApplication__Impl.Stubs.add_UnhandledException(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "UnhandledException")]
		public virtual void remove_UnhandledException(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IApplication__Impl.Stubs.remove_UnhandledException(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Suspending")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Suspending(global::Windows.UI.Xaml.SuspendingEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IApplication__Impl.Stubs.add_Suspending(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Suspending")]
		public virtual void remove_Suspending(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IApplication__Impl.Stubs.remove_Suspending(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Resuming")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Resuming(global::System.EventHandler<object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IApplication__Impl.Stubs.add_Resuming(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Resuming")]
		public virtual void remove_Resuming(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IApplication__Impl.Stubs.remove_Resuming(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void Exit()
		{
			global::Windows.UI.Xaml.IApplication__Impl.Stubs.Exit(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LeavingBackground")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LeavingBackground(global::Windows.UI.Xaml.LeavingBackgroundEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IApplication2__Impl.Stubs.add_LeavingBackground(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LeavingBackground")]
		public virtual void remove_LeavingBackground(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IApplication2__Impl.Stubs.remove_LeavingBackground(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "EnteredBackground")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_EnteredBackground(global::Windows.UI.Xaml.EnteredBackgroundEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IApplication2__Impl.Stubs.add_EnteredBackground(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "EnteredBackground")]
		public virtual void remove_EnteredBackground(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IApplication2__Impl.Stubs.remove_EnteredBackground(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnActivated(global::Windows.ApplicationModel.Activation.IActivatedEventArgs args)
		{
			this.OnActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnActivated(global::Windows.ApplicationModel.Activation.IActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnLaunched(global::Windows.ApplicationModel.Activation.LaunchActivatedEventArgs args)
		{
			this.OnLaunched(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnLaunched(global::Windows.ApplicationModel.Activation.LaunchActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnLaunched(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnFileActivated(global::Windows.ApplicationModel.Activation.FileActivatedEventArgs args)
		{
			this.OnFileActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnFileActivated(global::Windows.ApplicationModel.Activation.FileActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnFileActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnSearchActivated(global::Windows.ApplicationModel.Activation.SearchActivatedEventArgs args)
		{
			this.OnSearchActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnSearchActivated(global::Windows.ApplicationModel.Activation.SearchActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnSearchActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnShareTargetActivated(global::Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs args)
		{
			this.OnShareTargetActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnShareTargetActivated(global::Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnShareTargetActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnFileOpenPickerActivated(global::Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs args)
		{
			this.OnFileOpenPickerActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnFileOpenPickerActivated(global::Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnFileOpenPickerActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnFileSavePickerActivated(global::Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs args)
		{
			this.OnFileSavePickerActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnFileSavePickerActivated(global::Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnFileSavePickerActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnCachedFileUpdaterActivated(global::Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs args)
		{
			this.OnCachedFileUpdaterActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnCachedFileUpdaterActivated(global::Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnCachedFileUpdaterActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides.OnWindowCreated(global::Windows.UI.Xaml.WindowCreatedEventArgs args)
		{
			this.OnWindowCreated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnWindowCreated(global::Windows.UI.Xaml.WindowCreatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides__Impl.Stubs.OnWindowCreated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.IApplicationOverrides2.OnBackgroundActivated(global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args)
		{
			this.OnBackgroundActivated(args);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnBackgroundActivated(global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args)
		{
			global::Windows.UI.Xaml.IApplicationOverrides2__Impl.Stubs.OnBackgroundActivated(
								this, 
								args
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		public static global::Windows.UI.Xaml.Application get_Current()
		{
			global::Windows.UI.Xaml.Application retval;
			retval = __Factory_Windows_UI_Xaml__IApplicationStatics_get_Current("Windows.UI.Xaml.Application");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Xaml.Application __Factory_Windows_UI_Xaml__IApplicationStatics_get_Current(string typeName)
		{
			global::Windows.UI.Xaml.Application __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.IApplicationStatics__Impl.Stubs.get_Current(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.Xaml.IApplicationStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static void Start(global::Windows.UI.Xaml.ApplicationInitializationCallback callback)
		{
			__Factory_Windows_UI_Xaml__IApplicationStatics_Start(
								"Windows.UI.Xaml.Application", 
								callback
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml__IApplicationStatics_Start(
					string typeName, 
					global::Windows.UI.Xaml.ApplicationInitializationCallback callback)
		{
			global::Windows.UI.Xaml.IApplicationStatics__Impl.Stubs.Start(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.IApplicationStatics).TypeHandle
												), 
								callback
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static void LoadComponent(
					object component, 
					global::System.Uri resourceLocator, 
					global::Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation)
		{
			__Factory_Windows_UI_Xaml__IApplicationStatics_LoadComponent(
								"Windows.UI.Xaml.Application", 
								component, 
								resourceLocator, 
								componentResourceLocation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml__IApplicationStatics_LoadComponent(
					string typeName, 
					object component, 
					global::System.Uri resourceLocator, 
					global::Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation)
		{
			global::Windows.UI.Xaml.IApplicationStatics__Impl.Stubs.LoadComponent(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.IApplicationStatics).TypeHandle
												), 
								component, 
								resourceLocator, 
								componentResourceLocation
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Application(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IApplicationInitializationCallbackParams))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ApplicationInitializationCallbackParams : global::System.__ComObject, global::Windows.UI.Xaml.IApplicationInitializationCallbackParams
	{
		public ApplicationInitializationCallbackParams(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IUnhandledExceptionEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class UnhandledExceptionEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.IUnhandledExceptionEventArgs
	{
		public UnhandledExceptionEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IWindowCreatedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class WindowCreatedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.IWindowCreatedEventArgs
	{
		public WindowCreatedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IExceptionRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ExceptionRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.IExceptionRoutedEventArgs
	{
		public ExceptionRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.IWindow))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Window : global::System.__ComObject, global::Windows.UI.Xaml.IWindow
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		public global::Windows.UI.Xaml.UIElement get_Content()
		{
			global::Windows.UI.Xaml.UIElement __retVal = global::Windows.UI.Xaml.IWindow__Impl.Stubs.get_Content(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		public void put_Content(global::Windows.UI.Xaml.UIElement value)
		{
			global::Windows.UI.Xaml.IWindow__Impl.Stubs.put_Content(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CoreWindow")]
		public global::Windows.UI.Core.CoreWindow get_CoreWindow()
		{
			global::Windows.UI.Core.CoreWindow __retVal = global::Windows.UI.Xaml.IWindow__Impl.Stubs.get_CoreWindow(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Activated")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Activated(global::Windows.UI.Xaml.WindowActivatedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IWindow__Impl.Stubs.add_Activated(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Activated")]
		public void remove_Activated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IWindow__Impl.Stubs.remove_Activated(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Closed")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Closed(global::Windows.UI.Xaml.WindowClosedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IWindow__Impl.Stubs.add_Closed(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Closed")]
		public void remove_Closed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IWindow__Impl.Stubs.remove_Closed(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SizeChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SizeChanged(global::Windows.UI.Xaml.WindowSizeChangedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IWindow__Impl.Stubs.add_SizeChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SizeChanged")]
		public void remove_SizeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IWindow__Impl.Stubs.remove_SizeChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VisibilityChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VisibilityChanged(global::Windows.UI.Xaml.WindowVisibilityChangedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.IWindow__Impl.Stubs.add_VisibilityChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VisibilityChanged")]
		public void remove_VisibilityChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.IWindow__Impl.Stubs.remove_VisibilityChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Activate()
		{
			global::Windows.UI.Xaml.IWindow__Impl.Stubs.Activate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		public static global::Windows.UI.Xaml.Window get_Current()
		{
			global::Windows.UI.Xaml.Window retval;
			retval = __Factory_Windows_UI_Xaml__IWindowStatics_get_Current("Windows.UI.Xaml.Window");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Xaml.Window __Factory_Windows_UI_Xaml__IWindowStatics_get_Current(string typeName)
		{
			global::Windows.UI.Xaml.Window __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.IWindowStatics__Impl.Stubs.get_Current(global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
									typeName, 
									typeof(global::Windows.UI.Xaml.IWindowStatics).TypeHandle
								));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public Window(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDependencyObject
	{
		object GetValue(global::Windows.UI.Xaml.DependencyProperty dp);

		void SetValue(
					global::Windows.UI.Xaml.DependencyProperty dp, 
					object value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDependencyPropertyStatics
	{
		global::Windows.UI.Xaml.DependencyProperty Register(
					string name, 
					global::System.Type propertyType, 
					global::System.Type ownerType, 
					global::Windows.UI.Xaml.PropertyMetadata typeMetadata);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPropertyMetadataFactory
	{
		global::System.IntPtr CreateInstanceWithDefaultValue(
					object defaultValue, 
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPropertyMetadata
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDependencyProperty
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDependencyObject2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Opacity")]
		double get_Opacity();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		void put_Opacity(double value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "KeyUp")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_KeyUp(global::Windows.UI.Xaml.Input.KeyEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "KeyUp")]
		void remove_KeyUp(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "KeyDown")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_KeyDown(global::Windows.UI.Xaml.Input.KeyEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "KeyDown")]
		void remove_KeyDown(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GotFocus")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GotFocus(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GotFocus")]
		void remove_GotFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LostFocus")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LostFocus(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LostFocus")]
		void remove_LostFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragEnter")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragEnter(global::Windows.UI.Xaml.DragEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragEnter")]
		void remove_DragEnter(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragLeave")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragLeave(global::Windows.UI.Xaml.DragEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragLeave")]
		void remove_DragLeave(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragOver")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragOver(global::Windows.UI.Xaml.DragEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragOver")]
		void remove_DragOver(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Drop")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Drop(global::Windows.UI.Xaml.DragEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Drop")]
		void remove_Drop(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerPressed")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerPressed(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerPressed")]
		void remove_PointerPressed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerMoved")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerMoved(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerMoved")]
		void remove_PointerMoved(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerReleased")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerReleased(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerReleased")]
		void remove_PointerReleased(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerEntered")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerEntered(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerEntered")]
		void remove_PointerEntered(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerExited")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerExited(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerExited")]
		void remove_PointerExited(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerCaptureLost")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerCaptureLost(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerCaptureLost")]
		void remove_PointerCaptureLost(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerCanceled")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerCanceled(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerCanceled")]
		void remove_PointerCanceled(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PointerWheelChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PointerWheelChanged(global::Windows.UI.Xaml.Input.PointerEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PointerWheelChanged")]
		void remove_PointerWheelChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Tapped")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Tapped(global::Windows.UI.Xaml.Input.TappedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Tapped")]
		void remove_Tapped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DoubleTapped")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DoubleTapped(global::Windows.UI.Xaml.Input.DoubleTappedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DoubleTapped")]
		void remove_DoubleTapped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Holding")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Holding(global::Windows.UI.Xaml.Input.HoldingEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Holding")]
		void remove_Holding(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RightTapped")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RightTapped(global::Windows.UI.Xaml.Input.RightTappedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RightTapped")]
		void remove_RightTapped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationStarting")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationStarting(global::Windows.UI.Xaml.Input.ManipulationStartingEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationStarting")]
		void remove_ManipulationStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationInertiaStarting")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationInertiaStarting(global::Windows.UI.Xaml.Input.ManipulationInertiaStartingEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationInertiaStarting")]
		void remove_ManipulationInertiaStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationStarted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationStarted(global::Windows.UI.Xaml.Input.ManipulationStartedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationStarted")]
		void remove_ManipulationStarted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationDelta")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationDelta(global::Windows.UI.Xaml.Input.ManipulationDeltaEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationDelta")]
		void remove_ManipulationDelta(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ManipulationCompleted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ManipulationCompleted(global::Windows.UI.Xaml.Input.ManipulationCompletedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ManipulationCompleted")]
		void remove_ManipulationCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRoutedEventArgsFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void RoutedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.RoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void DragEventHandler(
				object sender, 
				global::Windows.UI.Xaml.DragEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDragEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragStarting")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragStarting(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.DragStartingEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragStarting")]
		void remove_DragStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DropCompleted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DropCompleted(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.DropCompletedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DropCompleted")]
		void remove_DropCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDragStartingEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDropCompletedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement4
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextRequested")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.ContextRequestedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextRequested")]
		void remove_ContextRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextCanceled")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextCanceled(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.RoutedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextCanceled")]
		void remove_ContextCanceled(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AccessKeyDisplayRequested")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AccessKeyDisplayRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AccessKeyDisplayRequested")]
		void remove_AccessKeyDisplayRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AccessKeyDisplayDismissed")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AccessKeyDisplayDismissed(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AccessKeyDisplayDismissed")]
		void remove_AccessKeyDisplayDismissed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AccessKeyInvoked")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AccessKeyInvoked(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AccessKeyInvoked")]
		void remove_AccessKeyInvoked(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement5
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "GettingFocus")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_GettingFocus(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.GettingFocusEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "GettingFocus")]
		void remove_GettingFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LosingFocus")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LosingFocus(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.LosingFocusEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LosingFocus")]
		void remove_LosingFocus(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "NoFocusCandidateFound")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_NoFocusCandidateFound(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "NoFocusCandidateFound")]
		void remove_NoFocusCandidateFound(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement7
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CharacterReceived")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CharacterReceived(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CharacterReceived")]
		void remove_CharacterReceived(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ProcessKeyboardAccelerators")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ProcessKeyboardAccelerators(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ProcessKeyboardAccelerators")]
		void remove_ProcessKeyboardAccelerators(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PreviewKeyDown")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PreviewKeyDown(global::Windows.UI.Xaml.Input.KeyEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PreviewKeyDown")]
		void remove_PreviewKeyDown(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PreviewKeyUp")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PreviewKeyUp(global::Windows.UI.Xaml.Input.KeyEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PreviewKeyUp")]
		void remove_PreviewKeyUp(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement8
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "BringIntoViewRequested")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_BringIntoViewRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.UIElement, global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "BringIntoViewRequested")]
		void remove_BringIntoViewRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBringIntoViewRequestedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement9
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElement10
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElementOverrides
	{
		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer();

		void OnDisconnectVisualChildren();

		global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<global::Windows.Foundation.Point>> FindSubElementsForTouchTargeting(
					global::Windows.Foundation.Point point, 
					global::Windows.Foundation.Rect boundingRect);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElementOverrides7
	{
		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.DependencyObject> GetChildrenInTabFocusOrder();

		void OnProcessKeyboardAccelerators(global::Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElementOverrides8
	{
		void OnKeyboardAcceleratorInvoked(global::Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args);

		void OnBringIntoViewRequested(global::Windows.UI.Xaml.BringIntoViewRequestedEventArgs e);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUIElementOverrides9
	{
		void PopulatePropertyInfoOverride(
					string propertyName, 
					global::Windows.UI.Composition.AnimationPropertyInfo animationPropertyInfo);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IResourceDictionary
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStyle
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElement
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Resources")]
		global::Windows.UI.Xaml.ResourceDictionary get_Resources();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Resources")]
		void put_Resources(global::Windows.UI.Xaml.ResourceDictionary value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Language")]
		void put_Language(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ActualWidth")]
		double get_ActualWidth();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ActualHeight")]
		double get_ActualHeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Width")]
		double get_Width();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Width")]
		void put_Width(double value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Height")]
		double get_Height();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Height")]
		void put_Height(double value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalAlignment")]
		global::Windows.UI.Xaml.HorizontalAlignment get_HorizontalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalAlignment")]
		void put_HorizontalAlignment(global::Windows.UI.Xaml.HorizontalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalAlignment")]
		global::Windows.UI.Xaml.VerticalAlignment get_VerticalAlignment();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalAlignment")]
		void put_VerticalAlignment(global::Windows.UI.Xaml.VerticalAlignment value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Margin")]
		global::Windows.UI.Xaml.Thickness get_Margin();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Margin")]
		void put_Margin(global::Windows.UI.Xaml.Thickness value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		string get_Name();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Name")]
		void put_Name(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DataContext")]
		object get_DataContext();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DataContext")]
		void put_DataContext(object value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Style")]
		global::Windows.UI.Xaml.Style get_Style();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Style")]
		void put_Style(global::Windows.UI.Xaml.Style value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Loaded")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Loaded(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Loaded")]
		void remove_Loaded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Unloaded")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Unloaded(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Unloaded")]
		void remove_Unloaded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SizeChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SizeChanged(global::Windows.UI.Xaml.SizeChangedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SizeChanged")]
		void remove_SizeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LayoutUpdated")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LayoutUpdated(global::System.EventHandler<object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LayoutUpdated")]
		void remove_LayoutUpdated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void SizeChangedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.SizeChangedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISizeChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PreviousSize")]
		global::Windows.Foundation.Size get_PreviousSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewSize")]
		global::Windows.Foundation.Size get_NewSize();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElement2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DataContextChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DataContextChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.DataContextChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DataContextChanged")]
		void remove_DataContextChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataContextChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewValue")]
		object get_NewValue();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElement3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Loading")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Loading(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Loading")]
		void remove_Loading(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElement6
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ActualThemeChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ActualThemeChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ActualThemeChanged")]
		void remove_ActualThemeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElement7
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "EffectiveViewportChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_EffectiveViewportChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.EffectiveViewportChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "EffectiveViewportChanged")]
		void remove_EffectiveViewportChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IEffectiveViewportChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElementProtected7
	{
		void InvalidateViewport();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElementOverrides
	{
		global::Windows.Foundation.Size MeasureOverride(global::Windows.Foundation.Size availableSize);

		global::Windows.Foundation.Size ArrangeOverride(global::Windows.Foundation.Size finalSize);

		void OnApplyTemplate();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkElementOverrides2
	{
		bool GoToElementStateCore(
					string stateName, 
					bool useTransitions);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameworkTemplate
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void DependencyPropertyChangedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDependencyPropertyChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateStatics2
	{
		void SetExtensionInstance(
					global::Windows.UI.Xaml.FrameworkElement element, 
					global::Windows.UI.Xaml.IDataTemplateExtension value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateExtension
	{
		void ResetTemplate();

		bool ProcessBinding(uint phase);

		int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs arg);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplate
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPropertyPath
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISetterBase
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISetter
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Property")]
		global::Windows.UI.Xaml.DependencyProperty get_Property();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Property")]
		void put_Property(global::Windows.UI.Xaml.DependencyProperty value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Value")]
		object get_Value();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Value")]
		void put_Value(object value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		global::Windows.UI.Xaml.Application get_Current();

		void Start(global::Windows.UI.Xaml.ApplicationInitializationCallback callback);

		void LoadComponent(
					object component, 
					global::System.Uri resourceLocator, 
					global::Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ApplicationInitializationCallback(global::Windows.UI.Xaml.ApplicationInitializationCallbackParams p);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationInitializationCallbackParams
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplication
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "UnhandledException")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_UnhandledException(global::Windows.UI.Xaml.UnhandledExceptionEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "UnhandledException")]
		void remove_UnhandledException(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Suspending")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Suspending(global::Windows.UI.Xaml.SuspendingEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Suspending")]
		void remove_Suspending(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Resuming")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Resuming(global::System.EventHandler<object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Resuming")]
		void remove_Resuming(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		void Exit();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void UnhandledExceptionEventHandler(
				object sender, 
				global::Windows.UI.Xaml.UnhandledExceptionEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUnhandledExceptionEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void SuspendingEventHandler(
				object sender, 
				global::Windows.ApplicationModel.SuspendingEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplication2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "LeavingBackground")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_LeavingBackground(global::Windows.UI.Xaml.LeavingBackgroundEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "LeavingBackground")]
		void remove_LeavingBackground(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "EnteredBackground")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_EnteredBackground(global::Windows.UI.Xaml.EnteredBackgroundEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "EnteredBackground")]
		void remove_EnteredBackground(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void LeavingBackgroundEventHandler(
				object sender, 
				global::Windows.ApplicationModel.LeavingBackgroundEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void EnteredBackgroundEventHandler(
				object sender, 
				global::Windows.ApplicationModel.EnteredBackgroundEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationOverrides
	{
		void OnActivated(global::Windows.ApplicationModel.Activation.IActivatedEventArgs args);

		void OnLaunched(global::Windows.ApplicationModel.Activation.LaunchActivatedEventArgs args);

		void OnFileActivated(global::Windows.ApplicationModel.Activation.FileActivatedEventArgs args);

		void OnSearchActivated(global::Windows.ApplicationModel.Activation.SearchActivatedEventArgs args);

		void OnShareTargetActivated(global::Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs args);

		void OnFileOpenPickerActivated(global::Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs args);

		void OnFileSavePickerActivated(global::Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs args);

		void OnCachedFileUpdaterActivated(global::Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs args);

		void OnWindowCreated(global::Windows.UI.Xaml.WindowCreatedEventArgs args);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IWindowCreatedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IApplicationOverrides2
	{
		void OnBackgroundActivated(global::Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ExceptionRoutedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.ExceptionRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IExceptionRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IWindowStatics
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Current")]
		global::Windows.UI.Xaml.Window get_Current();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IWindow
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		global::Windows.UI.Xaml.UIElement get_Content();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		void put_Content(global::Windows.UI.Xaml.UIElement value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "CoreWindow")]
		global::Windows.UI.Core.CoreWindow get_CoreWindow();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Activated")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Activated(global::Windows.UI.Xaml.WindowActivatedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Activated")]
		void remove_Activated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Closed")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Closed(global::Windows.UI.Xaml.WindowClosedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Closed")]
		void remove_Closed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SizeChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SizeChanged(global::Windows.UI.Xaml.WindowSizeChangedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SizeChanged")]
		void remove_SizeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VisibilityChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VisibilityChanged(global::Windows.UI.Xaml.WindowVisibilityChangedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VisibilityChanged")]
		void remove_VisibilityChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		void Activate();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void WindowActivatedEventHandler(
				object sender, 
				global::Windows.UI.Core.WindowActivatedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void WindowClosedEventHandler(
				object sender, 
				global::Windows.UI.Core.CoreWindowEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void WindowSizeChangedEventHandler(
				object sender, 
				global::Windows.UI.Core.WindowSizeChangedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void WindowVisibilityChangedEventHandler(
				object sender, 
				global::Windows.UI.Core.VisibilityChangedEventArgs e);

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum HorizontalAlignment
	{
		Left = 0,
		Center = 1,
		Right = 2,
		Stretch = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum VerticalAlignment
	{
		Top = 0,
		Center = 1,
		Bottom = 2,
		Stretch = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum FocusState
	{
		Unfocused = 0,
		Pointer = 1,
		Keyboard = 2,
		Programmatic = 3,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum TextWrapping
	{
		NoWrap = 1,
		Wrap = 2,
		WrapWholeWords = 3,
	}
}

namespace Windows.UI.Xaml.Automation.Peers
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class AutomationPeer : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer2, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer4, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer5, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer6, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer7, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer8, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeer9, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9
	{
		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected.PeerFromProvider(global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple provider)
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal_1 = this.PeerFromProvider(provider);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationPeer PeerFromProvider(global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple provider)
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected__Impl.Stubs.PeerFromProvider(
								this, 
								provider
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected.ProviderFromPeer(global::Windows.UI.Xaml.Automation.Peers.AutomationPeer peer)
		{
			global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple __retVal_1 = this.ProviderFromPeer(peer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple ProviderFromPeer(global::Windows.UI.Xaml.Automation.Peers.AutomationPeer peer)
		{
			global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected__Impl.Stubs.ProviderFromPeer(
								this, 
								peer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		object global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetPatternCore(global::Windows.UI.Xaml.Automation.Peers.PatternInterface patternInterface)
		{
			object __retVal_1 = this.GetPatternCore(patternInterface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual object GetPatternCore(global::Windows.UI.Xaml.Automation.Peers.PatternInterface patternInterface)
		{
			object __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetPatternCore(
								this, 
								patternInterface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetAcceleratorKeyCore()
		{
			string __retVal_1 = this.GetAcceleratorKeyCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetAcceleratorKeyCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetAcceleratorKeyCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetAccessKeyCore()
		{
			string __retVal_1 = this.GetAccessKeyCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetAccessKeyCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetAccessKeyCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationControlType global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetAutomationControlTypeCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationControlType __retVal_1 = this.GetAutomationControlTypeCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationControlType GetAutomationControlTypeCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationControlType __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetAutomationControlTypeCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetAutomationIdCore()
		{
			string __retVal_1 = this.GetAutomationIdCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetAutomationIdCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetAutomationIdCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.Foundation.Rect global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetBoundingRectangleCore()
		{
			global::Windows.Foundation.Rect __retVal_1 = this.GetBoundingRectangleCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.Foundation.Rect GetBoundingRectangleCore()
		{
			global::Windows.Foundation.Rect __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetBoundingRectangleCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetChildrenCore()
		{
			global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal_1 = this.GetChildrenCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetChildrenCore()
		{
			global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetChildrenCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetClassNameCore()
		{
			string __retVal_1 = this.GetClassNameCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetClassNameCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetClassNameCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.Foundation.Point global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetClickablePointCore()
		{
			global::Windows.Foundation.Point __retVal_1 = this.GetClickablePointCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.Foundation.Point GetClickablePointCore()
		{
			global::Windows.Foundation.Point __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetClickablePointCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetHelpTextCore()
		{
			string __retVal_1 = this.GetHelpTextCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetHelpTextCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetHelpTextCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetItemStatusCore()
		{
			string __retVal_1 = this.GetItemStatusCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetItemStatusCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetItemStatusCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetItemTypeCore()
		{
			string __retVal_1 = this.GetItemTypeCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetItemTypeCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetItemTypeCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetLabeledByCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal_1 = this.GetLabeledByCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationPeer GetLabeledByCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetLabeledByCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetLocalizedControlTypeCore()
		{
			string __retVal_1 = this.GetLocalizedControlTypeCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetLocalizedControlTypeCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetLocalizedControlTypeCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetNameCore()
		{
			string __retVal_1 = this.GetNameCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetNameCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetNameCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationOrientation global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetOrientationCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationOrientation __retVal_1 = this.GetOrientationCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationOrientation GetOrientationCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationOrientation __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetOrientationCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.HasKeyboardFocusCore()
		{
			bool __retVal_1 = this.HasKeyboardFocusCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool HasKeyboardFocusCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.HasKeyboardFocusCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsContentElementCore()
		{
			bool __retVal_1 = this.IsContentElementCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsContentElementCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsContentElementCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsControlElementCore()
		{
			bool __retVal_1 = this.IsControlElementCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsControlElementCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsControlElementCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsEnabledCore()
		{
			bool __retVal_1 = this.IsEnabledCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsEnabledCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsEnabledCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsKeyboardFocusableCore()
		{
			bool __retVal_1 = this.IsKeyboardFocusableCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsKeyboardFocusableCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsKeyboardFocusableCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsOffscreenCore()
		{
			bool __retVal_1 = this.IsOffscreenCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsOffscreenCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsOffscreenCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsPasswordCore()
		{
			bool __retVal_1 = this.IsPasswordCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsPasswordCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsPasswordCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.IsRequiredForFormCore()
		{
			bool __retVal_1 = this.IsRequiredForFormCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsRequiredForFormCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.IsRequiredForFormCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.SetFocusCore()
		{
			this.SetFocusCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void SetFocusCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.SetFocusCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetPeerFromPointCore(global::Windows.Foundation.Point point)
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal_1 = this.GetPeerFromPointCore(point);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationPeer GetPeerFromPointCore(global::Windows.Foundation.Point point)
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationPeer __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetPeerFromPointCore(
								this, 
								point
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides.GetLiveSettingCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting __retVal_1 = this.GetLiveSettingCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting GetLiveSettingCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides__Impl.Stubs.GetLiveSettingCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2.ShowContextMenuCore()
		{
			this.ShowContextMenuCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void ShowContextMenuCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2__Impl.Stubs.ShowContextMenuCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2.GetControlledPeersCore()
		{
			global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal_1 = this.GetControlledPeersCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetControlledPeersCore()
		{
			global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2__Impl.Stubs.GetControlledPeersCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		object global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.NavigateCore(global::Windows.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction)
		{
			object __retVal_1 = this.NavigateCore(direction);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual object NavigateCore(global::Windows.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction)
		{
			object __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.NavigateCore(
								this, 
								direction
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		object global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.GetElementFromPointCore(global::Windows.Foundation.Point pointInWindowCoordinates)
		{
			object __retVal_1 = this.GetElementFromPointCore(pointInWindowCoordinates);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual object GetElementFromPointCore(global::Windows.Foundation.Point pointInWindowCoordinates)
		{
			object __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.GetElementFromPointCore(
								this, 
								pointInWindowCoordinates
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		object global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.GetFocusedElementCore()
		{
			object __retVal_1 = this.GetFocusedElementCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual object GetFocusedElementCore()
		{
			object __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.GetFocusedElementCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.GetAnnotationsCore()
		{
			global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> __retVal_1 = this.GetAnnotationsCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> GetAnnotationsCore()
		{
			global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.GetAnnotationsCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		int global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.GetPositionInSetCore()
		{
			int __retVal_1 = this.GetPositionInSetCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual int GetPositionInSetCore()
		{
			int __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.GetPositionInSetCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		int global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.GetSizeOfSetCore()
		{
			int __retVal_1 = this.GetSizeOfSetCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual int GetSizeOfSetCore()
		{
			int __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.GetSizeOfSetCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		int global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3.GetLevelCore()
		{
			int __retVal_1 = this.GetLevelCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual int GetLevelCore()
		{
			int __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3__Impl.Stubs.GetLevelCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4.GetLandmarkTypeCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType __retVal_1 = this.GetLandmarkTypeCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType GetLandmarkTypeCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4__Impl.Stubs.GetLandmarkTypeCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4.GetLocalizedLandmarkTypeCore()
		{
			string __retVal_1 = this.GetLocalizedLandmarkTypeCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetLocalizedLandmarkTypeCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4__Impl.Stubs.GetLocalizedLandmarkTypeCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5.IsPeripheralCore()
		{
			bool __retVal_1 = this.IsPeripheralCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsPeripheralCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5__Impl.Stubs.IsPeripheralCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5.IsDataValidForFormCore()
		{
			bool __retVal_1 = this.IsDataValidForFormCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsDataValidForFormCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5__Impl.Stubs.IsDataValidForFormCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		string global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5.GetFullDescriptionCore()
		{
			string __retVal_1 = this.GetFullDescriptionCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual string GetFullDescriptionCore()
		{
			string __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5__Impl.Stubs.GetFullDescriptionCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5.GetDescribedByCore()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal_1 = this.GetDescribedByCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetDescribedByCore()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5__Impl.Stubs.GetDescribedByCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5.GetFlowsToCore()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal_1 = this.GetFlowsToCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetFlowsToCore()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5__Impl.Stubs.GetFlowsToCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5.GetFlowsFromCore()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal_1 = this.GetFlowsFromCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetFlowsFromCore()
		{
			global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5__Impl.Stubs.GetFlowsFromCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		int global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6.GetCultureCore()
		{
			int __retVal_1 = this.GetCultureCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual int GetCultureCore()
		{
			int __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6__Impl.Stubs.GetCultureCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8.GetHeadingLevelCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel __retVal_1 = this.GetHeadingLevelCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel GetHeadingLevelCore()
		{
			global::Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8__Impl.Stubs.GetHeadingLevelCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		bool global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9.IsDialogCore()
		{
			bool __retVal_1 = this.IsDialogCore();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsDialogCore()
		{
			bool __retVal = global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9__Impl.Stubs.IsDialogCore(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public AutomationPeer(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AutomationPeerAnnotation : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public AutomationPeerAnnotation() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public AutomationPeerAnnotation(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer2
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer3
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer4
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer5
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer6
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer7
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer8
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeer9
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerProtected
	{
		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer PeerFromProvider(global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple provider);

		global::Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple ProviderFromPeer(global::Windows.UI.Xaml.Automation.Peers.AutomationPeer peer);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides
	{
		object GetPatternCore(global::Windows.UI.Xaml.Automation.Peers.PatternInterface patternInterface);

		string GetAcceleratorKeyCore();

		string GetAccessKeyCore();

		global::Windows.UI.Xaml.Automation.Peers.AutomationControlType GetAutomationControlTypeCore();

		string GetAutomationIdCore();

		global::Windows.Foundation.Rect GetBoundingRectangleCore();

		global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetChildrenCore();

		string GetClassNameCore();

		global::Windows.Foundation.Point GetClickablePointCore();

		string GetHelpTextCore();

		string GetItemStatusCore();

		string GetItemTypeCore();

		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer GetLabeledByCore();

		string GetLocalizedControlTypeCore();

		string GetNameCore();

		global::Windows.UI.Xaml.Automation.Peers.AutomationOrientation GetOrientationCore();

		bool HasKeyboardFocusCore();

		bool IsContentElementCore();

		bool IsControlElementCore();

		bool IsEnabledCore();

		bool IsKeyboardFocusableCore();

		bool IsOffscreenCore();

		bool IsPasswordCore();

		bool IsRequiredForFormCore();

		void SetFocusCore();

		global::Windows.UI.Xaml.Automation.Peers.AutomationPeer GetPeerFromPointCore(global::Windows.Foundation.Point point);

		global::Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting GetLiveSettingCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides2
	{
		void ShowContextMenuCore();

		global::System.Collections.Generic.IReadOnlyList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetControlledPeersCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides3
	{
		object NavigateCore(global::Windows.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction);

		object GetElementFromPointCore(global::Windows.Foundation.Point pointInWindowCoordinates);

		object GetFocusedElementCore();

		global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> GetAnnotationsCore();

		int GetPositionInSetCore();

		int GetSizeOfSetCore();

		int GetLevelCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerAnnotation
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides4
	{
		global::Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType GetLandmarkTypeCore();

		string GetLocalizedLandmarkTypeCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides5
	{
		bool IsPeripheralCore();

		bool IsDataValidForFormCore();

		string GetFullDescriptionCore();

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetDescribedByCore();

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetFlowsToCore();

		global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Automation.Peers.AutomationPeer> GetFlowsFromCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides6
	{
		int GetCultureCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides8
	{
		global::Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel GetHeadingLevelCore();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAutomationPeerOverrides9
	{
		bool IsDialogCore();
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum PatternInterface
	{
		Invoke = 0,
		Selection = 1,
		Value = 2,
		RangeValue = 3,
		Scroll = 4,
		ScrollItem = 5,
		ExpandCollapse = 6,
		Grid = 7,
		GridItem = 8,
		MultipleView = 9,
		Window = 10,
		SelectionItem = 11,
		Dock = 12,
		Table = 13,
		TableItem = 14,
		Toggle = 15,
		Transform = 16,
		Text = 17,
		ItemContainer = 18,
		VirtualizedItem = 19,
		Text2 = 20,
		TextChild = 21,
		TextRange = 22,
		Annotation = 23,
		Drag = 24,
		DropTarget = 25,
		ObjectModel = 26,
		Spreadsheet = 27,
		SpreadsheetItem = 28,
		Styles = 29,
		Transform2 = 30,
		SynchronizedInput = 31,
		TextEdit = 32,
		CustomNavigation = 33,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum AutomationControlType
	{
		Button = 0,
		Calendar = 1,
		CheckBox = 2,
		ComboBox = 3,
		Edit = 4,
		Hyperlink = 5,
		Image = 6,
		ListItem = 7,
		List = 8,
		Menu = 9,
		MenuBar = 10,
		MenuItem = 11,
		ProgressBar = 12,
		RadioButton = 13,
		ScrollBar = 14,
		Slider = 15,
		Spinner = 16,
		StatusBar = 17,
		Tab = 18,
		TabItem = 19,
		Text = 20,
		ToolBar = 21,
		ToolTip = 22,
		Tree = 23,
		TreeItem = 24,
		Custom = 25,
		Group = 26,
		Thumb = 27,
		DataGrid = 28,
		DataItem = 29,
		Document = 30,
		SplitButton = 31,
		Window = 32,
		Pane = 33,
		Header = 34,
		HeaderItem = 35,
		Table = 36,
		TitleBar = 37,
		Separator = 38,
		SemanticZoom = 39,
		AppBar = 40,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum AutomationOrientation
	{
		None = 0,
		Horizontal = 1,
		Vertical = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum AutomationLiveSetting
	{
		Off = 0,
		Polite = 1,
		Assertive = 2,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum AutomationNavigationDirection
	{
		Parent = 0,
		NextSibling = 1,
		PreviousSibling = 2,
		FirstChild = 3,
		LastChild = 4,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum AutomationLandmarkType
	{
		None = 0,
		Custom = 1,
		Form = 2,
		Main = 3,
		Navigation = 4,
		Search = 5,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum AutomationHeadingLevel
	{
		None = 0,
		Level1 = 1,
		Level2 = 2,
		Level3 = 3,
		Level4 = 4,
		Level5 = 5,
		Level6 = 6,
		Level7 = 7,
		Level8 = 8,
		Level9 = 9,
	}
}

namespace Windows.UI.Xaml.Automation.Provider
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class IRawElementProviderSimple : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple
	{
		public IRawElementProviderSimple(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IIRawElementProviderSimple
	{
	}
}

namespace Windows.UI.Xaml.Controls
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IControl))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IControl4))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IControlProtected))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IControlOverrides))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IControlOverrides6))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Control : global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.Controls.IControl, global::Windows.UI.Xaml.Controls.IControl4, global::Windows.UI.Xaml.Controls.IControlProtected, global::Windows.UI.Xaml.Controls.IControlOverrides, global::Windows.UI.Xaml.Controls.IControlOverrides6
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		protected Control() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IControlFactory_CreateInstance("Windows.UI.Xaml.Controls.Control");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IControlFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
			global::System.IntPtr __pRetVal_WithAggregation;
			__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IControlFactory__Impl.Stubs.CreateInstance(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Controls.IControlFactory).TypeHandle
												), 
								outerInspectable, 
								out innerInspectable
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
			global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
			return innerInspectable;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Template")]
		public virtual global::Windows.UI.Xaml.Controls.ControlTemplate get_Template()
		{
			global::Windows.UI.Xaml.Controls.ControlTemplate __retVal = global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.get_Template(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Template")]
		public virtual void put_Template(global::Windows.UI.Xaml.Controls.ControlTemplate value)
		{
			global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.put_Template(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		public virtual global::Windows.UI.Xaml.Media.Brush get_Background()
		{
			global::Windows.UI.Xaml.Media.Brush __retVal = global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.get_Background(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		public virtual void put_Background(global::Windows.UI.Xaml.Media.Brush value)
		{
			global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.put_Background(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "IsEnabledChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_IsEnabledChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.add_IsEnabledChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "IsEnabledChanged")]
		public virtual void remove_IsEnabledChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.remove_IsEnabledChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual bool Focus(global::Windows.UI.Xaml.FocusState value)
		{
			bool __retVal = global::Windows.UI.Xaml.Controls.IControl__Impl.Stubs.Focus(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "FocusEngaged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_FocusEngaged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.FocusEngagedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IControl4__Impl.Stubs.add_FocusEngaged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "FocusEngaged")]
		public virtual void remove_FocusEngaged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IControl4__Impl.Stubs.remove_FocusEngaged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "FocusDisengaged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_FocusDisengaged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.FocusDisengagedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IControl4__Impl.Stubs.add_FocusDisengaged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "FocusDisengaged")]
		public virtual void remove_FocusDisengaged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IControl4__Impl.Stubs.remove_FocusDisengaged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		object global::Windows.UI.Xaml.Controls.IControlProtected.get_DefaultStyleKey()
		{
			object __retVal_1 = this.get_DefaultStyleKey();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultStyleKey")]
		protected virtual object get_DefaultStyleKey()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IControlProtected__Impl.Stubs.get_DefaultStyleKey(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.Controls.IControlProtected.put_DefaultStyleKey(object value)
		{
			this.put_DefaultStyleKey(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DefaultStyleKey")]
		protected virtual void put_DefaultStyleKey(object value)
		{
			global::Windows.UI.Xaml.Controls.IControlProtected__Impl.Stubs.put_DefaultStyleKey(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		global::Windows.UI.Xaml.DependencyObject global::Windows.UI.Xaml.Controls.IControlProtected.GetTemplateChild(string childName)
		{
			global::Windows.UI.Xaml.DependencyObject __retVal_1 = this.GetTemplateChild(childName);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.DependencyObject GetTemplateChild(string childName)
		{
			global::Windows.UI.Xaml.DependencyObject __retVal = global::Windows.UI.Xaml.Controls.IControlProtected__Impl.Stubs.GetTemplateChild(
								this, 
								childName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerEntered(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerEntered(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerEntered(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerEntered(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerPressed(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerPressed(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerPressed(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerPressed(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerMoved(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerMoved(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerMoved(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerMoved(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerReleased(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerReleased(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerReleased(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerReleased(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerExited(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerExited(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerExited(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerExited(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerCaptureLost(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerCaptureLost(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerCaptureLost(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerCaptureLost(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerCanceled(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerCanceled(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerCanceled(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerCanceled(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnPointerWheelChanged(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			this.OnPointerWheelChanged(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPointerWheelChanged(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnPointerWheelChanged(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnTapped(global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
		{
			this.OnTapped(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnTapped(global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnTapped(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnDoubleTapped(global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e)
		{
			this.OnDoubleTapped(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnDoubleTapped(global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnDoubleTapped(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnHolding(global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs e)
		{
			this.OnHolding(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnHolding(global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnHolding(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnRightTapped(global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs e)
		{
			this.OnRightTapped(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnRightTapped(global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnRightTapped(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnManipulationStarting(global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e)
		{
			this.OnManipulationStarting(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnManipulationStarting(global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnManipulationStarting(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnManipulationInertiaStarting(global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e)
		{
			this.OnManipulationInertiaStarting(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnManipulationInertiaStarting(global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnManipulationInertiaStarting(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnManipulationStarted(global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e)
		{
			this.OnManipulationStarted(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnManipulationStarted(global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnManipulationStarted(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnManipulationDelta(global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e)
		{
			this.OnManipulationDelta(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnManipulationDelta(global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnManipulationDelta(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnManipulationCompleted(global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e)
		{
			this.OnManipulationCompleted(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnManipulationCompleted(global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnManipulationCompleted(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnKeyUp(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			this.OnKeyUp(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnKeyUp(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnKeyUp(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnKeyDown(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			this.OnKeyDown(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnKeyDown(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnKeyDown(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnGotFocus(global::Windows.UI.Xaml.RoutedEventArgs e)
		{
			this.OnGotFocus(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnGotFocus(global::Windows.UI.Xaml.RoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnGotFocus(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnLostFocus(global::Windows.UI.Xaml.RoutedEventArgs e)
		{
			this.OnLostFocus(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnLostFocus(global::Windows.UI.Xaml.RoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnLostFocus(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnDragEnter(global::Windows.UI.Xaml.DragEventArgs e)
		{
			this.OnDragEnter(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnDragEnter(global::Windows.UI.Xaml.DragEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnDragEnter(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnDragLeave(global::Windows.UI.Xaml.DragEventArgs e)
		{
			this.OnDragLeave(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnDragLeave(global::Windows.UI.Xaml.DragEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnDragLeave(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnDragOver(global::Windows.UI.Xaml.DragEventArgs e)
		{
			this.OnDragOver(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnDragOver(global::Windows.UI.Xaml.DragEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnDragOver(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides.OnDrop(global::Windows.UI.Xaml.DragEventArgs e)
		{
			this.OnDrop(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnDrop(global::Windows.UI.Xaml.DragEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides__Impl.Stubs.OnDrop(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides6.OnPreviewKeyDown(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			this.OnPreviewKeyDown(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPreviewKeyDown(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides6__Impl.Stubs.OnPreviewKeyDown(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides6.OnPreviewKeyUp(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			this.OnPreviewKeyUp(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnPreviewKeyUp(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides6__Impl.Stubs.OnPreviewKeyUp(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IControlOverrides6.OnCharacterReceived(global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs e)
		{
			this.OnCharacterReceived(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnCharacterReceived(global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IControlOverrides6__Impl.Stubs.OnCharacterReceived(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Control(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IControlTemplate))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ControlTemplate : global::Windows.UI.Xaml.FrameworkTemplate, global::Windows.UI.Xaml.Controls.IControlTemplate
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ControlTemplate() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ControlTemplate");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TargetType")]
		public global::System.Type get_TargetType()
		{
			global::System.Type __retVal = global::Windows.UI.Xaml.Controls.IControlTemplate__Impl.Stubs.get_TargetType(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TargetType")]
		public void put_TargetType(global::System.Type value)
		{
			global::Windows.UI.Xaml.Controls.IControlTemplate__Impl.Stubs.put_TargetType(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ControlTemplate(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IFocusEngagedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FocusEngagedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Controls.IFocusEngagedEventArgs
	{
		public FocusEngagedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IFocusDisengagedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class FocusDisengagedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Controls.IFocusDisengagedEventArgs
	{
		public FocusDisengagedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IUserControl))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class UserControl : global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.IUserControl
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public UserControl() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IUserControlFactory_CreateInstance("Windows.UI.Xaml.Controls.UserControl");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IUserControlFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.UserControl).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IUserControlFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IUserControlFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IUserControlFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IUserControlFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		public virtual global::Windows.UI.Xaml.UIElement get_Content()
		{
			global::Windows.UI.Xaml.UIElement __retVal = global::Windows.UI.Xaml.Controls.IUserControl__Impl.Stubs.get_Content(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		public virtual void put_Content(global::Windows.UI.Xaml.UIElement value)
		{
			global::Windows.UI.Xaml.Controls.IUserControl__Impl.Stubs.put_Content(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public UserControl(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IPage))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IPageOverrides))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Page : global::Windows.UI.Xaml.Controls.UserControl, global::Windows.UI.Xaml.Controls.IPage, global::Windows.UI.Xaml.Controls.IPageOverrides
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Page() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IPageFactory_CreateInstance("Windows.UI.Xaml.Controls.Page");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IPageFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.Page).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IPageFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IPageFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IPageFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IPageFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		void global::Windows.UI.Xaml.Controls.IPageOverrides.OnNavigatedFrom(global::Windows.UI.Xaml.Navigation.NavigationEventArgs e)
		{
			this.OnNavigatedFrom(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnNavigatedFrom(global::Windows.UI.Xaml.Navigation.NavigationEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IPageOverrides__Impl.Stubs.OnNavigatedFrom(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IPageOverrides.OnNavigatedTo(global::Windows.UI.Xaml.Navigation.NavigationEventArgs e)
		{
			this.OnNavigatedTo(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnNavigatedTo(global::Windows.UI.Xaml.Navigation.NavigationEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IPageOverrides__Impl.Stubs.OnNavigatedTo(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IPageOverrides.OnNavigatingFrom(global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs e)
		{
			this.OnNavigatingFrom(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnNavigatingFrom(global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs e)
		{
			global::Windows.UI.Xaml.Controls.IPageOverrides__Impl.Stubs.OnNavigatingFrom(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Page(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IPanel))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Panel : global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.Controls.IPanel
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Children")]
		public virtual global::Windows.UI.Xaml.Controls.UIElementCollection get_Children()
		{
			global::Windows.UI.Xaml.Controls.UIElementCollection __retVal = global::Windows.UI.Xaml.Controls.IPanel__Impl.Stubs.get_Children(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		public virtual global::Windows.UI.Xaml.Media.Brush get_Background()
		{
			global::Windows.UI.Xaml.Media.Brush __retVal = global::Windows.UI.Xaml.Controls.IPanel__Impl.Stubs.get_Background(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		public virtual void put_Background(global::Windows.UI.Xaml.Media.Brush value)
		{
			global::Windows.UI.Xaml.Controls.IPanel__Impl.Stubs.put_Background(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Panel(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.UIElement>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class UIElementCollection : global::System.__ComObject, global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>, global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>, global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.UIElement>
	{
		int global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Count(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)this));
			}
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.IsReadOnly
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IsReadOnly(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)this));
			}
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.Add(global::Windows.UI.Xaml.UIElement item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Add(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.Clear()
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Clear(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)this));
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.Contains(global::Windows.UI.Xaml.UIElement item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Contains(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.CopyTo(
					global::Windows.UI.Xaml.UIElement[] array, 
					int arrayindex)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.CopyTo(
								this, 
								array, 
								arrayindex
							);
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>.Remove(global::Windows.UI.Xaml.UIElement item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Remove(
								this, 
								item
							);
		}

		global::Windows.UI.Xaml.UIElement global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>.this[int index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)this), 
									index
								);
			}
			set
			{
				global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Set(
									this, 
									index, 
									value
								);
			}
		}

		int global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>.IndexOf(global::Windows.UI.Xaml.UIElement item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IndexOf(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>.Insert(
					int index, 
					global::Windows.UI.Xaml.UIElement item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Insert(
								this, 
								index, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>.RemoveAt(int index)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.RemoveAt(
								((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)this), 
								index
							);
		}

		global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.UIElement> global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.UIElement>.GetEnumerator()
		{
			global::System.RuntimeTypeHandle dummySharedDynamicAdapter = typeof(global::System.Runtime.InteropServices.WindowsRuntime.IIterableSharedReferenceTypesDynamicAdapter<global::Windows.UI.Xaml.UIElement>).TypeHandle;
			return (global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.UIElement>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.UIElement>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.UIElement>).TypeHandle
							);
		}

		public UIElementCollection(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IGrid))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Grid : global::Windows.UI.Xaml.Controls.Panel, global::Windows.UI.Xaml.Controls.IGrid
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Grid() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IGridFactory_CreateInstance("Windows.UI.Xaml.Controls.Grid");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IGridFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.Grid).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IGridFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IGridFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IGridFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IGridFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RowDefinitions")]
		public virtual global::Windows.UI.Xaml.Controls.RowDefinitionCollection get_RowDefinitions()
		{
			global::Windows.UI.Xaml.Controls.RowDefinitionCollection __retVal = global::Windows.UI.Xaml.Controls.IGrid__Impl.Stubs.get_RowDefinitions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ColumnDefinitions")]
		public virtual global::Windows.UI.Xaml.Controls.ColumnDefinitionCollection get_ColumnDefinitions()
		{
			global::Windows.UI.Xaml.Controls.ColumnDefinitionCollection __retVal = global::Windows.UI.Xaml.Controls.IGrid__Impl.Stubs.get_ColumnDefinitions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public static int GetRow(global::Windows.UI.Xaml.FrameworkElement element)
		{
			int retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IGridStatics_GetRow(
								"Windows.UI.Xaml.Controls.Grid", 
								element
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static int __Factory_Windows_UI_Xaml_Controls__IGridStatics_GetRow(
					string typeName, 
					global::Windows.UI.Xaml.FrameworkElement element)
		{
			int __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.Controls.IGridStatics__Impl.Stubs.GetRow(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Controls.IGridStatics).TypeHandle
												), 
								element
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static void SetRow(
					global::Windows.UI.Xaml.FrameworkElement element, 
					int value)
		{
			__Factory_Windows_UI_Xaml_Controls__IGridStatics_SetRow(
								"Windows.UI.Xaml.Controls.Grid", 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml_Controls__IGridStatics_SetRow(
					string typeName, 
					global::Windows.UI.Xaml.FrameworkElement element, 
					int value)
		{
			global::Windows.UI.Xaml.Controls.IGridStatics__Impl.Stubs.SetRow(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Controls.IGridStatics).TypeHandle
												), 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public static int GetColumn(global::Windows.UI.Xaml.FrameworkElement element)
		{
			int retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IGridStatics_GetColumn(
								"Windows.UI.Xaml.Controls.Grid", 
								element
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static int __Factory_Windows_UI_Xaml_Controls__IGridStatics_GetColumn(
					string typeName, 
					global::Windows.UI.Xaml.FrameworkElement element)
		{
			int __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.Controls.IGridStatics__Impl.Stubs.GetColumn(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Controls.IGridStatics).TypeHandle
												), 
								element
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static void SetColumn(
					global::Windows.UI.Xaml.FrameworkElement element, 
					int value)
		{
			__Factory_Windows_UI_Xaml_Controls__IGridStatics_SetColumn(
								"Windows.UI.Xaml.Controls.Grid", 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml_Controls__IGridStatics_SetColumn(
					string typeName, 
					global::Windows.UI.Xaml.FrameworkElement element, 
					int value)
		{
			global::Windows.UI.Xaml.Controls.IGridStatics__Impl.Stubs.SetColumn(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Controls.IGridStatics).TypeHandle
												), 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Grid(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.RowDefinition>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class RowDefinitionCollection : global::System.__ComObject, global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>, global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>, global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.RowDefinition>
	{
		int global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Count(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>)this));
			}
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.IsReadOnly
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IsReadOnly(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>)this));
			}
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.Add(global::Windows.UI.Xaml.Controls.RowDefinition item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Add(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.Clear()
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Clear(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>)this));
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.Contains(global::Windows.UI.Xaml.Controls.RowDefinition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Contains(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.CopyTo(
					global::Windows.UI.Xaml.Controls.RowDefinition[] array, 
					int arrayindex)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.CopyTo(
								this, 
								array, 
								arrayindex
							);
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.RowDefinition>.Remove(global::Windows.UI.Xaml.Controls.RowDefinition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Remove(
								this, 
								item
							);
		}

		global::Windows.UI.Xaml.Controls.RowDefinition global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>.this[int index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>)this), 
									index
								);
			}
			set
			{
				global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Set(
									this, 
									index, 
									value
								);
			}
		}

		int global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>.IndexOf(global::Windows.UI.Xaml.Controls.RowDefinition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IndexOf(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>.Insert(
					int index, 
					global::Windows.UI.Xaml.Controls.RowDefinition item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Insert(
								this, 
								index, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>.RemoveAt(int index)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.RemoveAt(
								((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.RowDefinition>)this), 
								index
							);
		}

		global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.Controls.RowDefinition> global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.RowDefinition>.GetEnumerator()
		{
			global::System.RuntimeTypeHandle dummySharedDynamicAdapter = typeof(global::System.Runtime.InteropServices.WindowsRuntime.IIterableSharedReferenceTypesDynamicAdapter<global::Windows.UI.Xaml.Controls.RowDefinition>).TypeHandle;
			return (global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.Controls.RowDefinition>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.RowDefinition>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.RowDefinition>).TypeHandle
							);
		}

		public RowDefinitionCollection(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IRowDefinition))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class RowDefinition : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Controls.IRowDefinition
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public RowDefinition() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.RowDefinition");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Height")]
		public global::Windows.UI.Xaml.GridLength get_Height()
		{
			global::Windows.UI.Xaml.GridLength __retVal = global::Windows.UI.Xaml.Controls.IRowDefinition__Impl.Stubs.get_Height(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Height")]
		public void put_Height(global::Windows.UI.Xaml.GridLength value)
		{
			global::Windows.UI.Xaml.Controls.IRowDefinition__Impl.Stubs.put_Height(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public RowDefinition(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.ColumnDefinition>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ColumnDefinitionCollection : global::System.__ComObject, global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>, global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>, global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.ColumnDefinition>
	{
		int global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Count(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>)this));
			}
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.IsReadOnly
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IsReadOnly(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>)this));
			}
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.Add(global::Windows.UI.Xaml.Controls.ColumnDefinition item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Add(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.Clear()
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Clear(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>)this));
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.Contains(global::Windows.UI.Xaml.Controls.ColumnDefinition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Contains(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.CopyTo(
					global::Windows.UI.Xaml.Controls.ColumnDefinition[] array, 
					int arrayindex)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.CopyTo(
								this, 
								array, 
								arrayindex
							);
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.ColumnDefinition>.Remove(global::Windows.UI.Xaml.Controls.ColumnDefinition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Remove(
								this, 
								item
							);
		}

		global::Windows.UI.Xaml.Controls.ColumnDefinition global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>.this[int index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>)this), 
									index
								);
			}
			set
			{
				global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Set(
									this, 
									index, 
									value
								);
			}
		}

		int global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>.IndexOf(global::Windows.UI.Xaml.Controls.ColumnDefinition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IndexOf(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>.Insert(
					int index, 
					global::Windows.UI.Xaml.Controls.ColumnDefinition item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Insert(
								this, 
								index, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>.RemoveAt(int index)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.RemoveAt(
								((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Controls.ColumnDefinition>)this), 
								index
							);
		}

		global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.Controls.ColumnDefinition> global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.ColumnDefinition>.GetEnumerator()
		{
			global::System.RuntimeTypeHandle dummySharedDynamicAdapter = typeof(global::System.Runtime.InteropServices.WindowsRuntime.IIterableSharedReferenceTypesDynamicAdapter<global::Windows.UI.Xaml.Controls.ColumnDefinition>).TypeHandle;
			return (global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.Controls.ColumnDefinition>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.ColumnDefinition>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Controls.ColumnDefinition>).TypeHandle
							);
		}

		public ColumnDefinitionCollection(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IColumnDefinition))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ColumnDefinition : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Controls.IColumnDefinition
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ColumnDefinition() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ColumnDefinition");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Width")]
		public global::Windows.UI.Xaml.GridLength get_Width()
		{
			global::Windows.UI.Xaml.GridLength __retVal = global::Windows.UI.Xaml.Controls.IColumnDefinition__Impl.Stubs.get_Width(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Width")]
		public void put_Width(global::Windows.UI.Xaml.GridLength value)
		{
			global::Windows.UI.Xaml.Controls.IColumnDefinition__Impl.Stubs.put_Width(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ColumnDefinition(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IBorder))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class Border : global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.Controls.IBorder
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Border() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.Border");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		public global::Windows.UI.Xaml.Media.Brush get_Background()
		{
			global::Windows.UI.Xaml.Media.Brush __retVal = global::Windows.UI.Xaml.Controls.IBorder__Impl.Stubs.get_Background(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		public void put_Background(global::Windows.UI.Xaml.Media.Brush value)
		{
			global::Windows.UI.Xaml.Controls.IBorder__Impl.Stubs.put_Background(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Child")]
		public global::Windows.UI.Xaml.UIElement get_Child()
		{
			global::Windows.UI.Xaml.UIElement __retVal = global::Windows.UI.Xaml.Controls.IBorder__Impl.Stubs.get_Child(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Child")]
		public void put_Child(global::Windows.UI.Xaml.UIElement value)
		{
			global::Windows.UI.Xaml.Controls.IBorder__Impl.Stubs.put_Child(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Border(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IStackPanel))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class StackPanel : global::Windows.UI.Xaml.Controls.Panel, global::Windows.UI.Xaml.Controls.IStackPanel, global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public StackPanel() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IStackPanelFactory_CreateInstance("Windows.UI.Xaml.Controls.StackPanel");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IStackPanelFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.StackPanel).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IStackPanelFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IStackPanelFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IStackPanelFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IStackPanelFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Orientation")]
		public virtual global::Windows.UI.Xaml.Controls.Orientation get_Orientation()
		{
			global::Windows.UI.Xaml.Controls.Orientation __retVal = global::Windows.UI.Xaml.Controls.IStackPanel__Impl.Stubs.get_Orientation(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Orientation")]
		public virtual void put_Orientation(global::Windows.UI.Xaml.Controls.Orientation value)
		{
			global::Windows.UI.Xaml.Controls.IStackPanel__Impl.Stubs.put_Orientation(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "HorizontalSnapPointsChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_HorizontalSnapPointsChanged(global::System.EventHandler<object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo__Impl.Stubs.add_HorizontalSnapPointsChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "HorizontalSnapPointsChanged")]
		public virtual void remove_HorizontalSnapPointsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo__Impl.Stubs.remove_HorizontalSnapPointsChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VerticalSnapPointsChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VerticalSnapPointsChanged(global::System.EventHandler<object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo__Impl.Stubs.add_VerticalSnapPointsChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VerticalSnapPointsChanged")]
		public virtual void remove_VerticalSnapPointsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo__Impl.Stubs.remove_VerticalSnapPointsChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public StackPanel(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IContentControl))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IContentControlOverrides))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ContentControl : global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.IContentControl, global::Windows.UI.Xaml.Controls.IContentControlOverrides
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ContentControl() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IContentControlFactory_CreateInstance("Windows.UI.Xaml.Controls.ContentControl");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IContentControlFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.ContentControl).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IContentControlFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IContentControlFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IContentControlFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IContentControlFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		public virtual object get_Content()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IContentControl__Impl.Stubs.get_Content(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		public virtual void put_Content(object value)
		{
			global::Windows.UI.Xaml.Controls.IContentControl__Impl.Stubs.put_Content(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IContentControlOverrides.OnContentChanged(
					object oldContent, 
					object newContent)
		{
			this.OnContentChanged(
								oldContent, 
								newContent
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnContentChanged(
					object oldContent, 
					object newContent)
		{
			global::Windows.UI.Xaml.Controls.IContentControlOverrides__Impl.Stubs.OnContentChanged(
								this, 
								oldContent, 
								newContent
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IContentControlOverrides.OnContentTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldContentTemplate, 
					global::Windows.UI.Xaml.DataTemplate newContentTemplate)
		{
			this.OnContentTemplateChanged(
								oldContentTemplate, 
								newContentTemplate
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnContentTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldContentTemplate, 
					global::Windows.UI.Xaml.DataTemplate newContentTemplate)
		{
			global::Windows.UI.Xaml.Controls.IContentControlOverrides__Impl.Stubs.OnContentTemplateChanged(
								this, 
								oldContentTemplate, 
								newContentTemplate
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IContentControlOverrides.OnContentTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldContentTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newContentTemplateSelector)
		{
			this.OnContentTemplateSelectorChanged(
								oldContentTemplateSelector, 
								newContentTemplateSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnContentTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldContentTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newContentTemplateSelector)
		{
			global::Windows.UI.Xaml.Controls.IContentControlOverrides__Impl.Stubs.OnContentTemplateSelectorChanged(
								this, 
								oldContentTemplateSelector, 
								newContentTemplateSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ContentControl(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ContainerContentChangingEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ContainerContentChangingEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemIndex")]
		public int get_ItemIndex()
		{
			int __retVal = global::Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs__Impl.Stubs.get_ItemIndex(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Item")]
		public object get_Item()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs__Impl.Stubs.get_Item(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Phase")]
		public uint get_Phase()
		{
			uint __retVal = global::Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs__Impl.Stubs.get_Phase(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public ContainerContentChangingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IDataTemplateSelector))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class DataTemplateSelector : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IDataTemplateSelector, global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides, global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides2
	{
		global::Windows.UI.Xaml.DataTemplate global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides.SelectTemplateCore(
					object item, 
					global::Windows.UI.Xaml.DependencyObject container)
		{
			global::Windows.UI.Xaml.DataTemplate __retVal_1 = this.SelectTemplateCore(
								item, 
								container
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.DataTemplate SelectTemplateCore(
					object item, 
					global::Windows.UI.Xaml.DependencyObject container)
		{
			global::Windows.UI.Xaml.DataTemplate __retVal = global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides__Impl.Stubs.SelectTemplateCore(
								this, 
								item, 
								container
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.DataTemplate global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides2.SelectTemplateCore(object item)
		{
			global::Windows.UI.Xaml.DataTemplate __retVal_1 = this.SelectTemplateCore(item);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.DataTemplate SelectTemplateCore(object item)
		{
			global::Windows.UI.Xaml.DataTemplate __retVal = global::Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides2__Impl.Stubs.SelectTemplateCore(
								this, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public DataTemplateSelector(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IScrollViewer))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IScrollViewer2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IScrollViewer3))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IScrollViewer4))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ScrollViewer : global::Windows.UI.Xaml.Controls.ContentControl, global::Windows.UI.Xaml.Controls.IScrollViewer, global::Windows.UI.Xaml.Controls.IScrollViewer2, global::Windows.UI.Xaml.Controls.IScrollViewer3, global::Windows.UI.Xaml.Controls.IScrollViewer4
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ScrollViewer() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ScrollViewer");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalScrollBarVisibility")]
		public global::Windows.UI.Xaml.Controls.ScrollBarVisibility get_HorizontalScrollBarVisibility()
		{
			global::Windows.UI.Xaml.Controls.ScrollBarVisibility __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer__Impl.Stubs.get_HorizontalScrollBarVisibility(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalScrollBarVisibility")]
		public void put_HorizontalScrollBarVisibility(global::Windows.UI.Xaml.Controls.ScrollBarVisibility value)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer__Impl.Stubs.put_HorizontalScrollBarVisibility(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalScrollBarVisibility")]
		public global::Windows.UI.Xaml.Controls.ScrollBarVisibility get_VerticalScrollBarVisibility()
		{
			global::Windows.UI.Xaml.Controls.ScrollBarVisibility __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer__Impl.Stubs.get_VerticalScrollBarVisibility(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalScrollBarVisibility")]
		public void put_VerticalScrollBarVisibility(global::Windows.UI.Xaml.Controls.ScrollBarVisibility value)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer__Impl.Stubs.put_VerticalScrollBarVisibility(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ViewChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ViewChanged(global::System.EventHandler<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer__Impl.Stubs.add_ViewChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ViewChanged")]
		public void remove_ViewChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer__Impl.Stubs.remove_ViewChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ViewChanging")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ViewChanging(global::System.EventHandler<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer2__Impl.Stubs.add_ViewChanging(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ViewChanging")]
		public void remove_ViewChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer2__Impl.Stubs.remove_ViewChanging(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DirectManipulationStarted")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DirectManipulationStarted(global::System.EventHandler<object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer3__Impl.Stubs.add_DirectManipulationStarted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DirectManipulationStarted")]
		public void remove_DirectManipulationStarted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer3__Impl.Stubs.remove_DirectManipulationStarted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DirectManipulationCompleted")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DirectManipulationCompleted(global::System.EventHandler<object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer3__Impl.Stubs.add_DirectManipulationCompleted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DirectManipulationCompleted")]
		public void remove_DirectManipulationCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer3__Impl.Stubs.remove_DirectManipulationCompleted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AnchorRequested")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AnchorRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ScrollViewer, global::Windows.UI.Xaml.Controls.AnchorRequestedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IScrollViewer4__Impl.Stubs.add_AnchorRequested(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AnchorRequested")]
		public void remove_AnchorRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IScrollViewer4__Impl.Stubs.remove_AnchorRequested(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ScrollViewer(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IScrollViewerViewChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ScrollViewerViewChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IScrollViewerViewChangedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ScrollViewerViewChangedEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public ScrollViewerViewChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IScrollViewerViewChangingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ScrollViewerViewChangingEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IScrollViewerViewChangingEventArgs
	{
		public ScrollViewerViewChangingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IAnchorRequestedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AnchorRequestedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IAnchorRequestedEventArgs
	{
		public AnchorRequestedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBlock))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBlock6))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextBlock : global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.Controls.ITextBlock, global::Windows.UI.Xaml.Controls.ITextBlock6
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TextBlock() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.TextBlock");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontSize")]
		public double get_FontSize()
		{
			double __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.get_FontSize(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontSize")]
		public void put_FontSize(double value)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.put_FontSize(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontFamily")]
		public global::Windows.UI.Xaml.Media.FontFamily get_FontFamily()
		{
			global::Windows.UI.Xaml.Media.FontFamily __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.get_FontFamily(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontFamily")]
		public void put_FontFamily(global::Windows.UI.Xaml.Media.FontFamily value)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.put_FontFamily(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontWeight")]
		public global::Windows.UI.Text.FontWeight get_FontWeight()
		{
			global::Windows.UI.Text.FontWeight __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.get_FontWeight(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontWeight")]
		public void put_FontWeight(global::Windows.UI.Text.FontWeight value)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.put_FontWeight(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TextWrapping")]
		public global::Windows.UI.Xaml.TextWrapping get_TextWrapping()
		{
			global::Windows.UI.Xaml.TextWrapping __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.get_TextWrapping(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TextWrapping")]
		public void put_TextWrapping(global::Windows.UI.Xaml.TextWrapping value)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.put_TextWrapping(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Text")]
		public string get_Text()
		{
			string __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.get_Text(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Text")]
		public void put_Text(string value)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.put_Text(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanged(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.add_SelectionChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanged")]
		public void remove_SelectionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.remove_SelectionChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextMenuOpening")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextMenuOpening(global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.add_ContextMenuOpening(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextMenuOpening")]
		public void remove_ContextMenuOpening(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock__Impl.Stubs.remove_ContextMenuOpening(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "IsTextTrimmedChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_IsTextTrimmedChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBlock, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBlock6__Impl.Stubs.add_IsTextTrimmedChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "IsTextTrimmedChanged")]
		public void remove_IsTextTrimmedChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBlock6__Impl.Stubs.remove_IsTextTrimmedChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TextBlock(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IContextMenuEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ContextMenuEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Controls.IContextMenuEventArgs
	{
		public ContextMenuEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class IsTextTrimmedChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs
	{
		public IsTextTrimmedChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IButton))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Button : global::Windows.UI.Xaml.Controls.Primitives.ButtonBase, global::Windows.UI.Xaml.Controls.IButton
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Button() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IButtonFactory_CreateInstance("Windows.UI.Xaml.Controls.Button");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IButtonFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.Button).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IButtonFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IButtonFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IButtonFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IButtonFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		public Button(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IItemsControl))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IItemsControlOverrides))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ItemsControl : global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.IItemsControl, global::Windows.UI.Xaml.Controls.IItemsControlOverrides
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemsSource")]
		public virtual object get_ItemsSource()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IItemsControl__Impl.Stubs.get_ItemsSource(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ItemsSource")]
		public virtual void put_ItemsSource(object value)
		{
			global::Windows.UI.Xaml.Controls.IItemsControl__Impl.Stubs.put_ItemsSource(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Items")]
		public virtual global::Windows.UI.Xaml.Controls.ItemCollection get_Items()
		{
			global::Windows.UI.Xaml.Controls.ItemCollection __retVal = global::Windows.UI.Xaml.Controls.IItemsControl__Impl.Stubs.get_Items(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemTemplate")]
		public virtual global::Windows.UI.Xaml.DataTemplate get_ItemTemplate()
		{
			global::Windows.UI.Xaml.DataTemplate __retVal = global::Windows.UI.Xaml.Controls.IItemsControl__Impl.Stubs.get_ItemTemplate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ItemTemplate")]
		public virtual void put_ItemTemplate(global::Windows.UI.Xaml.DataTemplate value)
		{
			global::Windows.UI.Xaml.Controls.IItemsControl__Impl.Stubs.put_ItemTemplate(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		bool global::Windows.UI.Xaml.Controls.IItemsControlOverrides.IsItemItsOwnContainerOverride(object item)
		{
			bool __retVal_1 = this.IsItemItsOwnContainerOverride(item);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual bool IsItemItsOwnContainerOverride(object item)
		{
			bool __retVal = global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.IsItemItsOwnContainerOverride(
								this, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		global::Windows.UI.Xaml.DependencyObject global::Windows.UI.Xaml.Controls.IItemsControlOverrides.GetContainerForItemOverride()
		{
			global::Windows.UI.Xaml.DependencyObject __retVal_1 = this.GetContainerForItemOverride();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.DependencyObject GetContainerForItemOverride()
		{
			global::Windows.UI.Xaml.DependencyObject __retVal = global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.GetContainerForItemOverride(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.ClearContainerForItemOverride(
					global::Windows.UI.Xaml.DependencyObject element, 
					object item)
		{
			this.ClearContainerForItemOverride(
								element, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void ClearContainerForItemOverride(
					global::Windows.UI.Xaml.DependencyObject element, 
					object item)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.ClearContainerForItemOverride(
								this, 
								element, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.PrepareContainerForItemOverride(
					global::Windows.UI.Xaml.DependencyObject element, 
					object item)
		{
			this.PrepareContainerForItemOverride(
								element, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void PrepareContainerForItemOverride(
					global::Windows.UI.Xaml.DependencyObject element, 
					object item)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.PrepareContainerForItemOverride(
								this, 
								element, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.OnItemsChanged(object e)
		{
			this.OnItemsChanged(e);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnItemsChanged(object e)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.OnItemsChanged(
								this, 
								e
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.OnItemContainerStyleChanged(
					global::Windows.UI.Xaml.Style oldItemContainerStyle, 
					global::Windows.UI.Xaml.Style newItemContainerStyle)
		{
			this.OnItemContainerStyleChanged(
								oldItemContainerStyle, 
								newItemContainerStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnItemContainerStyleChanged(
					global::Windows.UI.Xaml.Style oldItemContainerStyle, 
					global::Windows.UI.Xaml.Style newItemContainerStyle)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.OnItemContainerStyleChanged(
								this, 
								oldItemContainerStyle, 
								newItemContainerStyle
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.OnItemContainerStyleSelectorChanged(
					global::Windows.UI.Xaml.Controls.StyleSelector oldItemContainerStyleSelector, 
					global::Windows.UI.Xaml.Controls.StyleSelector newItemContainerStyleSelector)
		{
			this.OnItemContainerStyleSelectorChanged(
								oldItemContainerStyleSelector, 
								newItemContainerStyleSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnItemContainerStyleSelectorChanged(
					global::Windows.UI.Xaml.Controls.StyleSelector oldItemContainerStyleSelector, 
					global::Windows.UI.Xaml.Controls.StyleSelector newItemContainerStyleSelector)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.OnItemContainerStyleSelectorChanged(
								this, 
								oldItemContainerStyleSelector, 
								newItemContainerStyleSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.OnItemTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldItemTemplate, 
					global::Windows.UI.Xaml.DataTemplate newItemTemplate)
		{
			this.OnItemTemplateChanged(
								oldItemTemplate, 
								newItemTemplate
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnItemTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldItemTemplate, 
					global::Windows.UI.Xaml.DataTemplate newItemTemplate)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.OnItemTemplateChanged(
								this, 
								oldItemTemplate, 
								newItemTemplate
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.OnItemTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldItemTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newItemTemplateSelector)
		{
			this.OnItemTemplateSelectorChanged(
								oldItemTemplateSelector, 
								newItemTemplateSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnItemTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldItemTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newItemTemplateSelector)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.OnItemTemplateSelectorChanged(
								this, 
								oldItemTemplateSelector, 
								newItemTemplateSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IItemsControlOverrides.OnGroupStyleSelectorChanged(
					global::Windows.UI.Xaml.Controls.GroupStyleSelector oldGroupStyleSelector, 
					global::Windows.UI.Xaml.Controls.GroupStyleSelector newGroupStyleSelector)
		{
			this.OnGroupStyleSelectorChanged(
								oldGroupStyleSelector, 
								newGroupStyleSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnGroupStyleSelectorChanged(
					global::Windows.UI.Xaml.Controls.GroupStyleSelector oldGroupStyleSelector, 
					global::Windows.UI.Xaml.Controls.GroupStyleSelector newGroupStyleSelector)
		{
			global::Windows.UI.Xaml.Controls.IItemsControlOverrides__Impl.Stubs.OnGroupStyleSelectorChanged(
								this, 
								oldGroupStyleSelector, 
								newGroupStyleSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ItemsControl(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.Foundation.Collections.IObservableVector<object>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IList<object>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.ICollection<object>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<object>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ItemCollection : global::System.__ComObject, global::Windows.Foundation.Collections.IObservableVector<object>, global::System.Collections.Generic.IList<object>, global::System.Collections.Generic.ICollection<object>, global::System.Collections.Generic.IEnumerable<object>
	{
		int global::System.Collections.Generic.ICollection<object>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Count(((global::System.Collections.Generic.IList<object>)this));
			}
		}

		bool global::System.Collections.Generic.ICollection<object>.IsReadOnly
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IsReadOnly(((global::System.Collections.Generic.IList<object>)this));
			}
		}

		void global::System.Collections.Generic.ICollection<object>.Add(object item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Add(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<object>.Clear()
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Clear(((global::System.Collections.Generic.IList<object>)this));
		}

		bool global::System.Collections.Generic.ICollection<object>.Contains(object item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Contains(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<object>.CopyTo(
					object[] array, 
					int arrayindex)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.CopyTo(
								this, 
								array, 
								arrayindex
							);
		}

		bool global::System.Collections.Generic.ICollection<object>.Remove(object item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Remove(
								this, 
								item
							);
		}

		object global::System.Collections.Generic.IList<object>.this[int index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IList<object>)this), 
									index
								);
			}
			set
			{
				global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Set(
									this, 
									index, 
									value
								);
			}
		}

		int global::System.Collections.Generic.IList<object>.IndexOf(object item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IndexOf(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.IList<object>.Insert(
					int index, 
					object item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Insert(
								this, 
								index, 
								item
							);
		}

		void global::System.Collections.Generic.IList<object>.RemoveAt(int index)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.RemoveAt(
								((global::System.Collections.Generic.IList<object>)this), 
								index
							);
		}

		global::System.Collections.Generic.IEnumerator<object> global::System.Collections.Generic.IEnumerable<object>.GetEnumerator()
		{
			global::System.RuntimeTypeHandle dummySharedDynamicAdapter = typeof(global::System.Runtime.InteropServices.WindowsRuntime.IIterableSharedReferenceTypesDynamicAdapter<object>).TypeHandle;
			return (global::System.Collections.Generic.IEnumerator<object>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<object>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<object>).TypeHandle
							);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VectorChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VectorChanged(global::Windows.Foundation.Collections.VectorChangedEventHandler<object> vhnd)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.Foundation.Collections.IObservableVector_A__o__V___Impl.Stubs.add_VectorChanged(
								this, 
								vhnd
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VectorChanged")]
		public void remove_VectorChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.Foundation.Collections.IObservableVector_A__o__V___Impl.Stubs.remove_VectorChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ItemCollection(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IStyleSelector))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IStyleSelectorOverrides))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class StyleSelector : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IStyleSelector, global::Windows.UI.Xaml.Controls.IStyleSelectorOverrides
	{
		global::Windows.UI.Xaml.Style global::Windows.UI.Xaml.Controls.IStyleSelectorOverrides.SelectStyleCore(
					object item, 
					global::Windows.UI.Xaml.DependencyObject container)
		{
			global::Windows.UI.Xaml.Style __retVal_1 = this.SelectStyleCore(
								item, 
								container
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Style SelectStyleCore(
					object item, 
					global::Windows.UI.Xaml.DependencyObject container)
		{
			global::Windows.UI.Xaml.Style __retVal = global::Windows.UI.Xaml.Controls.IStyleSelectorOverrides__Impl.Stubs.SelectStyleCore(
								this, 
								item, 
								container
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public StyleSelector(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IGroupStyleSelector))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IGroupStyleSelectorOverrides))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class GroupStyleSelector : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IGroupStyleSelector, global::Windows.UI.Xaml.Controls.IGroupStyleSelectorOverrides
	{
		global::Windows.UI.Xaml.Controls.GroupStyle global::Windows.UI.Xaml.Controls.IGroupStyleSelectorOverrides.SelectGroupStyleCore(
					object group, 
					uint level)
		{
			global::Windows.UI.Xaml.Controls.GroupStyle __retVal_1 = this.SelectGroupStyleCore(
								group, 
								level
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal_1;
		}

		protected virtual global::Windows.UI.Xaml.Controls.GroupStyle SelectGroupStyleCore(
					object group, 
					uint level)
		{
			global::Windows.UI.Xaml.Controls.GroupStyle __retVal = global::Windows.UI.Xaml.Controls.IGroupStyleSelectorOverrides__Impl.Stubs.SelectGroupStyleCore(
								this, 
								group, 
								level
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public GroupStyleSelector(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IGroupStyle))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IGroupStyle2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.ComponentModel.INotifyPropertyChanged))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class GroupStyle : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IGroupStyle, global::Windows.UI.Xaml.Controls.IGroupStyle2, global::System.ComponentModel.INotifyPropertyChanged
	{
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __add_PropertyChanged(global::System.ComponentModel.PropertyChangedEventHandler eventHandler)
		{
			return global::System.ComponentModel.INotifyPropertyChanged__Impl.RCWAdapter.add_PropertyChanged(
								this, 
								eventHandler
							);
		}

		void __remove_PropertyChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::System.ComponentModel.INotifyPropertyChanged__Impl.RCWAdapter.remove_PropertyChanged(
								this, 
								token
							);
		}

		public virtual event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged
		{
			add
			{
				global::System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.AddEventHandler<global::System.ComponentModel.PropertyChangedEventHandler>(
									new global::System.Func<global::System.ComponentModel.PropertyChangedEventHandler, global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken>(this.__add_PropertyChanged), 
									new global::System.Action<global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken>(this.__remove_PropertyChanged), 
									value
								);
			}
			remove
			{
				global::System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.RemoveEventHandler<global::System.ComponentModel.PropertyChangedEventHandler>(
									new global::System.Action<global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken>(this.__remove_PropertyChanged), 
									value
								);
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Panel")]
		public virtual global::Windows.UI.Xaml.Controls.ItemsPanelTemplate get_Panel()
		{
			global::Windows.UI.Xaml.Controls.ItemsPanelTemplate __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.get_Panel(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Panel")]
		public virtual void put_Panel(global::Windows.UI.Xaml.Controls.ItemsPanelTemplate value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.put_Panel(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContainerStyle")]
		public virtual global::Windows.UI.Xaml.Style get_ContainerStyle()
		{
			global::Windows.UI.Xaml.Style __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.get_ContainerStyle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContainerStyle")]
		public virtual void put_ContainerStyle(global::Windows.UI.Xaml.Style value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.put_ContainerStyle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContainerStyleSelector")]
		public virtual global::Windows.UI.Xaml.Controls.StyleSelector get_ContainerStyleSelector()
		{
			global::Windows.UI.Xaml.Controls.StyleSelector __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.get_ContainerStyleSelector(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContainerStyleSelector")]
		public virtual void put_ContainerStyleSelector(global::Windows.UI.Xaml.Controls.StyleSelector value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.put_ContainerStyleSelector(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeaderTemplate")]
		public virtual global::Windows.UI.Xaml.DataTemplate get_HeaderTemplate()
		{
			global::Windows.UI.Xaml.DataTemplate __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.get_HeaderTemplate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeaderTemplate")]
		public virtual void put_HeaderTemplate(global::Windows.UI.Xaml.DataTemplate value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.put_HeaderTemplate(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeaderTemplateSelector")]
		public virtual global::Windows.UI.Xaml.Controls.DataTemplateSelector get_HeaderTemplateSelector()
		{
			global::Windows.UI.Xaml.Controls.DataTemplateSelector __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.get_HeaderTemplateSelector(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeaderTemplateSelector")]
		public virtual void put_HeaderTemplateSelector(global::Windows.UI.Xaml.Controls.DataTemplateSelector value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.put_HeaderTemplateSelector(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HidesIfEmpty")]
		public virtual bool get_HidesIfEmpty()
		{
			bool __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.get_HidesIfEmpty(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HidesIfEmpty")]
		public virtual void put_HidesIfEmpty(bool value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle__Impl.Stubs.put_HidesIfEmpty(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeaderContainerStyle")]
		public virtual global::Windows.UI.Xaml.Style get_HeaderContainerStyle()
		{
			global::Windows.UI.Xaml.Style __retVal = global::Windows.UI.Xaml.Controls.IGroupStyle2__Impl.Stubs.get_HeaderContainerStyle(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeaderContainerStyle")]
		public virtual void put_HeaderContainerStyle(global::Windows.UI.Xaml.Style value)
		{
			global::Windows.UI.Xaml.Controls.IGroupStyle2__Impl.Stubs.put_HeaderContainerStyle(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public GroupStyle(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IItemsPanelTemplate))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ItemsPanelTemplate : global::Windows.UI.Xaml.FrameworkTemplate, global::Windows.UI.Xaml.Controls.IItemsPanelTemplate
	{
		public ItemsPanelTemplate(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ISelectionChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class SelectionChangedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Controls.ISelectionChangedEventArgs
	{
		public SelectionChangedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IListViewBase))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IListViewBase2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IListViewBase4))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ListViewBase : global::Windows.UI.Xaml.Controls.Primitives.Selector, global::Windows.UI.Xaml.Controls.IListViewBase, global::Windows.UI.Xaml.Controls.IListViewBase2, global::Windows.UI.Xaml.Controls.IListViewBase4
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsItemClickEnabled")]
		public virtual bool get_IsItemClickEnabled()
		{
			bool __retVal = global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.get_IsItemClickEnabled(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IsItemClickEnabled")]
		public virtual void put_IsItemClickEnabled(bool value)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.put_IsItemClickEnabled(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ItemClick")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ItemClick(global::Windows.UI.Xaml.Controls.ItemClickEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.add_ItemClick(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ItemClick")]
		public virtual void remove_ItemClick(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.remove_ItemClick(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragItemsStarting")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragItemsStarting(global::Windows.UI.Xaml.Controls.DragItemsStartingEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.add_DragItemsStarting(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragItemsStarting")]
		public virtual void remove_DragItemsStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.remove_DragItemsStarting(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual void ScrollIntoView(object item)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.ScrollIntoView(
								this, 
								item
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Header")]
		public virtual object get_Header()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.get_Header(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Header")]
		public virtual void put_Header(object value)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase__Impl.Stubs.put_Header(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContainerContentChanging")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContainerContentChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IListViewBase2__Impl.Stubs.add_ContainerContentChanging(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContainerContentChanging")]
		public virtual void remove_ContainerContentChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase2__Impl.Stubs.remove_ContainerContentChanging(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragItemsCompleted")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragItemsCompleted(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IListViewBase4__Impl.Stubs.add_DragItemsCompleted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragItemsCompleted")]
		public virtual void remove_DragItemsCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase4__Impl.Stubs.remove_DragItemsCompleted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ChoosingItemContainer")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ChoosingItemContainer(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IListViewBase4__Impl.Stubs.add_ChoosingItemContainer(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ChoosingItemContainer")]
		public virtual void remove_ChoosingItemContainer(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase4__Impl.Stubs.remove_ChoosingItemContainer(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ChoosingGroupHeaderContainer")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ChoosingGroupHeaderContainer(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IListViewBase4__Impl.Stubs.add_ChoosingGroupHeaderContainer(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ChoosingGroupHeaderContainer")]
		public virtual void remove_ChoosingGroupHeaderContainer(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IListViewBase4__Impl.Stubs.remove_ChoosingGroupHeaderContainer(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ListViewBase(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IItemClickEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ItemClickEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Controls.IItemClickEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClickedItem")]
		public object get_ClickedItem()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IItemClickEventArgs__Impl.Stubs.get_ClickedItem(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public ItemClickEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IDragItemsStartingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DragItemsStartingEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IDragItemsStartingEventArgs
	{
		public DragItemsStartingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IDragItemsCompletedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DragItemsCompletedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IDragItemsCompletedEventArgs
	{
		public DragItemsCompletedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IChoosingItemContainerEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ChoosingItemContainerEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IChoosingItemContainerEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ChoosingItemContainerEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public ChoosingItemContainerEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ChoosingGroupHeaderContainerEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ChoosingGroupHeaderContainerEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public ChoosingGroupHeaderContainerEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IListView))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ListView : global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.IListView
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ListView() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IListViewFactory_CreateInstance("Windows.UI.Xaml.Controls.ListView");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IListViewFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.ListView).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IListViewFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IListViewFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IListViewFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IListViewFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		public ListView(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBox))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBox2))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBox3))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBox6))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBox8))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class TextBox : global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.ITextBox, global::Windows.UI.Xaml.Controls.ITextBox2, global::Windows.UI.Xaml.Controls.ITextBox3, global::Windows.UI.Xaml.Controls.ITextBox6, global::Windows.UI.Xaml.Controls.ITextBox8
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public TextBox() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__ITextBoxFactory_CreateInstance("Windows.UI.Xaml.Controls.TextBox");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__ITextBoxFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.TextBox).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.ITextBoxFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.ITextBoxFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.ITextBoxFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.ITextBoxFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Text")]
		public virtual string get_Text()
		{
			string __retVal = global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.get_Text(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Text")]
		public virtual void put_Text(string value)
		{
			global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.put_Text(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextChanged(global::Windows.UI.Xaml.Controls.TextChangedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.add_TextChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextChanged")]
		public virtual void remove_TextChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.remove_TextChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanged(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.add_SelectionChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanged")]
		public virtual void remove_SelectionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.remove_SelectionChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextMenuOpening")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextMenuOpening(global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.add_ContextMenuOpening(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextMenuOpening")]
		public virtual void remove_ContextMenuOpening(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox__Impl.Stubs.remove_ContextMenuOpening(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Paste")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Paste(global::Windows.UI.Xaml.Controls.TextControlPasteEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox2__Impl.Stubs.add_Paste(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Paste")]
		public virtual void remove_Paste(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox2__Impl.Stubs.remove_Paste(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextCompositionStarted")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextCompositionStarted(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.add_TextCompositionStarted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextCompositionStarted")]
		public virtual void remove_TextCompositionStarted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.remove_TextCompositionStarted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextCompositionChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextCompositionChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.add_TextCompositionChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextCompositionChanged")]
		public virtual void remove_TextCompositionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.remove_TextCompositionChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextCompositionEnded")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextCompositionEnded(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.add_TextCompositionEnded(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextCompositionEnded")]
		public virtual void remove_TextCompositionEnded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.remove_TextCompositionEnded(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CandidateWindowBoundsChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CandidateWindowBoundsChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.add_CandidateWindowBoundsChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CandidateWindowBoundsChanged")]
		public virtual void remove_CandidateWindowBoundsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.remove_CandidateWindowBoundsChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextChanging")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.add_TextChanging(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextChanging")]
		public virtual void remove_TextChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox3__Impl.Stubs.remove_TextChanging(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CopyingToClipboard")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CopyingToClipboard(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox6__Impl.Stubs.add_CopyingToClipboard(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CopyingToClipboard")]
		public virtual void remove_CopyingToClipboard(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox6__Impl.Stubs.remove_CopyingToClipboard(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CuttingToClipboard")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CuttingToClipboard(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox6__Impl.Stubs.add_CuttingToClipboard(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CuttingToClipboard")]
		public virtual void remove_CuttingToClipboard(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox6__Impl.Stubs.remove_CuttingToClipboard(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "BeforeTextChanging")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_BeforeTextChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox6__Impl.Stubs.add_BeforeTextChanging(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "BeforeTextChanging")]
		public virtual void remove_BeforeTextChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox6__Impl.Stubs.remove_BeforeTextChanging(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanging")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ITextBox8__Impl.Stubs.add_SelectionChanging(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanging")]
		public virtual void remove_SelectionChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ITextBox8__Impl.Stubs.remove_SelectionChanging(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public TextBox(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextChangedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Controls.ITextChangedEventArgs
	{
		public TextChangedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextControlPasteEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextControlPasteEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextControlPasteEventArgs
	{
		public TextControlPasteEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextCompositionStartedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextCompositionStartedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextCompositionStartedEventArgs
	{
		public TextCompositionStartedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextCompositionChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextCompositionChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextCompositionChangedEventArgs
	{
		public TextCompositionChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextCompositionEndedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextCompositionEndedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextCompositionEndedEventArgs
	{
		public TextCompositionEndedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ICandidateWindowBoundsChangedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CandidateWindowBoundsChangedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ICandidateWindowBoundsChangedEventArgs
	{
		public CandidateWindowBoundsChangedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBoxTextChangingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextBoxTextChangingEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextBoxTextChangingEventArgs
	{
		public TextBoxTextChangingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextControlCopyingToClipboardEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextControlCopyingToClipboardEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextControlCopyingToClipboardEventArgs
	{
		public TextControlCopyingToClipboardEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextControlCuttingToClipboardEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextControlCuttingToClipboardEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextControlCuttingToClipboardEventArgs
	{
		public TextControlCuttingToClipboardEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBoxBeforeTextChangingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextBoxBeforeTextChangingEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextBoxBeforeTextChangingEventArgs
	{
		public TextBoxBeforeTextChangingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ITextBoxSelectionChangingEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TextBoxSelectionChangingEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Controls.ITextBoxSelectionChangingEventArgs
	{
		public TextBoxSelectionChangingEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IContentPresenter))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IContentPresenterOverrides))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ContentPresenter : global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.Controls.IContentPresenter, global::Windows.UI.Xaml.Controls.IContentPresenterOverrides
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ContentPresenter() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IContentPresenterFactory_CreateInstance("Windows.UI.Xaml.Controls.ContentPresenter");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IContentPresenterFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.ContentPresenter).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IContentPresenterFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IContentPresenterFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IContentPresenterFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IContentPresenterFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		public virtual object get_Content()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.IContentPresenter__Impl.Stubs.get_Content(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		public virtual void put_Content(object value)
		{
			global::Windows.UI.Xaml.Controls.IContentPresenter__Impl.Stubs.put_Content(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentTemplate")]
		public virtual global::Windows.UI.Xaml.DataTemplate get_ContentTemplate()
		{
			global::Windows.UI.Xaml.DataTemplate __retVal = global::Windows.UI.Xaml.Controls.IContentPresenter__Impl.Stubs.get_ContentTemplate(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContentTemplate")]
		public virtual void put_ContentTemplate(global::Windows.UI.Xaml.DataTemplate value)
		{
			global::Windows.UI.Xaml.Controls.IContentPresenter__Impl.Stubs.put_ContentTemplate(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentTransitions")]
		public virtual global::Windows.UI.Xaml.Media.Animation.TransitionCollection get_ContentTransitions()
		{
			global::Windows.UI.Xaml.Media.Animation.TransitionCollection __retVal = global::Windows.UI.Xaml.Controls.IContentPresenter__Impl.Stubs.get_ContentTransitions(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContentTransitions")]
		public virtual void put_ContentTransitions(global::Windows.UI.Xaml.Media.Animation.TransitionCollection value)
		{
			global::Windows.UI.Xaml.Controls.IContentPresenter__Impl.Stubs.put_ContentTransitions(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IContentPresenterOverrides.OnContentTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldContentTemplate, 
					global::Windows.UI.Xaml.DataTemplate newContentTemplate)
		{
			this.OnContentTemplateChanged(
								oldContentTemplate, 
								newContentTemplate
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnContentTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldContentTemplate, 
					global::Windows.UI.Xaml.DataTemplate newContentTemplate)
		{
			global::Windows.UI.Xaml.Controls.IContentPresenterOverrides__Impl.Stubs.OnContentTemplateChanged(
								this, 
								oldContentTemplate, 
								newContentTemplate
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Controls.IContentPresenterOverrides.OnContentTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldContentTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newContentTemplateSelector)
		{
			this.OnContentTemplateSelectorChanged(
								oldContentTemplateSelector, 
								newContentTemplateSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void OnContentTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldContentTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newContentTemplateSelector)
		{
			global::Windows.UI.Xaml.Controls.IContentPresenterOverrides__Impl.Stubs.OnContentTemplateSelectorChanged(
								this, 
								oldContentTemplateSelector, 
								newContentTemplateSelector
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ContentPresenter(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.ISwapChainPanel))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class SwapChainPanel : global::Windows.UI.Xaml.Controls.Grid, global::Windows.UI.Xaml.Controls.ISwapChainPanel
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SwapChainPanel() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__ISwapChainPanelFactory_CreateInstance("Windows.UI.Xaml.Controls.SwapChainPanel");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__ISwapChainPanelFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.SwapChainPanel).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.ISwapChainPanelFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.ISwapChainPanelFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.ISwapChainPanelFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.ISwapChainPanelFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CompositionScaleChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CompositionScaleChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SwapChainPanel, object> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.ISwapChainPanel__Impl.Stubs.add_CompositionScaleChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CompositionScaleChanged")]
		public virtual void remove_CompositionScaleChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.ISwapChainPanel__Impl.Stubs.remove_CompositionScaleChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public SwapChainPanel(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IMediaElement))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IMediaElement3))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class MediaElement : global::Windows.UI.Xaml.FrameworkElement, global::Windows.UI.Xaml.Controls.IMediaElement, global::Windows.UI.Xaml.Controls.IMediaElement3
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public MediaElement() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Controls.MediaElement");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MediaOpened")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MediaOpened(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_MediaOpened(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MediaOpened")]
		public void remove_MediaOpened(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_MediaOpened(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MediaEnded")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MediaEnded(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_MediaEnded(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MediaEnded")]
		public void remove_MediaEnded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_MediaEnded(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MediaFailed")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MediaFailed(global::Windows.UI.Xaml.ExceptionRoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_MediaFailed(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MediaFailed")]
		public void remove_MediaFailed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_MediaFailed(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DownloadProgressChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DownloadProgressChanged(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_DownloadProgressChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DownloadProgressChanged")]
		public void remove_DownloadProgressChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_DownloadProgressChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "BufferingProgressChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_BufferingProgressChanged(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_BufferingProgressChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "BufferingProgressChanged")]
		public void remove_BufferingProgressChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_BufferingProgressChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CurrentStateChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CurrentStateChanged(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_CurrentStateChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CurrentStateChanged")]
		public void remove_CurrentStateChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_CurrentStateChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MarkerReached")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MarkerReached(global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_MarkerReached(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MarkerReached")]
		public void remove_MarkerReached(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_MarkerReached(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RateChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RateChanged(global::Windows.UI.Xaml.Media.RateChangedRoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_RateChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RateChanged")]
		public void remove_RateChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_RateChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VolumeChanged")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VolumeChanged(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_VolumeChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VolumeChanged")]
		public void remove_VolumeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_VolumeChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SeekCompleted")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SeekCompleted(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.add_SeekCompleted(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SeekCompleted")]
		public void remove_SeekCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.remove_SeekCompleted(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void Play()
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.Play(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public void SetSource(
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					string mimeType)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement__Impl.Stubs.SetSource(
								this, 
								stream, 
								mimeType
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PartialMediaFailureDetected")]
		public global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PartialMediaFailureDetected(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.MediaElement, global::Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs> handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IMediaElement3__Impl.Stubs.add_PartialMediaFailureDetected(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PartialMediaFailureDetected")]
		public void remove_PartialMediaFailureDetected(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IMediaElement3__Impl.Stubs.remove_PartialMediaFailureDetected(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public MediaElement(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.IFrame))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Frame : global::Windows.UI.Xaml.Controls.ContentControl, global::Windows.UI.Xaml.Controls.IFrame
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Frame() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Controls__IFrameFactory_CreateInstance("Windows.UI.Xaml.Controls.Frame");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Controls__IFrameFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Controls.Frame).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Controls.IFrameFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IFrameFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Controls.IFrameFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Controls.IFrameFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Navigated")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Navigated(global::Windows.UI.Xaml.Navigation.NavigatedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.add_Navigated(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Navigated")]
		public virtual void remove_Navigated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.remove_Navigated(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Navigating")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Navigating(global::Windows.UI.Xaml.Navigation.NavigatingCancelEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.add_Navigating(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Navigating")]
		public virtual void remove_Navigating(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.remove_Navigating(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "NavigationFailed")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_NavigationFailed(global::Windows.UI.Xaml.Navigation.NavigationFailedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.add_NavigationFailed(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "NavigationFailed")]
		public virtual void remove_NavigationFailed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.remove_NavigationFailed(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "NavigationStopped")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_NavigationStopped(global::Windows.UI.Xaml.Navigation.NavigationStoppedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.add_NavigationStopped(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "NavigationStopped")]
		public virtual void remove_NavigationStopped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.remove_NavigationStopped(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public virtual bool Navigate(
					global::System.Type sourcePageType, 
					object parameter)
		{
			bool __retVal = global::Windows.UI.Xaml.Controls.IFrame__Impl.Stubs.Navigate(
								this, 
								sourcePageType, 
								parameter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public Frame(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControlFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControl
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Template")]
		global::Windows.UI.Xaml.Controls.ControlTemplate get_Template();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Template")]
		void put_Template(global::Windows.UI.Xaml.Controls.ControlTemplate value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		global::Windows.UI.Xaml.Media.Brush get_Background();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		void put_Background(global::Windows.UI.Xaml.Media.Brush value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "IsEnabledChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_IsEnabledChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "IsEnabledChanged")]
		void remove_IsEnabledChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		bool Focus(global::Windows.UI.Xaml.FocusState value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControlTemplate
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TargetType")]
		global::System.Type get_TargetType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TargetType")]
		void put_TargetType(global::System.Type value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControl4
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "FocusEngaged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_FocusEngaged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.FocusEngagedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "FocusEngaged")]
		void remove_FocusEngaged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "FocusDisengaged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_FocusDisengaged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.Control, global::Windows.UI.Xaml.Controls.FocusDisengagedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "FocusDisengaged")]
		void remove_FocusDisengaged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFocusEngagedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFocusDisengagedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControlProtected
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "DefaultStyleKey")]
		object get_DefaultStyleKey();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "DefaultStyleKey")]
		void put_DefaultStyleKey(object value);

		global::Windows.UI.Xaml.DependencyObject GetTemplateChild(string childName);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControlOverrides
	{
		void OnPointerEntered(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerPressed(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerMoved(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerReleased(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerExited(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerCaptureLost(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerCanceled(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnPointerWheelChanged(global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

		void OnTapped(global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e);

		void OnDoubleTapped(global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e);

		void OnHolding(global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs e);

		void OnRightTapped(global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs e);

		void OnManipulationStarting(global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e);

		void OnManipulationInertiaStarting(global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e);

		void OnManipulationStarted(global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e);

		void OnManipulationDelta(global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e);

		void OnManipulationCompleted(global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e);

		void OnKeyUp(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e);

		void OnKeyDown(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e);

		void OnGotFocus(global::Windows.UI.Xaml.RoutedEventArgs e);

		void OnLostFocus(global::Windows.UI.Xaml.RoutedEventArgs e);

		void OnDragEnter(global::Windows.UI.Xaml.DragEventArgs e);

		void OnDragLeave(global::Windows.UI.Xaml.DragEventArgs e);

		void OnDragOver(global::Windows.UI.Xaml.DragEventArgs e);

		void OnDrop(global::Windows.UI.Xaml.DragEventArgs e);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IControlOverrides6
	{
		void OnPreviewKeyDown(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e);

		void OnPreviewKeyUp(global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e);

		void OnCharacterReceived(global::Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs e);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUserControlFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IUserControl
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		global::Windows.UI.Xaml.UIElement get_Content();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		void put_Content(global::Windows.UI.Xaml.UIElement value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPageFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPage
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPageOverrides
	{
		void OnNavigatedFrom(global::Windows.UI.Xaml.Navigation.NavigationEventArgs e);

		void OnNavigatedTo(global::Windows.UI.Xaml.Navigation.NavigationEventArgs e);

		void OnNavigatingFrom(global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs e);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGridStatics
	{
		int GetRow(global::Windows.UI.Xaml.FrameworkElement element);

		void SetRow(
					global::Windows.UI.Xaml.FrameworkElement element, 
					int value);

		int GetColumn(global::Windows.UI.Xaml.FrameworkElement element);

		void SetColumn(
					global::Windows.UI.Xaml.FrameworkElement element, 
					int value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPanel
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Children")]
		global::Windows.UI.Xaml.Controls.UIElementCollection get_Children();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		global::Windows.UI.Xaml.Media.Brush get_Background();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		void put_Background(global::Windows.UI.Xaml.Media.Brush value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGridFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGrid
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "RowDefinitions")]
		global::Windows.UI.Xaml.Controls.RowDefinitionCollection get_RowDefinitions();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ColumnDefinitions")]
		global::Windows.UI.Xaml.Controls.ColumnDefinitionCollection get_ColumnDefinitions();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRowDefinition
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Height")]
		global::Windows.UI.Xaml.GridLength get_Height();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Height")]
		void put_Height(global::Windows.UI.Xaml.GridLength value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IColumnDefinition
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Width")]
		global::Windows.UI.Xaml.GridLength get_Width();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Width")]
		void put_Width(global::Windows.UI.Xaml.GridLength value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBorder
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Background")]
		global::Windows.UI.Xaml.Media.Brush get_Background();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Background")]
		void put_Background(global::Windows.UI.Xaml.Media.Brush value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Child")]
		global::Windows.UI.Xaml.UIElement get_Child();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Child")]
		void put_Child(global::Windows.UI.Xaml.UIElement value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStackPanelFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStackPanel
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Orientation")]
		global::Windows.UI.Xaml.Controls.Orientation get_Orientation();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Orientation")]
		void put_Orientation(global::Windows.UI.Xaml.Controls.Orientation value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentControlFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentControl
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		object get_Content();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		void put_Content(object value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentControlOverrides
	{
		void OnContentChanged(
					object oldContent, 
					object newContent);

		void OnContentTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldContentTemplate, 
					global::Windows.UI.Xaml.DataTemplate newContentTemplate);

		void OnContentTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldContentTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newContentTemplateSelector);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContainerContentChangingEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemIndex")]
		int get_ItemIndex();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Item")]
		object get_Item();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Phase")]
		uint get_Phase();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateSelector
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateSelectorOverrides
	{
		global::Windows.UI.Xaml.DataTemplate SelectTemplateCore(
					object item, 
					global::Windows.UI.Xaml.DependencyObject container);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateSelectorOverrides2
	{
		global::Windows.UI.Xaml.DataTemplate SelectTemplateCore(object item);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollViewer
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HorizontalScrollBarVisibility")]
		global::Windows.UI.Xaml.Controls.ScrollBarVisibility get_HorizontalScrollBarVisibility();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HorizontalScrollBarVisibility")]
		void put_HorizontalScrollBarVisibility(global::Windows.UI.Xaml.Controls.ScrollBarVisibility value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "VerticalScrollBarVisibility")]
		global::Windows.UI.Xaml.Controls.ScrollBarVisibility get_VerticalScrollBarVisibility();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "VerticalScrollBarVisibility")]
		void put_VerticalScrollBarVisibility(global::Windows.UI.Xaml.Controls.ScrollBarVisibility value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ViewChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ViewChanged(global::System.EventHandler<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ViewChanged")]
		void remove_ViewChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollViewerViewChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollViewer2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ViewChanging")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ViewChanging(global::System.EventHandler<global::Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ViewChanging")]
		void remove_ViewChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollViewerViewChangingEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollViewer3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DirectManipulationStarted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DirectManipulationStarted(global::System.EventHandler<object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DirectManipulationStarted")]
		void remove_DirectManipulationStarted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DirectManipulationCompleted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DirectManipulationCompleted(global::System.EventHandler<object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DirectManipulationCompleted")]
		void remove_DirectManipulationCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollViewer4
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "AnchorRequested")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_AnchorRequested(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ScrollViewer, global::Windows.UI.Xaml.Controls.AnchorRequestedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "AnchorRequested")]
		void remove_AnchorRequested(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAnchorRequestedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBlock
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontSize")]
		double get_FontSize();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontSize")]
		void put_FontSize(double value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontFamily")]
		global::Windows.UI.Xaml.Media.FontFamily get_FontFamily();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontFamily")]
		void put_FontFamily(global::Windows.UI.Xaml.Media.FontFamily value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FontWeight")]
		global::Windows.UI.Text.FontWeight get_FontWeight();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "FontWeight")]
		void put_FontWeight(global::Windows.UI.Text.FontWeight value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TextWrapping")]
		global::Windows.UI.Xaml.TextWrapping get_TextWrapping();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "TextWrapping")]
		void put_TextWrapping(global::Windows.UI.Xaml.TextWrapping value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Text")]
		string get_Text();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Text")]
		void put_Text(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanged(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanged")]
		void remove_SelectionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextMenuOpening")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextMenuOpening(global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextMenuOpening")]
		void remove_ContextMenuOpening(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ContextMenuOpeningEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Controls.ContextMenuEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContextMenuEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBlock6
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "IsTextTrimmedChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_IsTextTrimmedChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBlock, global::Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "IsTextTrimmedChanged")]
		void remove_IsTextTrimmedChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IIsTextTrimmedChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IButtonFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IButton
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IItemsControl
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemsSource")]
		object get_ItemsSource();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ItemsSource")]
		void put_ItemsSource(object value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Items")]
		global::Windows.UI.Xaml.Controls.ItemCollection get_Items();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemTemplate")]
		global::Windows.UI.Xaml.DataTemplate get_ItemTemplate();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ItemTemplate")]
		void put_ItemTemplate(global::Windows.UI.Xaml.DataTemplate value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IItemsControlOverrides
	{
		bool IsItemItsOwnContainerOverride(object item);

		global::Windows.UI.Xaml.DependencyObject GetContainerForItemOverride();

		void ClearContainerForItemOverride(
					global::Windows.UI.Xaml.DependencyObject element, 
					object item);

		void PrepareContainerForItemOverride(
					global::Windows.UI.Xaml.DependencyObject element, 
					object item);

		void OnItemsChanged(object e);

		void OnItemContainerStyleChanged(
					global::Windows.UI.Xaml.Style oldItemContainerStyle, 
					global::Windows.UI.Xaml.Style newItemContainerStyle);

		void OnItemContainerStyleSelectorChanged(
					global::Windows.UI.Xaml.Controls.StyleSelector oldItemContainerStyleSelector, 
					global::Windows.UI.Xaml.Controls.StyleSelector newItemContainerStyleSelector);

		void OnItemTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldItemTemplate, 
					global::Windows.UI.Xaml.DataTemplate newItemTemplate);

		void OnItemTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldItemTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newItemTemplateSelector);

		void OnGroupStyleSelectorChanged(
					global::Windows.UI.Xaml.Controls.GroupStyleSelector oldGroupStyleSelector, 
					global::Windows.UI.Xaml.Controls.GroupStyleSelector newGroupStyleSelector);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStyleSelector
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IStyleSelectorOverrides
	{
		global::Windows.UI.Xaml.Style SelectStyleCore(
					object item, 
					global::Windows.UI.Xaml.DependencyObject container);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGroupStyleSelector
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGroupStyleSelectorOverrides
	{
		global::Windows.UI.Xaml.Controls.GroupStyle SelectGroupStyleCore(
					object group, 
					uint level);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGroupStyle
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Panel")]
		global::Windows.UI.Xaml.Controls.ItemsPanelTemplate get_Panel();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Panel")]
		void put_Panel(global::Windows.UI.Xaml.Controls.ItemsPanelTemplate value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContainerStyle")]
		global::Windows.UI.Xaml.Style get_ContainerStyle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContainerStyle")]
		void put_ContainerStyle(global::Windows.UI.Xaml.Style value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContainerStyleSelector")]
		global::Windows.UI.Xaml.Controls.StyleSelector get_ContainerStyleSelector();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContainerStyleSelector")]
		void put_ContainerStyleSelector(global::Windows.UI.Xaml.Controls.StyleSelector value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeaderTemplate")]
		global::Windows.UI.Xaml.DataTemplate get_HeaderTemplate();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeaderTemplate")]
		void put_HeaderTemplate(global::Windows.UI.Xaml.DataTemplate value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeaderTemplateSelector")]
		global::Windows.UI.Xaml.Controls.DataTemplateSelector get_HeaderTemplateSelector();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeaderTemplateSelector")]
		void put_HeaderTemplateSelector(global::Windows.UI.Xaml.Controls.DataTemplateSelector value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HidesIfEmpty")]
		bool get_HidesIfEmpty();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HidesIfEmpty")]
		void put_HidesIfEmpty(bool value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IItemsPanelTemplate
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGroupStyle2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "HeaderContainerStyle")]
		global::Windows.UI.Xaml.Style get_HeaderContainerStyle();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "HeaderContainerStyle")]
		void put_HeaderContainerStyle(global::Windows.UI.Xaml.Style value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void SelectionChangedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISelectionChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IListViewBase
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsItemClickEnabled")]
		bool get_IsItemClickEnabled();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "IsItemClickEnabled")]
		void put_IsItemClickEnabled(bool value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ItemClick")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ItemClick(global::Windows.UI.Xaml.Controls.ItemClickEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ItemClick")]
		void remove_ItemClick(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragItemsStarting")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragItemsStarting(global::Windows.UI.Xaml.Controls.DragItemsStartingEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragItemsStarting")]
		void remove_DragItemsStarting(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		void ScrollIntoView(object item);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Header")]
		object get_Header();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Header")]
		void put_Header(object value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ItemClickEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Controls.ItemClickEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IItemClickEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ClickedItem")]
		object get_ClickedItem();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void DragItemsStartingEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Controls.DragItemsStartingEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDragItemsStartingEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IListViewBase2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContainerContentChanging")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContainerContentChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContainerContentChanging")]
		void remove_ContainerContentChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IListViewBase4
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DragItemsCompleted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DragItemsCompleted(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DragItemsCompleted")]
		void remove_DragItemsCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ChoosingItemContainer")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ChoosingItemContainer(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ChoosingItemContainer")]
		void remove_ChoosingItemContainer(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ChoosingGroupHeaderContainer")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ChoosingGroupHeaderContainer(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.ListViewBase, global::Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ChoosingGroupHeaderContainer")]
		void remove_ChoosingGroupHeaderContainer(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDragItemsCompletedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IChoosingItemContainerEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IChoosingGroupHeaderContainerEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IListViewFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IListView
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBoxFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBox
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Text")]
		string get_Text();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Text")]
		void put_Text(string value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextChanged(global::Windows.UI.Xaml.Controls.TextChangedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextChanged")]
		void remove_TextChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanged(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanged")]
		void remove_SelectionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "ContextMenuOpening")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_ContextMenuOpening(global::Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "ContextMenuOpening")]
		void remove_ContextMenuOpening(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void TextChangedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Controls.TextChangedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBox2
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Paste")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Paste(global::Windows.UI.Xaml.Controls.TextControlPasteEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Paste")]
		void remove_Paste(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void TextControlPasteEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Controls.TextControlPasteEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextControlPasteEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBox3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextCompositionStarted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextCompositionStarted(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextCompositionStarted")]
		void remove_TextCompositionStarted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextCompositionChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextCompositionChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextCompositionChanged")]
		void remove_TextCompositionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextCompositionEnded")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextCompositionEnded(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextCompositionEnded")]
		void remove_TextCompositionEnded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CandidateWindowBoundsChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CandidateWindowBoundsChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CandidateWindowBoundsChanged")]
		void remove_CandidateWindowBoundsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "TextChanging")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_TextChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "TextChanging")]
		void remove_TextChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextCompositionStartedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextCompositionChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextCompositionEndedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICandidateWindowBoundsChangedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBoxTextChangingEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBox6
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CopyingToClipboard")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CopyingToClipboard(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CopyingToClipboard")]
		void remove_CopyingToClipboard(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CuttingToClipboard")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CuttingToClipboard(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CuttingToClipboard")]
		void remove_CuttingToClipboard(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "BeforeTextChanging")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_BeforeTextChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "BeforeTextChanging")]
		void remove_BeforeTextChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextControlCopyingToClipboardEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextControlCuttingToClipboardEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBoxBeforeTextChangingEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBox8
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanging")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanging(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TextBox, global::Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanging")]
		void remove_SelectionChanging(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITextBoxSelectionChangingEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentPresenterFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentPresenter
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Content")]
		object get_Content();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Content")]
		void put_Content(object value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentTemplate")]
		global::Windows.UI.Xaml.DataTemplate get_ContentTemplate();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContentTemplate")]
		void put_ContentTemplate(global::Windows.UI.Xaml.DataTemplate value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentTransitions")]
		global::Windows.UI.Xaml.Media.Animation.TransitionCollection get_ContentTransitions();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "ContentTransitions")]
		void put_ContentTransitions(global::Windows.UI.Xaml.Media.Animation.TransitionCollection value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContentPresenterOverrides
	{
		void OnContentTemplateChanged(
					global::Windows.UI.Xaml.DataTemplate oldContentTemplate, 
					global::Windows.UI.Xaml.DataTemplate newContentTemplate);

		void OnContentTemplateSelectorChanged(
					global::Windows.UI.Xaml.Controls.DataTemplateSelector oldContentTemplateSelector, 
					global::Windows.UI.Xaml.Controls.DataTemplateSelector newContentTemplateSelector);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISwapChainPanelFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISwapChainPanel
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CompositionScaleChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CompositionScaleChanged(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.SwapChainPanel, object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CompositionScaleChanged")]
		void remove_CompositionScaleChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IMediaElement
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MediaOpened")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MediaOpened(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MediaOpened")]
		void remove_MediaOpened(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MediaEnded")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MediaEnded(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MediaEnded")]
		void remove_MediaEnded(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MediaFailed")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MediaFailed(global::Windows.UI.Xaml.ExceptionRoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MediaFailed")]
		void remove_MediaFailed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "DownloadProgressChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_DownloadProgressChanged(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "DownloadProgressChanged")]
		void remove_DownloadProgressChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "BufferingProgressChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_BufferingProgressChanged(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "BufferingProgressChanged")]
		void remove_BufferingProgressChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "CurrentStateChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_CurrentStateChanged(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "CurrentStateChanged")]
		void remove_CurrentStateChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "MarkerReached")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_MarkerReached(global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "MarkerReached")]
		void remove_MarkerReached(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "RateChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_RateChanged(global::Windows.UI.Xaml.Media.RateChangedRoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "RateChanged")]
		void remove_RateChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VolumeChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VolumeChanged(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VolumeChanged")]
		void remove_VolumeChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SeekCompleted")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SeekCompleted(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SeekCompleted")]
		void remove_SeekCompleted(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		void Play();

		void SetSource(
					global::Windows.Storage.Streams.IRandomAccessStream stream, 
					string mimeType);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IMediaElement3
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "PartialMediaFailureDetected")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_PartialMediaFailureDetected(global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.MediaElement, global::Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "PartialMediaFailureDetected")]
		void remove_PartialMediaFailureDetected(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrameFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFrame
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Navigated")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Navigated(global::Windows.UI.Xaml.Navigation.NavigatedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Navigated")]
		void remove_Navigated(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Navigating")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Navigating(global::Windows.UI.Xaml.Navigation.NavigatingCancelEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Navigating")]
		void remove_Navigating(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "NavigationFailed")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_NavigationFailed(global::Windows.UI.Xaml.Navigation.NavigationFailedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "NavigationFailed")]
		void remove_NavigationFailed(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "NavigationStopped")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_NavigationStopped(global::Windows.UI.Xaml.Navigation.NavigationStoppedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "NavigationStopped")]
		void remove_NavigationStopped(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		bool Navigate(
					global::System.Type sourcePageType, 
					object parameter);
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum Orientation
	{
		Vertical = 0,
		Horizontal = 1,
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum ScrollBarVisibility
	{
		Disabled = 0,
		Auto = 1,
		Hidden = 2,
		Visible = 3,
	}
}

namespace Windows.UI.Xaml.Controls.Primitives
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.Primitives.IButtonBase))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ButtonBase : global::Windows.UI.Xaml.Controls.ContentControl, global::Windows.UI.Xaml.Controls.Primitives.IButtonBase
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Click")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Click(global::Windows.UI.Xaml.RoutedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.Primitives.IButtonBase__Impl.Stubs.add_Click(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Click")]
		public virtual void remove_Click(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.Primitives.IButtonBase__Impl.Stubs.remove_Click(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ButtonBase(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Controls.Primitives.ISelector))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Selector : global::Windows.UI.Xaml.Controls.ItemsControl, global::Windows.UI.Xaml.Controls.Primitives.ISelector
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SelectedIndex")]
		public virtual int get_SelectedIndex()
		{
			int __retVal = global::Windows.UI.Xaml.Controls.Primitives.ISelector__Impl.Stubs.get_SelectedIndex(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SelectedIndex")]
		public virtual void put_SelectedIndex(int value)
		{
			global::Windows.UI.Xaml.Controls.Primitives.ISelector__Impl.Stubs.put_SelectedIndex(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SelectedItem")]
		public virtual object get_SelectedItem()
		{
			object __retVal = global::Windows.UI.Xaml.Controls.Primitives.ISelector__Impl.Stubs.get_SelectedItem(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SelectedItem")]
		public virtual void put_SelectedItem(object value)
		{
			global::Windows.UI.Xaml.Controls.Primitives.ISelector__Impl.Stubs.put_SelectedItem(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanged")]
		public virtual global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanged(global::Windows.UI.Xaml.Controls.SelectionChangedEventHandler handler)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken __retVal = global::Windows.UI.Xaml.Controls.Primitives.ISelector__Impl.Stubs.add_SelectionChanged(
								this, 
								handler
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanged")]
		public virtual void remove_SelectionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token)
		{
			global::Windows.UI.Xaml.Controls.Primitives.ISelector__Impl.Stubs.remove_SelectionChanged(
								this, 
								token
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Selector(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IScrollSnapPointsInfo
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "HorizontalSnapPointsChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_HorizontalSnapPointsChanged(global::System.EventHandler<object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "HorizontalSnapPointsChanged")]
		void remove_HorizontalSnapPointsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "VerticalSnapPointsChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_VerticalSnapPointsChanged(global::System.EventHandler<object> handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "VerticalSnapPointsChanged")]
		void remove_VerticalSnapPointsChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IButtonBase
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "Click")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_Click(global::Windows.UI.Xaml.RoutedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "Click")]
		void remove_Click(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISelector
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SelectedIndex")]
		int get_SelectedIndex();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SelectedIndex")]
		void put_SelectedIndex(int value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SelectedItem")]
		object get_SelectedItem();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "SelectedItem")]
		void put_SelectedItem(object value);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventAdd, "SelectionChanged")]
		global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken add_SelectionChanged(global::Windows.UI.Xaml.Controls.SelectionChangedEventHandler handler);

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.EventRemove, "SelectionChanged")]
		void remove_SelectionChanged(global::System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public enum ComponentResourceLocation
	{
		Application = 0,
		Nested = 1,
	}
}

namespace Windows.UI.Xaml.Data
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Data.IBindingBase))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class BindingBase : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Data.IBindingBase
	{
		public BindingBase(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Data.IBinding))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Binding : global::Windows.UI.Xaml.Data.BindingBase, global::Windows.UI.Xaml.Data.IBinding
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public Binding() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Data__IBindingFactory_CreateInstance("Windows.UI.Xaml.Data.Binding");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Data__IBindingFactory_CreateInstance(string typeName)
		{
			global::System.IntPtr innerInspectable;
			global::System.IntPtr outerInspectable = default(global::System.IntPtr);
			if (global::System.Runtime.InteropServices.McgMarshal.IsOfType(
								this, 
								typeof(global::Windows.UI.Xaml.Data.Binding).TypeHandle
							))
			{
				global::System.IntPtr __pRetVal_NoAggregation;
				__pRetVal_NoAggregation = global::Windows.UI.Xaml.Data.IBindingFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Data.IBindingFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(innerInspectable);
				global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal_NoAggregation);
				return __pRetVal_NoAggregation;
			}
			else
			{
				outerInspectable = global::System.Runtime.InteropServices.McgMarshal.GetOuterIInspectableForManagedObject(this);
				global::System.IntPtr __pRetVal_WithAggregation;
				__pRetVal_WithAggregation = global::Windows.UI.Xaml.Data.IBindingFactory__Impl.Stubs.CreateInstance(
									global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
														typeName, 
														typeof(global::Windows.UI.Xaml.Data.IBindingFactory).TypeHandle
													), 
									outerInspectable, 
									out innerInspectable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(outerInspectable);
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(__pRetVal_WithAggregation);
				return innerInspectable;
			}
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Path")]
		public virtual global::Windows.UI.Xaml.PropertyPath get_Path()
		{
			global::Windows.UI.Xaml.PropertyPath __retVal = global::Windows.UI.Xaml.Data.IBinding__Impl.Stubs.get_Path(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Path")]
		public virtual void put_Path(global::Windows.UI.Xaml.PropertyPath value)
		{
			global::Windows.UI.Xaml.Data.IBinding__Impl.Stubs.put_Path(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Binding(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPropertyChangedEventArgsFactory
	{
		global::System.IntPtr CreateInstance(
					string name, 
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPropertyChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "PropertyName")]
		string get_PropertyName();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IValueConverter
	{
		object Convert(
					object value, 
					global::System.Type targetType, 
					object parameter, 
					string language);

		object ConvertBack(
					object value, 
					global::System.Type targetType, 
					object parameter, 
					string language);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBindingBase
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBindingFactory
	{
		global::System.IntPtr CreateInstance(
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBinding
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Path")]
		global::Windows.UI.Xaml.PropertyPath get_Path();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Path")]
		void put_Path(global::Windows.UI.Xaml.PropertyPath value);
	}
}

namespace Windows.UI.Xaml.Hosting
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Hosting.IElementCompositionPreview))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(131072)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ElementCompositionPreview : global::System.__ComObject, global::Windows.UI.Xaml.Hosting.IElementCompositionPreview
	{
		public static global::Windows.UI.Composition.Visual GetElementVisual(global::Windows.UI.Xaml.UIElement element)
		{
			global::Windows.UI.Composition.Visual retval;
			retval = __Factory_Windows_UI_Xaml_Hosting__IElementCompositionPreviewStatics_GetElementVisual(
								"Windows.UI.Xaml.Hosting.ElementCompositionPreview", 
								element
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return retval;
		}

		static global::Windows.UI.Composition.Visual __Factory_Windows_UI_Xaml_Hosting__IElementCompositionPreviewStatics_GetElementVisual(
					string typeName, 
					global::Windows.UI.Xaml.UIElement element)
		{
			global::Windows.UI.Composition.Visual __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics__Impl.Stubs.GetElementVisual(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics).TypeHandle
												), 
								element
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __pRetVal;
		}

		public static void SetElementChildVisual(
					global::Windows.UI.Xaml.UIElement element, 
					global::Windows.UI.Composition.Visual visual)
		{
			__Factory_Windows_UI_Xaml_Hosting__IElementCompositionPreviewStatics_SetElementChildVisual(
								"Windows.UI.Xaml.Hosting.ElementCompositionPreview", 
								element, 
								visual
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml_Hosting__IElementCompositionPreviewStatics_SetElementChildVisual(
					string typeName, 
					global::Windows.UI.Xaml.UIElement element, 
					global::Windows.UI.Composition.Visual visual)
		{
			global::Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics__Impl.Stubs.SetElementChildVisual(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics).TypeHandle
												), 
								element, 
								visual
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public ElementCompositionPreview(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IElementCompositionPreviewStatics
	{
		global::Windows.UI.Composition.Visual GetElementVisual(global::Windows.UI.Xaml.UIElement element);

		void SetElementChildVisual(
					global::Windows.UI.Xaml.UIElement element, 
					global::Windows.UI.Composition.Visual visual);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IElementCompositionPreview
	{
	}
}

namespace Windows.UI.Xaml.Input
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IKeyRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class KeyRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IKeyRoutedEventArgs
	{
		public KeyRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IPointerRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class PointerRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IPointerRoutedEventArgs
	{
		public PointerRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.ITappedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TappedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.ITappedRoutedEventArgs
	{
		public TappedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IDoubleTappedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class DoubleTappedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IDoubleTappedRoutedEventArgs
	{
		public DoubleTappedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IHoldingRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class HoldingRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IHoldingRoutedEventArgs
	{
		public HoldingRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IRightTappedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class RightTappedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IRightTappedRoutedEventArgs
	{
		public RightTappedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IManipulationStartingRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ManipulationStartingRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IManipulationStartingRoutedEventArgs
	{
		public ManipulationStartingRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ManipulationInertiaStartingRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs
	{
		public ManipulationInertiaStartingRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IManipulationStartedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ManipulationStartedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IManipulationStartedRoutedEventArgs
	{
		public ManipulationStartedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ManipulationDeltaRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs
	{
		public ManipulationDeltaRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ManipulationCompletedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs
	{
		public ManipulationCompletedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IContextRequestedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(196608)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ContextRequestedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IContextRequestedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public ContextRequestedEventArgs() : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Input.ContextRequestedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public ContextRequestedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(196608)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AccessKeyDisplayRequestedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public AccessKeyDisplayRequestedEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public AccessKeyDisplayRequestedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(196608)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AccessKeyDisplayDismissedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public AccessKeyDisplayDismissedEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public AccessKeyDisplayDismissedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IAccessKeyInvokedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(196608)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class AccessKeyInvokedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Input.IAccessKeyInvokedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public AccessKeyInvokedEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public AccessKeyInvokedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IGettingFocusEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class GettingFocusEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.IGettingFocusEventArgs
	{
		public GettingFocusEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.ILosingFocusEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class LosingFocusEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.ILosingFocusEventArgs
	{
		public LosingFocusEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.INoFocusCandidateFoundEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class NoFocusCandidateFoundEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.INoFocusCandidateFoundEventArgs
	{
		public NoFocusCandidateFoundEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class CharacterReceivedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs
	{
		public CharacterReceivedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ProcessKeyboardAcceleratorEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs
	{
		public ProcessKeyboardAcceleratorEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class KeyboardAcceleratorInvokedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs
	{
		public KeyboardAcceleratorInvokedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void KeyEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.KeyRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IKeyRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void PointerEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.PointerRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPointerRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void TappedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITappedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void DoubleTappedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDoubleTappedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void HoldingEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.HoldingRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IHoldingRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void RightTappedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.RightTappedRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRightTappedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ManipulationStartingEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IManipulationStartingRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ManipulationInertiaStartingEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IManipulationInertiaStartingRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ManipulationStartedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IManipulationStartedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ManipulationDeltaEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IManipulationDeltaRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void ManipulationCompletedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IManipulationCompletedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IContextRequestedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAccessKeyDisplayRequestedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAccessKeyDisplayDismissedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IAccessKeyInvokedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IGettingFocusEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ILosingFocusEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INoFocusCandidateFoundEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ICharacterReceivedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IProcessKeyboardAcceleratorEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IKeyboardAcceleratorInvokedEventArgs
	{
	}
}

namespace Windows.UI.Xaml.Interop
{
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INotifyCollectionChangedEventArgsFactory
	{
		global::System.IntPtr CreateInstanceWithAllParameters(
					global::System.Collections.Specialized.NotifyCollectionChangedAction action, 
					global::System.Collections.IList newItems, 
					global::System.Collections.IList oldItems, 
					int newIndex, 
					int oldIndex, 
					global::System.IntPtr baseInterface, 
					out global::System.IntPtr innerInterface);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INotifyCollectionChangedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Action")]
		global::System.Collections.Specialized.NotifyCollectionChangedAction get_Action();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewItems")]
		global::System.Collections.IList get_NewItems();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OldItems")]
		global::System.Collections.IList get_OldItems();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "NewStartingIndex")]
		int get_NewStartingIndex();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "OldStartingIndex")]
		int get_OldStartingIndex();
	}
}

namespace Windows.UI.Xaml.Markup
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Markup.IXamlBindingHelper))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class XamlBindingHelper : global::System.__ComObject, global::Windows.UI.Xaml.Markup.IXamlBindingHelper
	{
		public static void SetDataTemplateComponent(
					global::Windows.UI.Xaml.DependencyObject element, 
					global::Windows.UI.Xaml.Markup.IDataTemplateComponent value)
		{
			__Factory_Windows_UI_Xaml_Markup__IXamlBindingHelperStatics_SetDataTemplateComponent(
								"Windows.UI.Xaml.Markup.XamlBindingHelper", 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		static void __Factory_Windows_UI_Xaml_Markup__IXamlBindingHelperStatics_SetDataTemplateComponent(
					string typeName, 
					global::Windows.UI.Xaml.DependencyObject element, 
					global::Windows.UI.Xaml.Markup.IDataTemplateComponent value)
		{
			global::Windows.UI.Xaml.Markup.IXamlBindingHelperStatics__Impl.Stubs.SetDataTemplateComponent(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Markup.IXamlBindingHelperStatics).TypeHandle
												), 
								element, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public XamlBindingHelper(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXamlMetadataProvider
	{
		global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type);

		global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName);

		global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXamlType
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BaseType")]
		global::Windows.UI.Xaml.Markup.IXamlType get_BaseType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ContentProperty")]
		global::Windows.UI.Xaml.Markup.IXamlMember get_ContentProperty();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "FullName")]
		string get_FullName();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsArray")]
		bool get_IsArray();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsCollection")]
		bool get_IsCollection();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsConstructible")]
		bool get_IsConstructible();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsDictionary")]
		bool get_IsDictionary();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsMarkupExtension")]
		bool get_IsMarkupExtension();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsBindable")]
		bool get_IsBindable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "ItemType")]
		global::Windows.UI.Xaml.Markup.IXamlType get_ItemType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "KeyType")]
		global::Windows.UI.Xaml.Markup.IXamlType get_KeyType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "UnderlyingType")]
		global::System.Type get_UnderlyingType();

		object ActivateInstance();

		object CreateFromString(string value);

		global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name);

		void AddToVector(
					object instance, 
					object value);

		void AddToMap(
					object instance, 
					object key, 
					object value);

		void RunInitializer();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXamlMember
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsAttachable")]
		bool get_IsAttachable();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsDependencyProperty")]
		bool get_IsDependencyProperty();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "IsReadOnly")]
		bool get_IsReadOnly();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Name")]
		string get_Name();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "TargetType")]
		global::Windows.UI.Xaml.Markup.IXamlType get_TargetType();

		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Type")]
		global::Windows.UI.Xaml.Markup.IXamlType get_Type();

		object GetValue(object instance);

		void SetValue(
					object instance, 
					object value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXamlType2 : global::Windows.UI.Xaml.Markup.IXamlType
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "BoxedType")]
		global::Windows.UI.Xaml.Markup.IXamlType get_BoxedType();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IComponentConnector
	{
		void Connect(
					int connectionId, 
					object target);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IComponentConnector2
	{
		global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(
					int connectionId, 
					object target);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IDataTemplateComponent
	{
		void Recycle();

		void ProcessBindings(
					object item, 
					int itemIndex, 
					int phase, 
					out int nextPhase);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXamlBindingHelperStatics
	{
		void SetDataTemplateComponent(
					global::Windows.UI.Xaml.DependencyObject element, 
					global::Windows.UI.Xaml.Markup.IDataTemplateComponent value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IXamlBindingHelper
	{
	}

	[global::System.AttributeUsage((global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Module 
				| global::System.AttributeTargets.Class 
				| global::System.AttributeTargets.Struct 
				| global::System.AttributeTargets.Enum 
				| global::System.AttributeTargets.Constructor 
				| global::System.AttributeTargets.Method 
				| global::System.AttributeTargets.Property 
				| global::System.AttributeTargets.Field 
				| global::System.AttributeTargets.Event 
				| global::System.AttributeTargets.Interface 
				| global::System.AttributeTargets.Parameter 
				| global::System.AttributeTargets.Delegate 
				| global::System.AttributeTargets.ReturnValue 
				| global::System.AttributeTargets.GenericParameter), AllowMultiple=false)]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class ContentPropertyAttribute : global::System.Attribute
	{
		public ContentPropertyAttribute()
		{
			throw new global::System.InvalidOperationException("Cannot construct type \'Windows.UI.Xaml.Markup.ContentPropertyAttribute\'.  Windows Runtime attribute types are no" +
					"t constructable.");
		}
		public string Name;
	}

	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe struct XmlnsDefinition
	{
		public string XmlNamespace;
		public string Namespace;
	}
}

namespace Windows.UI.Xaml.Media
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.IBrush))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.IBrushOverrides2))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Brush : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Media.IBrush, global::Windows.UI.Xaml.Media.IBrushOverrides2, global::Windows.UI.Composition.IAnimationObject
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		public virtual void put_Opacity(double value)
		{
			global::Windows.UI.Xaml.Media.IBrush__Impl.Stubs.put_Opacity(
								this, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		void global::Windows.UI.Xaml.Media.IBrushOverrides2.PopulatePropertyInfoOverride(
					string propertyName, 
					global::Windows.UI.Composition.AnimationPropertyInfo animationPropertyInfo)
		{
			this.PopulatePropertyInfoOverride(
								propertyName, 
								animationPropertyInfo
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		protected virtual void PopulatePropertyInfoOverride(
					string propertyName, 
					global::Windows.UI.Composition.AnimationPropertyInfo animationPropertyInfo)
		{
			global::Windows.UI.Xaml.Media.IBrushOverrides2__Impl.Stubs.PopulatePropertyInfoOverride(
								this, 
								propertyName, 
								animationPropertyInfo
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
		}

		public Brush(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.IFontFamily))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class FontFamily : global::System.__ComObject, global::Windows.UI.Xaml.Media.IFontFamily
	{
		public FontFamily(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.IImageSource))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class ImageSource : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Media.IImageSource
	{
		public ImageSource(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.ITimelineMarkerRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TimelineMarkerRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Media.ITimelineMarkerRoutedEventArgs
	{
		public TimelineMarkerRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.IRateChangedRoutedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class RateChangedRoutedEventArgs : global::Windows.UI.Xaml.RoutedEventArgs, global::Windows.UI.Xaml.Media.IRateChangedRoutedEventArgs
	{
		public RateChangedRoutedEventArgs(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class PartialMediaFailureDetectedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public PartialMediaFailureDetectedEventArgs()
		{
			global::System.IntPtr retval;
			retval = global::System.Runtime.InteropServices.McgMarshal.ActivateInstance("Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs");
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		public PartialMediaFailureDetectedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.ISolidColorBrush))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class SolidColorBrush : global::Windows.UI.Xaml.Media.Brush, global::Windows.UI.Xaml.Media.ISolidColorBrush
	{
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public SolidColorBrush(global::Windows.UI.Color color) : 
				base(default(global::System.IntPtr))
		{
			global::System.IntPtr retval;
			retval = __Factory_Windows_UI_Xaml_Media__ISolidColorBrushFactory_CreateInstanceWithColor(
								"Windows.UI.Xaml.Media.SolidColorBrush", 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref retval);
			this.__AttachAndRelease(retval);
		}

		global::System.IntPtr __Factory_Windows_UI_Xaml_Media__ISolidColorBrushFactory_CreateInstanceWithColor(
					string typeName, 
					global::Windows.UI.Color color)
		{
			global::System.IntPtr __pRetVal;
			__pRetVal = global::Windows.UI.Xaml.Media.ISolidColorBrushFactory__Impl.Stubs.CreateInstanceWithColor(
								global::System.Runtime.InteropServices.McgMarshal.GetActivationFactory(
													typeName, 
													typeof(global::Windows.UI.Xaml.Media.ISolidColorBrushFactory).TypeHandle
												), 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::__Interop.McgHelpers.GetIUnknownForFactoryReturn(ref __pRetVal);
			return __pRetVal;
		}

		public SolidColorBrush(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBrush
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertySet, "Opacity")]
		void put_Opacity(double value);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IBrushOverrides2
	{
		void PopulatePropertyInfoOverride(
					string propertyName, 
					global::Windows.UI.Composition.AnimationPropertyInfo animationPropertyInfo);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IFontFamily
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IImageSource
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void TimelineMarkerRoutedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITimelineMarkerRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void RateChangedRoutedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Media.RateChangedRoutedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IRateChangedRoutedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IPartialMediaFailureDetectedEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISolidColorBrushFactory
	{
		global::System.IntPtr CreateInstanceWithColor(global::Windows.UI.Color color);
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISolidColorBrush
	{
	}
}

namespace Windows.UI.Xaml.Media.Animation
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>))]
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Media.Animation.Transition>))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(65536)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class TransitionCollection : global::System.__ComObject, global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>, global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>, global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Media.Animation.Transition>
	{
		int global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.Count
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Count(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>)this));
			}
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.IsReadOnly
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IsReadOnly(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>)this));
			}
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.Add(global::Windows.UI.Xaml.Media.Animation.Transition item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Add(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.Clear()
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Clear(((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>)this));
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.Contains(global::Windows.UI.Xaml.Media.Animation.Transition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Contains(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.CopyTo(
					global::Windows.UI.Xaml.Media.Animation.Transition[] array, 
					int arrayindex)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.CopyTo(
								this, 
								array, 
								arrayindex
							);
		}

		bool global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Animation.Transition>.Remove(global::Windows.UI.Xaml.Media.Animation.Transition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Remove(
								this, 
								item
							);
		}

		global::Windows.UI.Xaml.Media.Animation.Transition global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>.this[int index]
		{
			get
			{
				return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Get(
									((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>)this), 
									index
								);
			}
			set
			{
				global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Indexer_Set(
									this, 
									index, 
									value
								);
			}
		}

		int global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>.IndexOf(global::Windows.UI.Xaml.Media.Animation.Transition item)
		{
			return global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.IndexOf(
								this, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>.Insert(
					int index, 
					global::Windows.UI.Xaml.Media.Animation.Transition item)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.Insert(
								this, 
								index, 
								item
							);
		}

		void global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>.RemoveAt(int index)
		{
			global::System.Runtime.InteropServices.WindowsRuntime.IVectorSharedReferenceTypesRCWAdapter.RemoveAt(
								((global::System.Collections.Generic.IList<global::Windows.UI.Xaml.Media.Animation.Transition>)this), 
								index
							);
		}

		global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.Media.Animation.Transition> global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Media.Animation.Transition>.GetEnumerator()
		{
			global::System.RuntimeTypeHandle dummySharedDynamicAdapter = typeof(global::System.Runtime.InteropServices.WindowsRuntime.IIterableSharedReferenceTypesDynamicAdapter<global::Windows.UI.Xaml.Media.Animation.Transition>).TypeHandle;
			return (global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.Media.Animation.Transition>)global::__Interop.McgHelpers.GetGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Media.Animation.Transition>).TypeHandle
							);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return global::__Interop.McgHelpers.GetNonGenericEnumerator(
								this, 
								typeof(global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.Media.Animation.Transition>).TypeHandle
							);
		}

		public TransitionCollection(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.Animation.ITransition))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class Transition : global::Windows.UI.Xaml.DependencyObject, global::Windows.UI.Xaml.Media.Animation.ITransition
	{
		public Transition(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ITransition
	{
	}
}

namespace Windows.UI.Xaml.Media.Imaging
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe class SurfaceImageSource : global::Windows.UI.Xaml.Media.ImageSource, global::Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource
	{
		public SurfaceImageSource(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class VirtualSurfaceImageSource : global::Windows.UI.Xaml.Media.Imaging.SurfaceImageSource, global::Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource
	{
		public VirtualSurfaceImageSource(global::System.IntPtr dummy) : 
				base(dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface ISurfaceImageSource
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface IVirtualSurfaceImageSource
	{
	}
}

namespace Windows.UI.Xaml.Navigation
{
	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Navigation.INavigationEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class NavigationEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Navigation.INavigationEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Parameter")]
		public object get_Parameter()
		{
			object __retVal = global::Windows.UI.Xaml.Navigation.INavigationEventArgs__Impl.Stubs.get_Parameter(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public NavigationEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Navigation.INavigatingCancelEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class NavigatingCancelEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Navigation.INavigatingCancelEventArgs
	{
		public NavigatingCancelEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::System.Runtime.CompilerServices.DependencyReductionConditionallyDependent(typeof(global::Windows.UI.Xaml.Navigation.INavigationFailedEventArgs))]
	[global::System.Runtime.InteropServices.McgWindowsRuntimeVersion(0)]
	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe sealed class NavigationFailedEventArgs : global::System.__ComObject, global::Windows.UI.Xaml.Navigation.INavigationFailedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourcePageType")]
		public global::System.Type get_SourcePageType()
		{
			global::System.Type __retVal = global::Windows.UI.Xaml.Navigation.INavigationFailedEventArgs__Impl.Stubs.get_SourcePageType(this);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			return __retVal;
		}

		public NavigationFailedEventArgs(global::System.IntPtr dummy)
		{
		}
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INavigationEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "Parameter")]
		object get_Parameter();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INavigatingCancelEventArgs
	{
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe interface INavigationFailedEventArgs
	{
		[global::System.Runtime.InteropServices.McgAccessor(global::System.Runtime.InteropServices.McgAccessorKind.PropertyGet, "SourcePageType")]
		global::System.Type get_SourcePageType();
	}

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void NavigatedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Navigation.NavigationEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void NavigatingCancelEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void NavigationFailedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Navigation.NavigationFailedEventArgs e);

	[global::Internal.Reflection.MetadataTransformed(global::Internal.Reflection.MetadataTransformation.OriginallyForeignObject)]
	[global::Internal.Reflection.ExplicitScope("Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime")]
	public unsafe delegate void NavigationStoppedEventHandler(
				object sender, 
				global::Windows.UI.Xaml.Navigation.NavigationEventArgs e);
}

